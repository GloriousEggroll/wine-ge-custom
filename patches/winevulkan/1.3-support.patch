From 3b8d7f7f036f3f4771284df97cce99d114fe42cb Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Tue, 25 Jan 2022 13:37:07 +0100
Subject: [PATCH] winevulkan: Support Vulkan 1.3.

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/vulkan-1/vulkan-1.spec     |  74 ++---
 dlls/winevulkan/loader_thunks.c | 365 ++++++++++++++++++++++++
 dlls/winevulkan/loader_thunks.h | 291 +++++++++++++++++++
 dlls/winevulkan/make_vulkan     |   2 +-
 dlls/winevulkan/vulkan_thunks.c | 480 ++++++++++++++++++++++++++++++++
 dlls/winevulkan/vulkan_thunks.h |  76 ++++-
 dlls/winevulkan/winevulkan.spec |  74 ++---
 include/wine/vulkan.h           |  74 +++++
 8 files changed, 1360 insertions(+), 76 deletions(-)

diff --git a/dlls/vulkan-1/vulkan-1.spec b/dlls/vulkan-1/vulkan-1.spec
index 4c2a36bcd50..c73df709e08 100644
--- a/dlls/vulkan-1/vulkan-1.spec
+++ b/dlls/vulkan-1/vulkan-1.spec
@@ -21,25 +21,25 @@
 @ stdcall vkCmdBeginQuery(ptr int64 long long) winevulkan.vkCmdBeginQuery
 @ stdcall vkCmdBeginRenderPass(ptr ptr long) winevulkan.vkCmdBeginRenderPass
 @ stdcall vkCmdBeginRenderPass2(ptr ptr ptr) winevulkan.vkCmdBeginRenderPass2
-@ stub vkCmdBeginRendering
+@ stdcall vkCmdBeginRendering(ptr ptr) winevulkan.vkCmdBeginRendering
 @ stdcall vkCmdBindDescriptorSets(ptr long int64 long long ptr long ptr) winevulkan.vkCmdBindDescriptorSets
 @ stdcall vkCmdBindIndexBuffer(ptr int64 int64 long) winevulkan.vkCmdBindIndexBuffer
 @ stdcall vkCmdBindPipeline(ptr long int64) winevulkan.vkCmdBindPipeline
 @ stdcall vkCmdBindVertexBuffers(ptr long long ptr ptr) winevulkan.vkCmdBindVertexBuffers
-@ stub vkCmdBindVertexBuffers2
+@ stdcall vkCmdBindVertexBuffers2(ptr long long ptr ptr ptr ptr) winevulkan.vkCmdBindVertexBuffers2
 @ stdcall vkCmdBlitImage(ptr int64 long int64 long long ptr long) winevulkan.vkCmdBlitImage
-@ stub vkCmdBlitImage2
+@ stdcall vkCmdBlitImage2(ptr ptr) winevulkan.vkCmdBlitImage2
 @ stdcall vkCmdClearAttachments(ptr long ptr long ptr) winevulkan.vkCmdClearAttachments
 @ stdcall vkCmdClearColorImage(ptr int64 long ptr long ptr) winevulkan.vkCmdClearColorImage
 @ stdcall vkCmdClearDepthStencilImage(ptr int64 long ptr long ptr) winevulkan.vkCmdClearDepthStencilImage
 @ stdcall vkCmdCopyBuffer(ptr int64 int64 long ptr) winevulkan.vkCmdCopyBuffer
-@ stub vkCmdCopyBuffer2
+@ stdcall vkCmdCopyBuffer2(ptr ptr) winevulkan.vkCmdCopyBuffer2
 @ stdcall vkCmdCopyBufferToImage(ptr int64 int64 long long ptr) winevulkan.vkCmdCopyBufferToImage
-@ stub vkCmdCopyBufferToImage2
+@ stdcall vkCmdCopyBufferToImage2(ptr ptr) winevulkan.vkCmdCopyBufferToImage2
 @ stdcall vkCmdCopyImage(ptr int64 long int64 long long ptr) winevulkan.vkCmdCopyImage
-@ stub vkCmdCopyImage2
+@ stdcall vkCmdCopyImage2(ptr ptr) winevulkan.vkCmdCopyImage2
 @ stdcall vkCmdCopyImageToBuffer(ptr int64 long int64 long ptr) winevulkan.vkCmdCopyImageToBuffer
-@ stub vkCmdCopyImageToBuffer2
+@ stdcall vkCmdCopyImageToBuffer2(ptr ptr) winevulkan.vkCmdCopyImageToBuffer2
 @ stdcall vkCmdCopyQueryPoolResults(ptr int64 long long int64 int64 int64 long) winevulkan.vkCmdCopyQueryPoolResults
 @ stdcall vkCmdDispatch(ptr long long long) winevulkan.vkCmdDispatch
 @ stdcall vkCmdDispatchBase(ptr long long long long long long) winevulkan.vkCmdDispatchBase
@@ -53,50 +53,50 @@
 @ stdcall vkCmdEndQuery(ptr int64 long) winevulkan.vkCmdEndQuery
 @ stdcall vkCmdEndRenderPass(ptr) winevulkan.vkCmdEndRenderPass
 @ stdcall vkCmdEndRenderPass2(ptr ptr) winevulkan.vkCmdEndRenderPass2
-@ stub vkCmdEndRendering
+@ stdcall vkCmdEndRendering(ptr) winevulkan.vkCmdEndRendering
 @ stdcall vkCmdExecuteCommands(ptr long ptr) winevulkan.vkCmdExecuteCommands
 @ stdcall vkCmdFillBuffer(ptr int64 int64 int64 long) winevulkan.vkCmdFillBuffer
 @ stdcall vkCmdNextSubpass(ptr long) winevulkan.vkCmdNextSubpass
 @ stdcall vkCmdNextSubpass2(ptr ptr ptr) winevulkan.vkCmdNextSubpass2
 @ stdcall vkCmdPipelineBarrier(ptr long long long long ptr long ptr long ptr) winevulkan.vkCmdPipelineBarrier
-@ stub vkCmdPipelineBarrier2
+@ stdcall vkCmdPipelineBarrier2(ptr ptr) winevulkan.vkCmdPipelineBarrier2
 @ stdcall vkCmdPushConstants(ptr int64 long long long ptr) winevulkan.vkCmdPushConstants
 @ stdcall vkCmdResetEvent(ptr int64 long) winevulkan.vkCmdResetEvent
-@ stub vkCmdResetEvent2
+@ stdcall vkCmdResetEvent2(ptr int64 int64) winevulkan.vkCmdResetEvent2
 @ stdcall vkCmdResetQueryPool(ptr int64 long long) winevulkan.vkCmdResetQueryPool
 @ stdcall vkCmdResolveImage(ptr int64 long int64 long long ptr) winevulkan.vkCmdResolveImage
-@ stub vkCmdResolveImage2
+@ stdcall vkCmdResolveImage2(ptr ptr) winevulkan.vkCmdResolveImage2
 @ stdcall vkCmdSetBlendConstants(ptr ptr) winevulkan.vkCmdSetBlendConstants
-@ stub vkCmdSetCullMode
+@ stdcall vkCmdSetCullMode(ptr long) winevulkan.vkCmdSetCullMode
 @ stdcall vkCmdSetDepthBias(ptr float float float) winevulkan.vkCmdSetDepthBias
-@ stub vkCmdSetDepthBiasEnable
+@ stdcall vkCmdSetDepthBiasEnable(ptr long) winevulkan.vkCmdSetDepthBiasEnable
 @ stdcall vkCmdSetDepthBounds(ptr float float) winevulkan.vkCmdSetDepthBounds
-@ stub vkCmdSetDepthBoundsTestEnable
-@ stub vkCmdSetDepthCompareOp
-@ stub vkCmdSetDepthTestEnable
-@ stub vkCmdSetDepthWriteEnable
+@ stdcall vkCmdSetDepthBoundsTestEnable(ptr long) winevulkan.vkCmdSetDepthBoundsTestEnable
+@ stdcall vkCmdSetDepthCompareOp(ptr long) winevulkan.vkCmdSetDepthCompareOp
+@ stdcall vkCmdSetDepthTestEnable(ptr long) winevulkan.vkCmdSetDepthTestEnable
+@ stdcall vkCmdSetDepthWriteEnable(ptr long) winevulkan.vkCmdSetDepthWriteEnable
 @ stdcall vkCmdSetDeviceMask(ptr long) winevulkan.vkCmdSetDeviceMask
 @ stdcall vkCmdSetEvent(ptr int64 long) winevulkan.vkCmdSetEvent
-@ stub vkCmdSetEvent2
-@ stub vkCmdSetFrontFace
+@ stdcall vkCmdSetEvent2(ptr int64 ptr) winevulkan.vkCmdSetEvent2
+@ stdcall vkCmdSetFrontFace(ptr long) winevulkan.vkCmdSetFrontFace
 @ stdcall vkCmdSetLineWidth(ptr float) winevulkan.vkCmdSetLineWidth
-@ stub vkCmdSetPrimitiveRestartEnable
-@ stub vkCmdSetPrimitiveTopology
-@ stub vkCmdSetRasterizerDiscardEnable
+@ stdcall vkCmdSetPrimitiveRestartEnable(ptr long) winevulkan.vkCmdSetPrimitiveRestartEnable
+@ stdcall vkCmdSetPrimitiveTopology(ptr long) winevulkan.vkCmdSetPrimitiveTopology
+@ stdcall vkCmdSetRasterizerDiscardEnable(ptr long) winevulkan.vkCmdSetRasterizerDiscardEnable
 @ stdcall vkCmdSetScissor(ptr long long ptr) winevulkan.vkCmdSetScissor
-@ stub vkCmdSetScissorWithCount
+@ stdcall vkCmdSetScissorWithCount(ptr long ptr) winevulkan.vkCmdSetScissorWithCount
 @ stdcall vkCmdSetStencilCompareMask(ptr long long) winevulkan.vkCmdSetStencilCompareMask
-@ stub vkCmdSetStencilOp
+@ stdcall vkCmdSetStencilOp(ptr long long long long long) winevulkan.vkCmdSetStencilOp
 @ stdcall vkCmdSetStencilReference(ptr long long) winevulkan.vkCmdSetStencilReference
-@ stub vkCmdSetStencilTestEnable
+@ stdcall vkCmdSetStencilTestEnable(ptr long) winevulkan.vkCmdSetStencilTestEnable
 @ stdcall vkCmdSetStencilWriteMask(ptr long long) winevulkan.vkCmdSetStencilWriteMask
 @ stdcall vkCmdSetViewport(ptr long long ptr) winevulkan.vkCmdSetViewport
-@ stub vkCmdSetViewportWithCount
+@ stdcall vkCmdSetViewportWithCount(ptr long ptr) winevulkan.vkCmdSetViewportWithCount
 @ stdcall vkCmdUpdateBuffer(ptr int64 int64 int64 ptr) winevulkan.vkCmdUpdateBuffer
 @ stdcall vkCmdWaitEvents(ptr long ptr long long long ptr long ptr long ptr) winevulkan.vkCmdWaitEvents
-@ stub vkCmdWaitEvents2
+@ stdcall vkCmdWaitEvents2(ptr long ptr ptr) winevulkan.vkCmdWaitEvents2
 @ stdcall vkCmdWriteTimestamp(ptr long int64 long) winevulkan.vkCmdWriteTimestamp
-@ stub vkCmdWriteTimestamp2
+@ stdcall vkCmdWriteTimestamp2(ptr int64 int64 long) winevulkan.vkCmdWriteTimestamp2
 @ stdcall vkCreateBuffer(ptr ptr ptr ptr) winevulkan.vkCreateBuffer
 @ stdcall vkCreateBufferView(ptr ptr ptr ptr) winevulkan.vkCreateBufferView
 @ stdcall vkCreateCommandPool(ptr ptr ptr ptr) winevulkan.vkCreateCommandPool
@@ -116,7 +116,7 @@
 @ stdcall vkCreateInstance(ptr ptr ptr) winevulkan.vkCreateInstance
 @ stdcall vkCreatePipelineCache(ptr ptr ptr ptr) winevulkan.vkCreatePipelineCache
 @ stdcall vkCreatePipelineLayout(ptr ptr ptr ptr) winevulkan.vkCreatePipelineLayout
-@ stub vkCreatePrivateDataSlot
+@ stdcall vkCreatePrivateDataSlot(ptr ptr ptr ptr) winevulkan.vkCreatePrivateDataSlot
 @ stdcall vkCreateQueryPool(ptr ptr ptr ptr) winevulkan.vkCreateQueryPool
 @ stdcall vkCreateRenderPass(ptr ptr ptr ptr) winevulkan.vkCreateRenderPass
 @ stdcall vkCreateRenderPass2(ptr ptr ptr ptr) winevulkan.vkCreateRenderPass2
@@ -143,7 +143,7 @@
 @ stdcall vkDestroyPipeline(ptr int64 ptr) winevulkan.vkDestroyPipeline
 @ stdcall vkDestroyPipelineCache(ptr int64 ptr) winevulkan.vkDestroyPipelineCache
 @ stdcall vkDestroyPipelineLayout(ptr int64 ptr) winevulkan.vkDestroyPipelineLayout
-@ stub vkDestroyPrivateDataSlot
+@ stdcall vkDestroyPrivateDataSlot(ptr int64 ptr) winevulkan.vkDestroyPrivateDataSlot
 @ stdcall vkDestroyQueryPool(ptr int64 ptr) winevulkan.vkDestroyQueryPool
 @ stdcall vkDestroyRenderPass(ptr int64 ptr) winevulkan.vkDestroyRenderPass
 @ stdcall vkDestroySampler(ptr int64 ptr) winevulkan.vkDestroySampler
@@ -170,12 +170,12 @@
 @ stdcall vkGetBufferMemoryRequirements2(ptr ptr ptr) winevulkan.vkGetBufferMemoryRequirements2
 @ stdcall vkGetBufferOpaqueCaptureAddress(ptr ptr) winevulkan.vkGetBufferOpaqueCaptureAddress
 @ stdcall vkGetDescriptorSetLayoutSupport(ptr ptr ptr) winevulkan.vkGetDescriptorSetLayoutSupport
-@ stub vkGetDeviceBufferMemoryRequirements
+@ stdcall vkGetDeviceBufferMemoryRequirements(ptr ptr ptr) winevulkan.vkGetDeviceBufferMemoryRequirements
 @ stdcall vkGetDeviceGroupPeerMemoryFeatures(ptr long long long ptr) winevulkan.vkGetDeviceGroupPeerMemoryFeatures
 @ stdcall vkGetDeviceGroupPresentCapabilitiesKHR(ptr ptr) winevulkan.vkGetDeviceGroupPresentCapabilitiesKHR
 @ stdcall vkGetDeviceGroupSurfacePresentModesKHR(ptr int64 ptr) winevulkan.vkGetDeviceGroupSurfacePresentModesKHR
-@ stub vkGetDeviceImageMemoryRequirements
-@ stub vkGetDeviceImageSparseMemoryRequirements
+@ stdcall vkGetDeviceImageMemoryRequirements(ptr ptr ptr) winevulkan.vkGetDeviceImageMemoryRequirements
+@ stdcall vkGetDeviceImageSparseMemoryRequirements(ptr ptr ptr ptr) winevulkan.vkGetDeviceImageSparseMemoryRequirements
 @ stdcall vkGetDeviceMemoryCommitment(ptr int64 ptr) winevulkan.vkGetDeviceMemoryCommitment
 @ stdcall vkGetDeviceMemoryOpaqueCaptureAddress(ptr ptr) winevulkan.vkGetDeviceMemoryOpaqueCaptureAddress
 @ stdcall vkGetDeviceProcAddr(ptr str) winevulkan.vkGetDeviceProcAddr
@@ -218,10 +218,10 @@
 @ stdcall vkGetPhysicalDeviceSurfaceFormatsKHR(ptr int64 ptr ptr) winevulkan.vkGetPhysicalDeviceSurfaceFormatsKHR
 @ stdcall vkGetPhysicalDeviceSurfacePresentModesKHR(ptr int64 ptr ptr) winevulkan.vkGetPhysicalDeviceSurfacePresentModesKHR
 @ stdcall vkGetPhysicalDeviceSurfaceSupportKHR(ptr long int64 ptr) winevulkan.vkGetPhysicalDeviceSurfaceSupportKHR
-@ stub vkGetPhysicalDeviceToolProperties
+@ stdcall vkGetPhysicalDeviceToolProperties(ptr ptr ptr) winevulkan.vkGetPhysicalDeviceToolProperties
 @ stdcall vkGetPhysicalDeviceWin32PresentationSupportKHR(ptr long) winevulkan.vkGetPhysicalDeviceWin32PresentationSupportKHR
 @ stdcall vkGetPipelineCacheData(ptr int64 ptr ptr) winevulkan.vkGetPipelineCacheData
-@ stub vkGetPrivateData
+@ stdcall vkGetPrivateData(ptr long int64 int64 ptr) winevulkan.vkGetPrivateData
 @ stdcall vkGetQueryPoolResults(ptr int64 long long long ptr int64 long) winevulkan.vkGetQueryPoolResults
 @ stdcall vkGetRenderAreaGranularity(ptr int64 ptr) winevulkan.vkGetRenderAreaGranularity
 @ stdcall vkGetSemaphoreCounterValue(ptr int64 ptr) winevulkan.vkGetSemaphoreCounterValue
@@ -232,7 +232,7 @@
 @ stdcall vkQueueBindSparse(ptr long ptr int64) winevulkan.vkQueueBindSparse
 @ stdcall vkQueuePresentKHR(ptr ptr) winevulkan.vkQueuePresentKHR
 @ stdcall vkQueueSubmit(ptr long ptr int64) winevulkan.vkQueueSubmit
-@ stub vkQueueSubmit2
+@ stdcall vkQueueSubmit2(ptr long ptr int64) winevulkan.vkQueueSubmit2
 @ stdcall vkQueueWaitIdle(ptr) winevulkan.vkQueueWaitIdle
 @ stdcall vkResetCommandBuffer(ptr long) winevulkan.vkResetCommandBuffer
 @ stdcall vkResetCommandPool(ptr int64 long) winevulkan.vkResetCommandPool
@@ -241,7 +241,7 @@
 @ stdcall vkResetFences(ptr long ptr) winevulkan.vkResetFences
 @ stdcall vkResetQueryPool(ptr int64 long long) winevulkan.vkResetQueryPool
 @ stdcall vkSetEvent(ptr int64) winevulkan.vkSetEvent
-@ stub vkSetPrivateData
+@ stdcall vkSetPrivateData(ptr long int64 int64 int64) winevulkan.vkSetPrivateData
 @ stdcall vkSignalSemaphore(ptr ptr) winevulkan.vkSignalSemaphore
 @ stdcall vkTrimCommandPool(ptr int64 long) winevulkan.vkTrimCommandPool
 @ stdcall vkUnmapMemory(ptr int64) winevulkan.vkUnmapMemory
diff --git a/dlls/winevulkan/loader_thunks.c b/dlls/winevulkan/loader_thunks.c
index 1e0183806b6..1245156b140 100644
--- a/dlls/winevulkan/loader_thunks.c
+++ b/dlls/winevulkan/loader_thunks.c
@@ -227,6 +227,14 @@ void WINAPI vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRend
     unix_funcs->p_vk_call(unix_vkCmdBeginRenderPass2KHR, &params);
 }
 
+void WINAPI vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
+{
+    struct vkCmdBeginRendering_params params;
+    params.commandBuffer = commandBuffer;
+    params.pRenderingInfo = pRenderingInfo;
+    unix_funcs->p_vk_call(unix_vkCmdBeginRendering, &params);
+}
+
 void WINAPI vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
 {
     struct vkCmdBeginRenderingKHR_params params;
@@ -330,6 +338,19 @@ void WINAPI vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t first
     unix_funcs->p_vk_call(unix_vkCmdBindVertexBuffers, &params);
 }
 
+void WINAPI vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
+{
+    struct vkCmdBindVertexBuffers2_params params;
+    params.commandBuffer = commandBuffer;
+    params.firstBinding = firstBinding;
+    params.bindingCount = bindingCount;
+    params.pBuffers = pBuffers;
+    params.pOffsets = pOffsets;
+    params.pSizes = pSizes;
+    params.pStrides = pStrides;
+    unix_funcs->p_vk_call(unix_vkCmdBindVertexBuffers2, &params);
+}
+
 void WINAPI vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
 {
     struct vkCmdBindVertexBuffers2EXT_params params;
@@ -357,6 +378,14 @@ void WINAPI vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkIm
     unix_funcs->p_vk_call(unix_vkCmdBlitImage, &params);
 }
 
+void WINAPI vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
+{
+    struct vkCmdBlitImage2_params params;
+    params.commandBuffer = commandBuffer;
+    params.pBlitImageInfo = pBlitImageInfo;
+    unix_funcs->p_vk_call(unix_vkCmdBlitImage2, &params);
+}
+
 void WINAPI vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
 {
     struct vkCmdBlitImage2KHR_params params;
@@ -474,6 +503,14 @@ void WINAPI vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, V
     unix_funcs->p_vk_call(unix_vkCmdCopyBuffer, &params);
 }
 
+void WINAPI vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
+{
+    struct vkCmdCopyBuffer2_params params;
+    params.commandBuffer = commandBuffer;
+    params.pCopyBufferInfo = pCopyBufferInfo;
+    unix_funcs->p_vk_call(unix_vkCmdCopyBuffer2, &params);
+}
+
 void WINAPI vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
 {
     struct vkCmdCopyBuffer2KHR_params params;
@@ -494,6 +531,14 @@ void WINAPI vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBu
     unix_funcs->p_vk_call(unix_vkCmdCopyBufferToImage, &params);
 }
 
+void WINAPI vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
+{
+    struct vkCmdCopyBufferToImage2_params params;
+    params.commandBuffer = commandBuffer;
+    params.pCopyBufferToImageInfo = pCopyBufferToImageInfo;
+    unix_funcs->p_vk_call(unix_vkCmdCopyBufferToImage2, &params);
+}
+
 void WINAPI vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
 {
     struct vkCmdCopyBufferToImage2KHR_params params;
@@ -515,6 +560,14 @@ void WINAPI vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkIm
     unix_funcs->p_vk_call(unix_vkCmdCopyImage, &params);
 }
 
+void WINAPI vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
+{
+    struct vkCmdCopyImage2_params params;
+    params.commandBuffer = commandBuffer;
+    params.pCopyImageInfo = pCopyImageInfo;
+    unix_funcs->p_vk_call(unix_vkCmdCopyImage2, &params);
+}
+
 void WINAPI vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
 {
     struct vkCmdCopyImage2KHR_params params;
@@ -535,6 +588,14 @@ void WINAPI vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcIma
     unix_funcs->p_vk_call(unix_vkCmdCopyImageToBuffer, &params);
 }
 
+void WINAPI vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
+{
+    struct vkCmdCopyImageToBuffer2_params params;
+    params.commandBuffer = commandBuffer;
+    params.pCopyImageToBufferInfo = pCopyImageToBufferInfo;
+    unix_funcs->p_vk_call(unix_vkCmdCopyImageToBuffer2, &params);
+}
+
 void WINAPI vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
 {
     struct vkCmdCopyImageToBuffer2KHR_params params;
@@ -891,6 +952,13 @@ void WINAPI vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpas
     unix_funcs->p_vk_call(unix_vkCmdEndRenderPass2KHR, &params);
 }
 
+void WINAPI vkCmdEndRendering(VkCommandBuffer commandBuffer)
+{
+    struct vkCmdEndRendering_params params;
+    params.commandBuffer = commandBuffer;
+    unix_funcs->p_vk_call(unix_vkCmdEndRendering, &params);
+}
+
 void WINAPI vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)
 {
     struct vkCmdEndRenderingKHR_params params;
@@ -988,6 +1056,14 @@ void WINAPI vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageF
     unix_funcs->p_vk_call(unix_vkCmdPipelineBarrier, &params);
 }
 
+void WINAPI vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
+{
+    struct vkCmdPipelineBarrier2_params params;
+    params.commandBuffer = commandBuffer;
+    params.pDependencyInfo = pDependencyInfo;
+    unix_funcs->p_vk_call(unix_vkCmdPipelineBarrier2, &params);
+}
+
 void WINAPI vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
 {
     struct vkCmdPipelineBarrier2KHR_params params;
@@ -1048,6 +1124,15 @@ void WINAPI vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipe
     unix_funcs->p_vk_call(unix_vkCmdResetEvent, &params);
 }
 
+void WINAPI vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
+{
+    struct vkCmdResetEvent2_params params;
+    params.commandBuffer = commandBuffer;
+    params.event = event;
+    params.stageMask = stageMask;
+    unix_funcs->p_vk_call(unix_vkCmdResetEvent2, &params);
+}
+
 void WINAPI vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
 {
     struct vkCmdResetEvent2KHR_params params;
@@ -1080,6 +1165,14 @@ void WINAPI vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, V
     unix_funcs->p_vk_call(unix_vkCmdResolveImage, &params);
 }
 
+void WINAPI vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
+{
+    struct vkCmdResolveImage2_params params;
+    params.commandBuffer = commandBuffer;
+    params.pResolveImageInfo = pResolveImageInfo;
+    unix_funcs->p_vk_call(unix_vkCmdResolveImage2, &params);
+}
+
 void WINAPI vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
 {
     struct vkCmdResolveImage2KHR_params params;
@@ -1123,6 +1216,14 @@ void WINAPI vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t
     unix_funcs->p_vk_call(unix_vkCmdSetColorWriteEnableEXT, &params);
 }
 
+void WINAPI vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
+{
+    struct vkCmdSetCullMode_params params;
+    params.commandBuffer = commandBuffer;
+    params.cullMode = cullMode;
+    unix_funcs->p_vk_call(unix_vkCmdSetCullMode, &params);
+}
+
 void WINAPI vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
 {
     struct vkCmdSetCullModeEXT_params params;
@@ -1141,6 +1242,14 @@ void WINAPI vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasCons
     unix_funcs->p_vk_call(unix_vkCmdSetDepthBias, &params);
 }
 
+void WINAPI vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
+{
+    struct vkCmdSetDepthBiasEnable_params params;
+    params.commandBuffer = commandBuffer;
+    params.depthBiasEnable = depthBiasEnable;
+    unix_funcs->p_vk_call(unix_vkCmdSetDepthBiasEnable, &params);
+}
+
 void WINAPI vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
 {
     struct vkCmdSetDepthBiasEnableEXT_params params;
@@ -1158,6 +1267,14 @@ void WINAPI vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBou
     unix_funcs->p_vk_call(unix_vkCmdSetDepthBounds, &params);
 }
 
+void WINAPI vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
+{
+    struct vkCmdSetDepthBoundsTestEnable_params params;
+    params.commandBuffer = commandBuffer;
+    params.depthBoundsTestEnable = depthBoundsTestEnable;
+    unix_funcs->p_vk_call(unix_vkCmdSetDepthBoundsTestEnable, &params);
+}
+
 void WINAPI vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
 {
     struct vkCmdSetDepthBoundsTestEnableEXT_params params;
@@ -1166,6 +1283,14 @@ void WINAPI vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBo
     unix_funcs->p_vk_call(unix_vkCmdSetDepthBoundsTestEnableEXT, &params);
 }
 
+void WINAPI vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
+{
+    struct vkCmdSetDepthCompareOp_params params;
+    params.commandBuffer = commandBuffer;
+    params.depthCompareOp = depthCompareOp;
+    unix_funcs->p_vk_call(unix_vkCmdSetDepthCompareOp, &params);
+}
+
 void WINAPI vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
 {
     struct vkCmdSetDepthCompareOpEXT_params params;
@@ -1174,6 +1299,14 @@ void WINAPI vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp
     unix_funcs->p_vk_call(unix_vkCmdSetDepthCompareOpEXT, &params);
 }
 
+void WINAPI vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
+{
+    struct vkCmdSetDepthTestEnable_params params;
+    params.commandBuffer = commandBuffer;
+    params.depthTestEnable = depthTestEnable;
+    unix_funcs->p_vk_call(unix_vkCmdSetDepthTestEnable, &params);
+}
+
 void WINAPI vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
 {
     struct vkCmdSetDepthTestEnableEXT_params params;
@@ -1182,6 +1315,14 @@ void WINAPI vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 d
     unix_funcs->p_vk_call(unix_vkCmdSetDepthTestEnableEXT, &params);
 }
 
+void WINAPI vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
+{
+    struct vkCmdSetDepthWriteEnable_params params;
+    params.commandBuffer = commandBuffer;
+    params.depthWriteEnable = depthWriteEnable;
+    unix_funcs->p_vk_call(unix_vkCmdSetDepthWriteEnable, &params);
+}
+
 void WINAPI vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
 {
     struct vkCmdSetDepthWriteEnableEXT_params params;
@@ -1225,6 +1366,15 @@ void WINAPI vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipeli
     unix_funcs->p_vk_call(unix_vkCmdSetEvent, &params);
 }
 
+void WINAPI vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
+{
+    struct vkCmdSetEvent2_params params;
+    params.commandBuffer = commandBuffer;
+    params.event = event;
+    params.pDependencyInfo = pDependencyInfo;
+    unix_funcs->p_vk_call(unix_vkCmdSetEvent2, &params);
+}
+
 void WINAPI vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
 {
     struct vkCmdSetEvent2KHR_params params;
@@ -1262,6 +1412,14 @@ void WINAPI vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const
     unix_funcs->p_vk_call(unix_vkCmdSetFragmentShadingRateKHR, &params);
 }
 
+void WINAPI vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
+{
+    struct vkCmdSetFrontFace_params params;
+    params.commandBuffer = commandBuffer;
+    params.frontFace = frontFace;
+    unix_funcs->p_vk_call(unix_vkCmdSetFrontFace, &params);
+}
+
 void WINAPI vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
 {
     struct vkCmdSetFrontFaceEXT_params params;
@@ -1327,6 +1485,14 @@ VkResult WINAPI vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuff
     return unix_funcs->p_vk_call(unix_vkCmdSetPerformanceStreamMarkerINTEL, &params);
 }
 
+void WINAPI vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
+{
+    struct vkCmdSetPrimitiveRestartEnable_params params;
+    params.commandBuffer = commandBuffer;
+    params.primitiveRestartEnable = primitiveRestartEnable;
+    unix_funcs->p_vk_call(unix_vkCmdSetPrimitiveRestartEnable, &params);
+}
+
 void WINAPI vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
 {
     struct vkCmdSetPrimitiveRestartEnableEXT_params params;
@@ -1335,6 +1501,14 @@ void WINAPI vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkB
     unix_funcs->p_vk_call(unix_vkCmdSetPrimitiveRestartEnableEXT, &params);
 }
 
+void WINAPI vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
+{
+    struct vkCmdSetPrimitiveTopology_params params;
+    params.commandBuffer = commandBuffer;
+    params.primitiveTopology = primitiveTopology;
+    unix_funcs->p_vk_call(unix_vkCmdSetPrimitiveTopology, &params);
+}
+
 void WINAPI vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
 {
     struct vkCmdSetPrimitiveTopologyEXT_params params;
@@ -1343,6 +1517,14 @@ void WINAPI vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimit
     unix_funcs->p_vk_call(unix_vkCmdSetPrimitiveTopologyEXT, &params);
 }
 
+void WINAPI vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
+{
+    struct vkCmdSetRasterizerDiscardEnable_params params;
+    params.commandBuffer = commandBuffer;
+    params.rasterizerDiscardEnable = rasterizerDiscardEnable;
+    unix_funcs->p_vk_call(unix_vkCmdSetRasterizerDiscardEnable, &params);
+}
+
 void WINAPI vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
 {
     struct vkCmdSetRasterizerDiscardEnableEXT_params params;
@@ -1377,6 +1559,15 @@ void WINAPI vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor
     unix_funcs->p_vk_call(unix_vkCmdSetScissor, &params);
 }
 
+void WINAPI vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
+{
+    struct vkCmdSetScissorWithCount_params params;
+    params.commandBuffer = commandBuffer;
+    params.scissorCount = scissorCount;
+    params.pScissors = pScissors;
+    unix_funcs->p_vk_call(unix_vkCmdSetScissorWithCount, &params);
+}
+
 void WINAPI vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
 {
     struct vkCmdSetScissorWithCountEXT_params params;
@@ -1395,6 +1586,18 @@ void WINAPI vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilF
     unix_funcs->p_vk_call(unix_vkCmdSetStencilCompareMask, &params);
 }
 
+void WINAPI vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
+{
+    struct vkCmdSetStencilOp_params params;
+    params.commandBuffer = commandBuffer;
+    params.faceMask = faceMask;
+    params.failOp = failOp;
+    params.passOp = passOp;
+    params.depthFailOp = depthFailOp;
+    params.compareOp = compareOp;
+    unix_funcs->p_vk_call(unix_vkCmdSetStencilOp, &params);
+}
+
 void WINAPI vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
 {
     struct vkCmdSetStencilOpEXT_params params;
@@ -1416,6 +1619,14 @@ void WINAPI vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFac
     unix_funcs->p_vk_call(unix_vkCmdSetStencilReference, &params);
 }
 
+void WINAPI vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
+{
+    struct vkCmdSetStencilTestEnable_params params;
+    params.commandBuffer = commandBuffer;
+    params.stencilTestEnable = stencilTestEnable;
+    unix_funcs->p_vk_call(unix_vkCmdSetStencilTestEnable, &params);
+}
+
 void WINAPI vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
 {
     struct vkCmdSetStencilTestEnableEXT_params params;
@@ -1474,6 +1685,15 @@ void WINAPI vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t f
     unix_funcs->p_vk_call(unix_vkCmdSetViewportWScalingNV, &params);
 }
 
+void WINAPI vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
+{
+    struct vkCmdSetViewportWithCount_params params;
+    params.commandBuffer = commandBuffer;
+    params.viewportCount = viewportCount;
+    params.pViewports = pViewports;
+    unix_funcs->p_vk_call(unix_vkCmdSetViewportWithCount, &params);
+}
+
 void WINAPI vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
 {
     struct vkCmdSetViewportWithCountEXT_params params;
@@ -1565,6 +1785,16 @@ void WINAPI vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount,
     unix_funcs->p_vk_call(unix_vkCmdWaitEvents, &params);
 }
 
+void WINAPI vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
+{
+    struct vkCmdWaitEvents2_params params;
+    params.commandBuffer = commandBuffer;
+    params.eventCount = eventCount;
+    params.pEvents = pEvents;
+    params.pDependencyInfos = pDependencyInfos;
+    unix_funcs->p_vk_call(unix_vkCmdWaitEvents2, &params);
+}
+
 void WINAPI vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
 {
     struct vkCmdWaitEvents2KHR_params params;
@@ -1631,6 +1861,16 @@ void WINAPI vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFl
     unix_funcs->p_vk_call(unix_vkCmdWriteTimestamp, &params);
 }
 
+void WINAPI vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
+{
+    struct vkCmdWriteTimestamp2_params params;
+    params.commandBuffer = commandBuffer;
+    params.stage = stage;
+    params.queryPool = queryPool;
+    params.query = query;
+    unix_funcs->p_vk_call(unix_vkCmdWriteTimestamp2, &params);
+}
+
 void WINAPI vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
 {
     struct vkCmdWriteTimestamp2KHR_params params;
@@ -1930,6 +2170,16 @@ VkResult WINAPI vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCr
     return vk_unix_call(unix_vkCreatePipelineLayout, &params);
 }
 
+VkResult WINAPI vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot)
+{
+    struct vkCreatePrivateDataSlot_params params;
+    params.device = device;
+    params.pCreateInfo = pCreateInfo;
+    params.pAllocator = pAllocator;
+    params.pPrivateDataSlot = pPrivateDataSlot;
+    return vk_unix_call(unix_vkCreatePrivateDataSlot, &params);
+}
+
 VkResult WINAPI vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot)
 {
     struct vkCreatePrivateDataSlotEXT_params params;
@@ -2346,6 +2596,15 @@ void WINAPI vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLa
     vk_unix_call(unix_vkDestroyPipelineLayout, &params);
 }
 
+void WINAPI vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator)
+{
+    struct vkDestroyPrivateDataSlot_params params;
+    params.device = device;
+    params.privateDataSlot = privateDataSlot;
+    params.pAllocator = pAllocator;
+    vk_unix_call(unix_vkDestroyPrivateDataSlot, &params);
+}
+
 void WINAPI vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator)
 {
     struct vkDestroyPrivateDataSlotEXT_params params;
@@ -2719,6 +2978,15 @@ void WINAPI vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, co
     vk_unix_call(unix_vkGetDeviceAccelerationStructureCompatibilityKHR, &params);
 }
 
+void WINAPI vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
+{
+    struct vkGetDeviceBufferMemoryRequirements_params params;
+    params.device = device;
+    params.pInfo = pInfo;
+    params.pMemoryRequirements = pMemoryRequirements;
+    vk_unix_call(unix_vkGetDeviceBufferMemoryRequirements, &params);
+}
+
 void WINAPI vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
 {
     struct vkGetDeviceBufferMemoryRequirementsKHR_params params;
@@ -2767,6 +3035,15 @@ VkResult WINAPI vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfac
     return unix_funcs->p_vk_call(unix_vkGetDeviceGroupSurfacePresentModesKHR, &params);
 }
 
+void WINAPI vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
+{
+    struct vkGetDeviceImageMemoryRequirements_params params;
+    params.device = device;
+    params.pInfo = pInfo;
+    params.pMemoryRequirements = pMemoryRequirements;
+    vk_unix_call(unix_vkGetDeviceImageMemoryRequirements, &params);
+}
+
 void WINAPI vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
 {
     struct vkGetDeviceImageMemoryRequirementsKHR_params params;
@@ -2776,6 +3053,16 @@ void WINAPI vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDevic
     vk_unix_call(unix_vkGetDeviceImageMemoryRequirementsKHR, &params);
 }
 
+void WINAPI vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
+{
+    struct vkGetDeviceImageSparseMemoryRequirements_params params;
+    params.device = device;
+    params.pInfo = pInfo;
+    params.pSparseMemoryRequirementCount = pSparseMemoryRequirementCount;
+    params.pSparseMemoryRequirements = pSparseMemoryRequirements;
+    vk_unix_call(unix_vkGetDeviceImageSparseMemoryRequirements, &params);
+}
+
 void WINAPI vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
 {
     struct vkGetDeviceImageSparseMemoryRequirementsKHR_params params;
@@ -3320,6 +3607,15 @@ VkResult WINAPI vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDe
     return unix_funcs->p_vk_call(unix_vkGetPhysicalDeviceSurfaceSupportKHR, &params);
 }
 
+VkResult WINAPI vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties)
+{
+    struct vkGetPhysicalDeviceToolProperties_params params;
+    params.physicalDevice = physicalDevice;
+    params.pToolCount = pToolCount;
+    params.pToolProperties = pToolProperties;
+    return vk_unix_call(unix_vkGetPhysicalDeviceToolProperties, &params);
+}
+
 VkResult WINAPI vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties)
 {
     struct vkGetPhysicalDeviceToolPropertiesEXT_params params;
@@ -3377,6 +3673,17 @@ VkResult WINAPI vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPi
     return vk_unix_call(unix_vkGetPipelineExecutableStatisticsKHR, &params);
 }
 
+void WINAPI vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData)
+{
+    struct vkGetPrivateData_params params;
+    params.device = device;
+    params.objectType = objectType;
+    params.objectHandle = objectHandle;
+    params.privateDataSlot = privateDataSlot;
+    params.pData = pData;
+    vk_unix_call(unix_vkGetPrivateData, &params);
+}
+
 void WINAPI vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData)
 {
     struct vkGetPrivateDataEXT_params params;
@@ -3633,6 +3940,16 @@ VkResult WINAPI vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmi
     return vk_unix_call(unix_vkQueueSubmit, &params);
 }
 
+VkResult WINAPI vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence)
+{
+    struct vkQueueSubmit2_params params;
+    params.queue = queue;
+    params.submitCount = submitCount;
+    params.pSubmits = pSubmits;
+    params.fence = fence;
+    return vk_unix_call(unix_vkQueueSubmit2, &params);
+}
+
 VkResult WINAPI vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence)
 {
     struct vkQueueSubmit2KHR_params params;
@@ -3761,6 +4078,17 @@ VkResult WINAPI vkSetEvent(VkDevice device, VkEvent event)
     return vk_unix_call(unix_vkSetEvent, &params);
 }
 
+VkResult WINAPI vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
+{
+    struct vkSetPrivateData_params params;
+    params.device = device;
+    params.objectType = objectType;
+    params.objectHandle = objectHandle;
+    params.privateDataSlot = privateDataSlot;
+    params.data = data;
+    return vk_unix_call(unix_vkSetPrivateData, &params);
+}
+
 VkResult WINAPI vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
 {
     struct vkSetPrivateDataEXT_params params;
@@ -3939,6 +4267,7 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkCmdBeginRenderPass", vkCmdBeginRenderPass},
     {"vkCmdBeginRenderPass2", vkCmdBeginRenderPass2},
     {"vkCmdBeginRenderPass2KHR", vkCmdBeginRenderPass2KHR},
+    {"vkCmdBeginRendering", vkCmdBeginRendering},
     {"vkCmdBeginRenderingKHR", vkCmdBeginRenderingKHR},
     {"vkCmdBeginTransformFeedbackEXT", vkCmdBeginTransformFeedbackEXT},
     {"vkCmdBindDescriptorSets", vkCmdBindDescriptorSets},
@@ -3949,8 +4278,10 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkCmdBindShadingRateImageNV", vkCmdBindShadingRateImageNV},
     {"vkCmdBindTransformFeedbackBuffersEXT", vkCmdBindTransformFeedbackBuffersEXT},
     {"vkCmdBindVertexBuffers", vkCmdBindVertexBuffers},
+    {"vkCmdBindVertexBuffers2", vkCmdBindVertexBuffers2},
     {"vkCmdBindVertexBuffers2EXT", vkCmdBindVertexBuffers2EXT},
     {"vkCmdBlitImage", vkCmdBlitImage},
+    {"vkCmdBlitImage2", vkCmdBlitImage2},
     {"vkCmdBlitImage2KHR", vkCmdBlitImage2KHR},
     {"vkCmdBuildAccelerationStructureNV", vkCmdBuildAccelerationStructureNV},
     {"vkCmdBuildAccelerationStructuresIndirectKHR", vkCmdBuildAccelerationStructuresIndirectKHR},
@@ -3962,12 +4293,16 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkCmdCopyAccelerationStructureNV", vkCmdCopyAccelerationStructureNV},
     {"vkCmdCopyAccelerationStructureToMemoryKHR", vkCmdCopyAccelerationStructureToMemoryKHR},
     {"vkCmdCopyBuffer", vkCmdCopyBuffer},
+    {"vkCmdCopyBuffer2", vkCmdCopyBuffer2},
     {"vkCmdCopyBuffer2KHR", vkCmdCopyBuffer2KHR},
     {"vkCmdCopyBufferToImage", vkCmdCopyBufferToImage},
+    {"vkCmdCopyBufferToImage2", vkCmdCopyBufferToImage2},
     {"vkCmdCopyBufferToImage2KHR", vkCmdCopyBufferToImage2KHR},
     {"vkCmdCopyImage", vkCmdCopyImage},
+    {"vkCmdCopyImage2", vkCmdCopyImage2},
     {"vkCmdCopyImage2KHR", vkCmdCopyImage2KHR},
     {"vkCmdCopyImageToBuffer", vkCmdCopyImageToBuffer},
+    {"vkCmdCopyImageToBuffer2", vkCmdCopyImageToBuffer2},
     {"vkCmdCopyImageToBuffer2KHR", vkCmdCopyImageToBuffer2KHR},
     {"vkCmdCopyMemoryToAccelerationStructureKHR", vkCmdCopyMemoryToAccelerationStructureKHR},
     {"vkCmdCopyQueryPoolResults", vkCmdCopyQueryPoolResults},
@@ -4002,6 +4337,7 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkCmdEndRenderPass", vkCmdEndRenderPass},
     {"vkCmdEndRenderPass2", vkCmdEndRenderPass2},
     {"vkCmdEndRenderPass2KHR", vkCmdEndRenderPass2KHR},
+    {"vkCmdEndRendering", vkCmdEndRendering},
     {"vkCmdEndRenderingKHR", vkCmdEndRenderingKHR},
     {"vkCmdEndTransformFeedbackEXT", vkCmdEndTransformFeedbackEXT},
     {"vkCmdExecuteCommands", vkCmdExecuteCommands},
@@ -4012,36 +4348,47 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkCmdNextSubpass2", vkCmdNextSubpass2},
     {"vkCmdNextSubpass2KHR", vkCmdNextSubpass2KHR},
     {"vkCmdPipelineBarrier", vkCmdPipelineBarrier},
+    {"vkCmdPipelineBarrier2", vkCmdPipelineBarrier2},
     {"vkCmdPipelineBarrier2KHR", vkCmdPipelineBarrier2KHR},
     {"vkCmdPreprocessGeneratedCommandsNV", vkCmdPreprocessGeneratedCommandsNV},
     {"vkCmdPushConstants", vkCmdPushConstants},
     {"vkCmdPushDescriptorSetKHR", vkCmdPushDescriptorSetKHR},
     {"vkCmdPushDescriptorSetWithTemplateKHR", vkCmdPushDescriptorSetWithTemplateKHR},
     {"vkCmdResetEvent", vkCmdResetEvent},
+    {"vkCmdResetEvent2", vkCmdResetEvent2},
     {"vkCmdResetEvent2KHR", vkCmdResetEvent2KHR},
     {"vkCmdResetQueryPool", vkCmdResetQueryPool},
     {"vkCmdResolveImage", vkCmdResolveImage},
+    {"vkCmdResolveImage2", vkCmdResolveImage2},
     {"vkCmdResolveImage2KHR", vkCmdResolveImage2KHR},
     {"vkCmdSetBlendConstants", vkCmdSetBlendConstants},
     {"vkCmdSetCheckpointNV", vkCmdSetCheckpointNV},
     {"vkCmdSetCoarseSampleOrderNV", vkCmdSetCoarseSampleOrderNV},
     {"vkCmdSetColorWriteEnableEXT", vkCmdSetColorWriteEnableEXT},
+    {"vkCmdSetCullMode", vkCmdSetCullMode},
     {"vkCmdSetCullModeEXT", vkCmdSetCullModeEXT},
     {"vkCmdSetDepthBias", vkCmdSetDepthBias},
+    {"vkCmdSetDepthBiasEnable", vkCmdSetDepthBiasEnable},
     {"vkCmdSetDepthBiasEnableEXT", vkCmdSetDepthBiasEnableEXT},
     {"vkCmdSetDepthBounds", vkCmdSetDepthBounds},
+    {"vkCmdSetDepthBoundsTestEnable", vkCmdSetDepthBoundsTestEnable},
     {"vkCmdSetDepthBoundsTestEnableEXT", vkCmdSetDepthBoundsTestEnableEXT},
+    {"vkCmdSetDepthCompareOp", vkCmdSetDepthCompareOp},
     {"vkCmdSetDepthCompareOpEXT", vkCmdSetDepthCompareOpEXT},
+    {"vkCmdSetDepthTestEnable", vkCmdSetDepthTestEnable},
     {"vkCmdSetDepthTestEnableEXT", vkCmdSetDepthTestEnableEXT},
+    {"vkCmdSetDepthWriteEnable", vkCmdSetDepthWriteEnable},
     {"vkCmdSetDepthWriteEnableEXT", vkCmdSetDepthWriteEnableEXT},
     {"vkCmdSetDeviceMask", vkCmdSetDeviceMask},
     {"vkCmdSetDeviceMaskKHR", vkCmdSetDeviceMaskKHR},
     {"vkCmdSetDiscardRectangleEXT", vkCmdSetDiscardRectangleEXT},
     {"vkCmdSetEvent", vkCmdSetEvent},
+    {"vkCmdSetEvent2", vkCmdSetEvent2},
     {"vkCmdSetEvent2KHR", vkCmdSetEvent2KHR},
     {"vkCmdSetExclusiveScissorNV", vkCmdSetExclusiveScissorNV},
     {"vkCmdSetFragmentShadingRateEnumNV", vkCmdSetFragmentShadingRateEnumNV},
     {"vkCmdSetFragmentShadingRateKHR", vkCmdSetFragmentShadingRateKHR},
+    {"vkCmdSetFrontFace", vkCmdSetFrontFace},
     {"vkCmdSetFrontFaceEXT", vkCmdSetFrontFaceEXT},
     {"vkCmdSetLineStippleEXT", vkCmdSetLineStippleEXT},
     {"vkCmdSetLineWidth", vkCmdSetLineWidth},
@@ -4050,22 +4397,29 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkCmdSetPerformanceMarkerINTEL", vkCmdSetPerformanceMarkerINTEL},
     {"vkCmdSetPerformanceOverrideINTEL", vkCmdSetPerformanceOverrideINTEL},
     {"vkCmdSetPerformanceStreamMarkerINTEL", vkCmdSetPerformanceStreamMarkerINTEL},
+    {"vkCmdSetPrimitiveRestartEnable", vkCmdSetPrimitiveRestartEnable},
     {"vkCmdSetPrimitiveRestartEnableEXT", vkCmdSetPrimitiveRestartEnableEXT},
+    {"vkCmdSetPrimitiveTopology", vkCmdSetPrimitiveTopology},
     {"vkCmdSetPrimitiveTopologyEXT", vkCmdSetPrimitiveTopologyEXT},
+    {"vkCmdSetRasterizerDiscardEnable", vkCmdSetRasterizerDiscardEnable},
     {"vkCmdSetRasterizerDiscardEnableEXT", vkCmdSetRasterizerDiscardEnableEXT},
     {"vkCmdSetRayTracingPipelineStackSizeKHR", vkCmdSetRayTracingPipelineStackSizeKHR},
     {"vkCmdSetSampleLocationsEXT", vkCmdSetSampleLocationsEXT},
     {"vkCmdSetScissor", vkCmdSetScissor},
+    {"vkCmdSetScissorWithCount", vkCmdSetScissorWithCount},
     {"vkCmdSetScissorWithCountEXT", vkCmdSetScissorWithCountEXT},
     {"vkCmdSetStencilCompareMask", vkCmdSetStencilCompareMask},
+    {"vkCmdSetStencilOp", vkCmdSetStencilOp},
     {"vkCmdSetStencilOpEXT", vkCmdSetStencilOpEXT},
     {"vkCmdSetStencilReference", vkCmdSetStencilReference},
+    {"vkCmdSetStencilTestEnable", vkCmdSetStencilTestEnable},
     {"vkCmdSetStencilTestEnableEXT", vkCmdSetStencilTestEnableEXT},
     {"vkCmdSetStencilWriteMask", vkCmdSetStencilWriteMask},
     {"vkCmdSetVertexInputEXT", vkCmdSetVertexInputEXT},
     {"vkCmdSetViewport", vkCmdSetViewport},
     {"vkCmdSetViewportShadingRatePaletteNV", vkCmdSetViewportShadingRatePaletteNV},
     {"vkCmdSetViewportWScalingNV", vkCmdSetViewportWScalingNV},
+    {"vkCmdSetViewportWithCount", vkCmdSetViewportWithCount},
     {"vkCmdSetViewportWithCountEXT", vkCmdSetViewportWithCountEXT},
     {"vkCmdSubpassShadingHUAWEI", vkCmdSubpassShadingHUAWEI},
     {"vkCmdTraceRaysIndirectKHR", vkCmdTraceRaysIndirectKHR},
@@ -4073,12 +4427,14 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkCmdTraceRaysNV", vkCmdTraceRaysNV},
     {"vkCmdUpdateBuffer", vkCmdUpdateBuffer},
     {"vkCmdWaitEvents", vkCmdWaitEvents},
+    {"vkCmdWaitEvents2", vkCmdWaitEvents2},
     {"vkCmdWaitEvents2KHR", vkCmdWaitEvents2KHR},
     {"vkCmdWriteAccelerationStructuresPropertiesKHR", vkCmdWriteAccelerationStructuresPropertiesKHR},
     {"vkCmdWriteAccelerationStructuresPropertiesNV", vkCmdWriteAccelerationStructuresPropertiesNV},
     {"vkCmdWriteBufferMarker2AMD", vkCmdWriteBufferMarker2AMD},
     {"vkCmdWriteBufferMarkerAMD", vkCmdWriteBufferMarkerAMD},
     {"vkCmdWriteTimestamp", vkCmdWriteTimestamp},
+    {"vkCmdWriteTimestamp2", vkCmdWriteTimestamp2},
     {"vkCmdWriteTimestamp2KHR", vkCmdWriteTimestamp2KHR},
     {"vkCompileDeferredNV", vkCompileDeferredNV},
     {"vkCopyAccelerationStructureKHR", vkCopyAccelerationStructureKHR},
@@ -4106,6 +4462,7 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkCreateIndirectCommandsLayoutNV", vkCreateIndirectCommandsLayoutNV},
     {"vkCreatePipelineCache", vkCreatePipelineCache},
     {"vkCreatePipelineLayout", vkCreatePipelineLayout},
+    {"vkCreatePrivateDataSlot", vkCreatePrivateDataSlot},
     {"vkCreatePrivateDataSlotEXT", vkCreatePrivateDataSlotEXT},
     {"vkCreateQueryPool", vkCreateQueryPool},
     {"vkCreateRayTracingPipelinesKHR", vkCreateRayTracingPipelinesKHR},
@@ -4145,6 +4502,7 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkDestroyPipeline", vkDestroyPipeline},
     {"vkDestroyPipelineCache", vkDestroyPipelineCache},
     {"vkDestroyPipelineLayout", vkDestroyPipelineLayout},
+    {"vkDestroyPrivateDataSlot", vkDestroyPrivateDataSlot},
     {"vkDestroyPrivateDataSlotEXT", vkDestroyPrivateDataSlotEXT},
     {"vkDestroyQueryPool", vkDestroyQueryPool},
     {"vkDestroyRenderPass", vkDestroyRenderPass},
@@ -4179,12 +4537,15 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkGetDescriptorSetLayoutSupport", vkGetDescriptorSetLayoutSupport},
     {"vkGetDescriptorSetLayoutSupportKHR", vkGetDescriptorSetLayoutSupportKHR},
     {"vkGetDeviceAccelerationStructureCompatibilityKHR", vkGetDeviceAccelerationStructureCompatibilityKHR},
+    {"vkGetDeviceBufferMemoryRequirements", vkGetDeviceBufferMemoryRequirements},
     {"vkGetDeviceBufferMemoryRequirementsKHR", vkGetDeviceBufferMemoryRequirementsKHR},
     {"vkGetDeviceGroupPeerMemoryFeatures", vkGetDeviceGroupPeerMemoryFeatures},
     {"vkGetDeviceGroupPeerMemoryFeaturesKHR", vkGetDeviceGroupPeerMemoryFeaturesKHR},
     {"vkGetDeviceGroupPresentCapabilitiesKHR", vkGetDeviceGroupPresentCapabilitiesKHR},
     {"vkGetDeviceGroupSurfacePresentModesKHR", vkGetDeviceGroupSurfacePresentModesKHR},
+    {"vkGetDeviceImageMemoryRequirements", vkGetDeviceImageMemoryRequirements},
     {"vkGetDeviceImageMemoryRequirementsKHR", vkGetDeviceImageMemoryRequirementsKHR},
+    {"vkGetDeviceImageSparseMemoryRequirements", vkGetDeviceImageSparseMemoryRequirements},
     {"vkGetDeviceImageSparseMemoryRequirementsKHR", vkGetDeviceImageSparseMemoryRequirementsKHR},
     {"vkGetDeviceMemoryCommitment", vkGetDeviceMemoryCommitment},
     {"vkGetDeviceMemoryOpaqueCaptureAddress", vkGetDeviceMemoryOpaqueCaptureAddress},
@@ -4211,6 +4572,7 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkGetPipelineExecutableInternalRepresentationsKHR", vkGetPipelineExecutableInternalRepresentationsKHR},
     {"vkGetPipelineExecutablePropertiesKHR", vkGetPipelineExecutablePropertiesKHR},
     {"vkGetPipelineExecutableStatisticsKHR", vkGetPipelineExecutableStatisticsKHR},
+    {"vkGetPrivateData", vkGetPrivateData},
     {"vkGetPrivateDataEXT", vkGetPrivateDataEXT},
     {"vkGetQueryPoolResults", vkGetQueryPoolResults},
     {"vkGetQueueCheckpointData2NV", vkGetQueueCheckpointData2NV},
@@ -4237,6 +4599,7 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkQueuePresentKHR", vkQueuePresentKHR},
     {"vkQueueSetPerformanceConfigurationINTEL", vkQueueSetPerformanceConfigurationINTEL},
     {"vkQueueSubmit", vkQueueSubmit},
+    {"vkQueueSubmit2", vkQueueSubmit2},
     {"vkQueueSubmit2KHR", vkQueueSubmit2KHR},
     {"vkQueueWaitIdle", vkQueueWaitIdle},
     {"vkReleasePerformanceConfigurationINTEL", vkReleasePerformanceConfigurationINTEL},
@@ -4252,6 +4615,7 @@ static const struct vulkan_func vk_device_dispatch_table[] =
     {"vkSetDebugUtilsObjectTagEXT", vkSetDebugUtilsObjectTagEXT},
     {"vkSetDeviceMemoryPriorityEXT", vkSetDeviceMemoryPriorityEXT},
     {"vkSetEvent", vkSetEvent},
+    {"vkSetPrivateData", vkSetPrivateData},
     {"vkSetPrivateDataEXT", vkSetPrivateDataEXT},
     {"vkSignalSemaphore", vkSignalSemaphore},
     {"vkSignalSemaphoreKHR", vkSignalSemaphoreKHR},
@@ -4315,6 +4679,7 @@ static const struct vulkan_func vk_phys_dev_dispatch_table[] =
     {"vkGetPhysicalDeviceSurfaceFormatsKHR", vkGetPhysicalDeviceSurfaceFormatsKHR},
     {"vkGetPhysicalDeviceSurfacePresentModesKHR", vkGetPhysicalDeviceSurfacePresentModesKHR},
     {"vkGetPhysicalDeviceSurfaceSupportKHR", vkGetPhysicalDeviceSurfaceSupportKHR},
+    {"vkGetPhysicalDeviceToolProperties", vkGetPhysicalDeviceToolProperties},
     {"vkGetPhysicalDeviceToolPropertiesEXT", vkGetPhysicalDeviceToolPropertiesEXT},
     {"vkGetPhysicalDeviceWin32PresentationSupportKHR", vkGetPhysicalDeviceWin32PresentationSupportKHR},
 };
diff --git a/dlls/winevulkan/loader_thunks.h b/dlls/winevulkan/loader_thunks.h
index 21464af3c0c..19af9d90e3a 100644
--- a/dlls/winevulkan/loader_thunks.h
+++ b/dlls/winevulkan/loader_thunks.h
@@ -38,6 +38,7 @@ enum unix_call
     unix_vkCmdBeginRenderPass,
     unix_vkCmdBeginRenderPass2,
     unix_vkCmdBeginRenderPass2KHR,
+    unix_vkCmdBeginRendering,
     unix_vkCmdBeginRenderingKHR,
     unix_vkCmdBeginTransformFeedbackEXT,
     unix_vkCmdBindDescriptorSets,
@@ -48,8 +49,10 @@ enum unix_call
     unix_vkCmdBindShadingRateImageNV,
     unix_vkCmdBindTransformFeedbackBuffersEXT,
     unix_vkCmdBindVertexBuffers,
+    unix_vkCmdBindVertexBuffers2,
     unix_vkCmdBindVertexBuffers2EXT,
     unix_vkCmdBlitImage,
+    unix_vkCmdBlitImage2,
     unix_vkCmdBlitImage2KHR,
     unix_vkCmdBuildAccelerationStructureNV,
     unix_vkCmdBuildAccelerationStructuresIndirectKHR,
@@ -61,12 +64,16 @@ enum unix_call
     unix_vkCmdCopyAccelerationStructureNV,
     unix_vkCmdCopyAccelerationStructureToMemoryKHR,
     unix_vkCmdCopyBuffer,
+    unix_vkCmdCopyBuffer2,
     unix_vkCmdCopyBuffer2KHR,
     unix_vkCmdCopyBufferToImage,
+    unix_vkCmdCopyBufferToImage2,
     unix_vkCmdCopyBufferToImage2KHR,
     unix_vkCmdCopyImage,
+    unix_vkCmdCopyImage2,
     unix_vkCmdCopyImage2KHR,
     unix_vkCmdCopyImageToBuffer,
+    unix_vkCmdCopyImageToBuffer2,
     unix_vkCmdCopyImageToBuffer2KHR,
     unix_vkCmdCopyMemoryToAccelerationStructureKHR,
     unix_vkCmdCopyQueryPoolResults,
@@ -101,6 +108,7 @@ enum unix_call
     unix_vkCmdEndRenderPass,
     unix_vkCmdEndRenderPass2,
     unix_vkCmdEndRenderPass2KHR,
+    unix_vkCmdEndRendering,
     unix_vkCmdEndRenderingKHR,
     unix_vkCmdEndTransformFeedbackEXT,
     unix_vkCmdExecuteCommands,
@@ -111,36 +119,47 @@ enum unix_call
     unix_vkCmdNextSubpass2,
     unix_vkCmdNextSubpass2KHR,
     unix_vkCmdPipelineBarrier,
+    unix_vkCmdPipelineBarrier2,
     unix_vkCmdPipelineBarrier2KHR,
     unix_vkCmdPreprocessGeneratedCommandsNV,
     unix_vkCmdPushConstants,
     unix_vkCmdPushDescriptorSetKHR,
     unix_vkCmdPushDescriptorSetWithTemplateKHR,
     unix_vkCmdResetEvent,
+    unix_vkCmdResetEvent2,
     unix_vkCmdResetEvent2KHR,
     unix_vkCmdResetQueryPool,
     unix_vkCmdResolveImage,
+    unix_vkCmdResolveImage2,
     unix_vkCmdResolveImage2KHR,
     unix_vkCmdSetBlendConstants,
     unix_vkCmdSetCheckpointNV,
     unix_vkCmdSetCoarseSampleOrderNV,
     unix_vkCmdSetColorWriteEnableEXT,
+    unix_vkCmdSetCullMode,
     unix_vkCmdSetCullModeEXT,
     unix_vkCmdSetDepthBias,
+    unix_vkCmdSetDepthBiasEnable,
     unix_vkCmdSetDepthBiasEnableEXT,
     unix_vkCmdSetDepthBounds,
+    unix_vkCmdSetDepthBoundsTestEnable,
     unix_vkCmdSetDepthBoundsTestEnableEXT,
+    unix_vkCmdSetDepthCompareOp,
     unix_vkCmdSetDepthCompareOpEXT,
+    unix_vkCmdSetDepthTestEnable,
     unix_vkCmdSetDepthTestEnableEXT,
+    unix_vkCmdSetDepthWriteEnable,
     unix_vkCmdSetDepthWriteEnableEXT,
     unix_vkCmdSetDeviceMask,
     unix_vkCmdSetDeviceMaskKHR,
     unix_vkCmdSetDiscardRectangleEXT,
     unix_vkCmdSetEvent,
+    unix_vkCmdSetEvent2,
     unix_vkCmdSetEvent2KHR,
     unix_vkCmdSetExclusiveScissorNV,
     unix_vkCmdSetFragmentShadingRateEnumNV,
     unix_vkCmdSetFragmentShadingRateKHR,
+    unix_vkCmdSetFrontFace,
     unix_vkCmdSetFrontFaceEXT,
     unix_vkCmdSetLineStippleEXT,
     unix_vkCmdSetLineWidth,
@@ -149,22 +168,29 @@ enum unix_call
     unix_vkCmdSetPerformanceMarkerINTEL,
     unix_vkCmdSetPerformanceOverrideINTEL,
     unix_vkCmdSetPerformanceStreamMarkerINTEL,
+    unix_vkCmdSetPrimitiveRestartEnable,
     unix_vkCmdSetPrimitiveRestartEnableEXT,
+    unix_vkCmdSetPrimitiveTopology,
     unix_vkCmdSetPrimitiveTopologyEXT,
+    unix_vkCmdSetRasterizerDiscardEnable,
     unix_vkCmdSetRasterizerDiscardEnableEXT,
     unix_vkCmdSetRayTracingPipelineStackSizeKHR,
     unix_vkCmdSetSampleLocationsEXT,
     unix_vkCmdSetScissor,
+    unix_vkCmdSetScissorWithCount,
     unix_vkCmdSetScissorWithCountEXT,
     unix_vkCmdSetStencilCompareMask,
+    unix_vkCmdSetStencilOp,
     unix_vkCmdSetStencilOpEXT,
     unix_vkCmdSetStencilReference,
+    unix_vkCmdSetStencilTestEnable,
     unix_vkCmdSetStencilTestEnableEXT,
     unix_vkCmdSetStencilWriteMask,
     unix_vkCmdSetVertexInputEXT,
     unix_vkCmdSetViewport,
     unix_vkCmdSetViewportShadingRatePaletteNV,
     unix_vkCmdSetViewportWScalingNV,
+    unix_vkCmdSetViewportWithCount,
     unix_vkCmdSetViewportWithCountEXT,
     unix_vkCmdSubpassShadingHUAWEI,
     unix_vkCmdTraceRaysIndirectKHR,
@@ -172,12 +198,14 @@ enum unix_call
     unix_vkCmdTraceRaysNV,
     unix_vkCmdUpdateBuffer,
     unix_vkCmdWaitEvents,
+    unix_vkCmdWaitEvents2,
     unix_vkCmdWaitEvents2KHR,
     unix_vkCmdWriteAccelerationStructuresPropertiesKHR,
     unix_vkCmdWriteAccelerationStructuresPropertiesNV,
     unix_vkCmdWriteBufferMarker2AMD,
     unix_vkCmdWriteBufferMarkerAMD,
     unix_vkCmdWriteTimestamp,
+    unix_vkCmdWriteTimestamp2,
     unix_vkCmdWriteTimestamp2KHR,
     unix_vkCompileDeferredNV,
     unix_vkCopyAccelerationStructureKHR,
@@ -209,6 +237,7 @@ enum unix_call
     unix_vkCreateInstance,
     unix_vkCreatePipelineCache,
     unix_vkCreatePipelineLayout,
+    unix_vkCreatePrivateDataSlot,
     unix_vkCreatePrivateDataSlotEXT,
     unix_vkCreateQueryPool,
     unix_vkCreateRayTracingPipelinesKHR,
@@ -253,6 +282,7 @@ enum unix_call
     unix_vkDestroyPipeline,
     unix_vkDestroyPipelineCache,
     unix_vkDestroyPipelineLayout,
+    unix_vkDestroyPrivateDataSlot,
     unix_vkDestroyPrivateDataSlotEXT,
     unix_vkDestroyQueryPool,
     unix_vkDestroyRenderPass,
@@ -296,12 +326,15 @@ enum unix_call
     unix_vkGetDescriptorSetLayoutSupport,
     unix_vkGetDescriptorSetLayoutSupportKHR,
     unix_vkGetDeviceAccelerationStructureCompatibilityKHR,
+    unix_vkGetDeviceBufferMemoryRequirements,
     unix_vkGetDeviceBufferMemoryRequirementsKHR,
     unix_vkGetDeviceGroupPeerMemoryFeatures,
     unix_vkGetDeviceGroupPeerMemoryFeaturesKHR,
     unix_vkGetDeviceGroupPresentCapabilitiesKHR,
     unix_vkGetDeviceGroupSurfacePresentModesKHR,
+    unix_vkGetDeviceImageMemoryRequirements,
     unix_vkGetDeviceImageMemoryRequirementsKHR,
+    unix_vkGetDeviceImageSparseMemoryRequirements,
     unix_vkGetDeviceImageSparseMemoryRequirementsKHR,
     unix_vkGetDeviceMemoryCommitment,
     unix_vkGetDeviceMemoryOpaqueCaptureAddress,
@@ -363,12 +396,14 @@ enum unix_call
     unix_vkGetPhysicalDeviceSurfaceFormatsKHR,
     unix_vkGetPhysicalDeviceSurfacePresentModesKHR,
     unix_vkGetPhysicalDeviceSurfaceSupportKHR,
+    unix_vkGetPhysicalDeviceToolProperties,
     unix_vkGetPhysicalDeviceToolPropertiesEXT,
     unix_vkGetPhysicalDeviceWin32PresentationSupportKHR,
     unix_vkGetPipelineCacheData,
     unix_vkGetPipelineExecutableInternalRepresentationsKHR,
     unix_vkGetPipelineExecutablePropertiesKHR,
     unix_vkGetPipelineExecutableStatisticsKHR,
+    unix_vkGetPrivateData,
     unix_vkGetPrivateDataEXT,
     unix_vkGetQueryPoolResults,
     unix_vkGetQueueCheckpointData2NV,
@@ -395,6 +430,7 @@ enum unix_call
     unix_vkQueuePresentKHR,
     unix_vkQueueSetPerformanceConfigurationINTEL,
     unix_vkQueueSubmit,
+    unix_vkQueueSubmit2,
     unix_vkQueueSubmit2KHR,
     unix_vkQueueWaitIdle,
     unix_vkReleasePerformanceConfigurationINTEL,
@@ -410,6 +446,7 @@ enum unix_call
     unix_vkSetDebugUtilsObjectTagEXT,
     unix_vkSetDeviceMemoryPriorityEXT,
     unix_vkSetEvent,
+    unix_vkSetPrivateData,
     unix_vkSetPrivateDataEXT,
     unix_vkSignalSemaphore,
     unix_vkSignalSemaphoreKHR,
@@ -599,6 +636,12 @@ struct vkCmdBeginRenderPass2KHR_params
     const VkSubpassBeginInfo *pSubpassBeginInfo;
 };
 
+struct vkCmdBeginRendering_params
+{
+    VkCommandBuffer commandBuffer;
+    const VkRenderingInfo *pRenderingInfo;
+};
+
 struct vkCmdBeginRenderingKHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -682,6 +725,17 @@ struct vkCmdBindVertexBuffers_params
     const VkDeviceSize *pOffsets;
 };
 
+struct vkCmdBindVertexBuffers2_params
+{
+    VkCommandBuffer commandBuffer;
+    uint32_t firstBinding;
+    uint32_t bindingCount;
+    const VkBuffer *pBuffers;
+    const VkDeviceSize *pOffsets;
+    const VkDeviceSize *pSizes;
+    const VkDeviceSize *pStrides;
+};
+
 struct vkCmdBindVertexBuffers2EXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -705,6 +759,12 @@ struct vkCmdBlitImage_params
     VkFilter filter;
 };
 
+struct vkCmdBlitImage2_params
+{
+    VkCommandBuffer commandBuffer;
+    const VkBlitImageInfo2 *pBlitImageInfo;
+};
+
 struct vkCmdBlitImage2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -800,6 +860,12 @@ struct vkCmdCopyBuffer_params
     const VkBufferCopy *pRegions;
 };
 
+struct vkCmdCopyBuffer2_params
+{
+    VkCommandBuffer commandBuffer;
+    const VkCopyBufferInfo2 *pCopyBufferInfo;
+};
+
 struct vkCmdCopyBuffer2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -816,6 +882,12 @@ struct vkCmdCopyBufferToImage_params
     const VkBufferImageCopy *pRegions;
 };
 
+struct vkCmdCopyBufferToImage2_params
+{
+    VkCommandBuffer commandBuffer;
+    const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo;
+};
+
 struct vkCmdCopyBufferToImage2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -833,6 +905,12 @@ struct vkCmdCopyImage_params
     const VkImageCopy *pRegions;
 };
 
+struct vkCmdCopyImage2_params
+{
+    VkCommandBuffer commandBuffer;
+    const VkCopyImageInfo2 *pCopyImageInfo;
+};
+
 struct vkCmdCopyImage2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -849,6 +927,12 @@ struct vkCmdCopyImageToBuffer_params
     const VkBufferImageCopy *pRegions;
 };
 
+struct vkCmdCopyImageToBuffer2_params
+{
+    VkCommandBuffer commandBuffer;
+    const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo;
+};
+
 struct vkCmdCopyImageToBuffer2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -1137,6 +1221,11 @@ struct vkCmdEndRenderPass2KHR_params
     const VkSubpassEndInfo *pSubpassEndInfo;
 };
 
+struct vkCmdEndRendering_params
+{
+    VkCommandBuffer commandBuffer;
+};
+
 struct vkCmdEndRenderingKHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -1214,6 +1303,12 @@ struct vkCmdPipelineBarrier_params
     const VkImageMemoryBarrier *pImageMemoryBarriers;
 };
 
+struct vkCmdPipelineBarrier2_params
+{
+    VkCommandBuffer commandBuffer;
+    const VkDependencyInfo *pDependencyInfo;
+};
+
 struct vkCmdPipelineBarrier2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -1262,6 +1357,13 @@ struct vkCmdResetEvent_params
     VkPipelineStageFlags stageMask;
 };
 
+struct vkCmdResetEvent2_params
+{
+    VkCommandBuffer commandBuffer;
+    VkEvent event;
+    VkPipelineStageFlags2 stageMask;
+};
+
 struct vkCmdResetEvent2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -1288,6 +1390,12 @@ struct vkCmdResolveImage_params
     const VkImageResolve *pRegions;
 };
 
+struct vkCmdResolveImage2_params
+{
+    VkCommandBuffer commandBuffer;
+    const VkResolveImageInfo2 *pResolveImageInfo;
+};
+
 struct vkCmdResolveImage2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -1321,6 +1429,12 @@ struct vkCmdSetColorWriteEnableEXT_params
     const VkBool32 *pColorWriteEnables;
 };
 
+struct vkCmdSetCullMode_params
+{
+    VkCommandBuffer commandBuffer;
+    VkCullModeFlags cullMode;
+};
+
 struct vkCmdSetCullModeEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1335,6 +1449,12 @@ struct vkCmdSetDepthBias_params
     float depthBiasSlopeFactor;
 };
 
+struct vkCmdSetDepthBiasEnable_params
+{
+    VkCommandBuffer commandBuffer;
+    VkBool32 depthBiasEnable;
+};
+
 struct vkCmdSetDepthBiasEnableEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1348,24 +1468,48 @@ struct vkCmdSetDepthBounds_params
     float maxDepthBounds;
 };
 
+struct vkCmdSetDepthBoundsTestEnable_params
+{
+    VkCommandBuffer commandBuffer;
+    VkBool32 depthBoundsTestEnable;
+};
+
 struct vkCmdSetDepthBoundsTestEnableEXT_params
 {
     VkCommandBuffer commandBuffer;
     VkBool32 depthBoundsTestEnable;
 };
 
+struct vkCmdSetDepthCompareOp_params
+{
+    VkCommandBuffer commandBuffer;
+    VkCompareOp depthCompareOp;
+};
+
 struct vkCmdSetDepthCompareOpEXT_params
 {
     VkCommandBuffer commandBuffer;
     VkCompareOp depthCompareOp;
 };
 
+struct vkCmdSetDepthTestEnable_params
+{
+    VkCommandBuffer commandBuffer;
+    VkBool32 depthTestEnable;
+};
+
 struct vkCmdSetDepthTestEnableEXT_params
 {
     VkCommandBuffer commandBuffer;
     VkBool32 depthTestEnable;
 };
 
+struct vkCmdSetDepthWriteEnable_params
+{
+    VkCommandBuffer commandBuffer;
+    VkBool32 depthWriteEnable;
+};
+
 struct vkCmdSetDepthWriteEnableEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1399,6 +1543,13 @@ struct vkCmdSetEvent_params
     VkPipelineStageFlags stageMask;
 };
 
+struct vkCmdSetEvent2_params
+{
+    VkCommandBuffer commandBuffer;
+    VkEvent event;
+    const VkDependencyInfo *pDependencyInfo;
+};
+
 struct vkCmdSetEvent2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -1428,6 +1579,12 @@ struct vkCmdSetFragmentShadingRateKHR_params
     const VkFragmentShadingRateCombinerOpKHR *combinerOps;
 };
 
+struct vkCmdSetFrontFace_params
+{
+    VkCommandBuffer commandBuffer;
+    VkFrontFace frontFace;
+};
+
 struct vkCmdSetFrontFaceEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1477,18 +1634,36 @@ struct vkCmdSetPerformanceStreamMarkerINTEL_params
     const VkPerformanceStreamMarkerInfoINTEL *pMarkerInfo;
 };
 
+struct vkCmdSetPrimitiveRestartEnable_params
+{
+    VkCommandBuffer commandBuffer;
+    VkBool32 primitiveRestartEnable;
+};
+
 struct vkCmdSetPrimitiveRestartEnableEXT_params
 {
     VkCommandBuffer commandBuffer;
     VkBool32 primitiveRestartEnable;
 };
 
+struct vkCmdSetPrimitiveTopology_params
+{
+    VkCommandBuffer commandBuffer;
+    VkPrimitiveTopology primitiveTopology;
+};
+
 struct vkCmdSetPrimitiveTopologyEXT_params
 {
     VkCommandBuffer commandBuffer;
     VkPrimitiveTopology primitiveTopology;
 };
 
+struct vkCmdSetRasterizerDiscardEnable_params
+{
+    VkCommandBuffer commandBuffer;
+    VkBool32 rasterizerDiscardEnable;
+};
+
 struct vkCmdSetRasterizerDiscardEnableEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1515,6 +1690,13 @@ struct vkCmdSetScissor_params
     const VkRect2D *pScissors;
 };
 
+struct vkCmdSetScissorWithCount_params
+{
+    VkCommandBuffer commandBuffer;
+    uint32_t scissorCount;
+    const VkRect2D *pScissors;
+};
+
 struct vkCmdSetScissorWithCountEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1529,6 +1711,16 @@ struct vkCmdSetStencilCompareMask_params
     uint32_t compareMask;
 };
 
+struct vkCmdSetStencilOp_params
+{
+    VkCommandBuffer commandBuffer;
+    VkStencilFaceFlags faceMask;
+    VkStencilOp failOp;
+    VkStencilOp passOp;
+    VkStencilOp depthFailOp;
+    VkCompareOp compareOp;
+};
+
 struct vkCmdSetStencilOpEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1546,6 +1738,12 @@ struct vkCmdSetStencilReference_params
     uint32_t reference;
 };
 
+struct vkCmdSetStencilTestEnable_params
+{
+    VkCommandBuffer commandBuffer;
+    VkBool32 stencilTestEnable;
+};
+
 struct vkCmdSetStencilTestEnableEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1592,6 +1790,13 @@ struct vkCmdSetViewportWScalingNV_params
     const VkViewportWScalingNV *pViewportWScalings;
 };
 
+struct vkCmdSetViewportWithCount_params
+{
+    VkCommandBuffer commandBuffer;
+    uint32_t viewportCount;
+    const VkViewport *pViewports;
+};
+
 struct vkCmdSetViewportWithCountEXT_params
 {
     VkCommandBuffer commandBuffer;
@@ -1669,6 +1874,14 @@ struct vkCmdWaitEvents_params
     const VkImageMemoryBarrier *pImageMemoryBarriers;
 };
 
+struct vkCmdWaitEvents2_params
+{
+    VkCommandBuffer commandBuffer;
+    uint32_t eventCount;
+    const VkEvent *pEvents;
+    const VkDependencyInfo *pDependencyInfos;
+};
+
 struct vkCmdWaitEvents2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -1723,6 +1936,14 @@ struct vkCmdWriteTimestamp_params
     uint32_t query;
 };
 
+struct vkCmdWriteTimestamp2_params
+{
+    VkCommandBuffer commandBuffer;
+    VkPipelineStageFlags2 stage;
+    VkQueryPool queryPool;
+    uint32_t query;
+};
+
 struct vkCmdWriteTimestamp2KHR_params
 {
     VkCommandBuffer commandBuffer;
@@ -1969,6 +2190,14 @@ struct vkCreatePipelineLayout_params
     VkPipelineLayout *pPipelineLayout;
 };
 
+struct vkCreatePrivateDataSlot_params
+{
+    VkDevice device;
+    const VkPrivateDataSlotCreateInfo *pCreateInfo;
+    const VkAllocationCallbacks *pAllocator;
+    VkPrivateDataSlot *pPrivateDataSlot;
+};
+
 struct vkCreatePrivateDataSlotEXT_params
 {
     VkDevice device;
@@ -2297,6 +2526,13 @@ struct vkDestroyPipelineLayout_params
     const VkAllocationCallbacks *pAllocator;
 };
 
+struct vkDestroyPrivateDataSlot_params
+{
+    VkDevice device;
+    VkPrivateDataSlot privateDataSlot;
+    const VkAllocationCallbacks *pAllocator;
+};
+
 struct vkDestroyPrivateDataSlotEXT_params
 {
     VkDevice device;
@@ -2600,6 +2836,13 @@ struct vkGetDeviceAccelerationStructureCompatibilityKHR_params
     VkAccelerationStructureCompatibilityKHR *pCompatibility;
 };
 
+struct vkGetDeviceBufferMemoryRequirements_params
+{
+    VkDevice device;
+    const VkDeviceBufferMemoryRequirements *pInfo;
+    VkMemoryRequirements2 *pMemoryRequirements;
+};
+
 struct vkGetDeviceBufferMemoryRequirementsKHR_params
 {
     VkDevice device;
@@ -2638,6 +2881,13 @@ struct vkGetDeviceGroupSurfacePresentModesKHR_params
     VkDeviceGroupPresentModeFlagsKHR *pModes;
 };
 
+struct vkGetDeviceImageMemoryRequirements_params
+{
+    VkDevice device;
+    const VkDeviceImageMemoryRequirements *pInfo;
+    VkMemoryRequirements2 *pMemoryRequirements;
+};
+
 struct vkGetDeviceImageMemoryRequirementsKHR_params
 {
     VkDevice device;
@@ -2645,6 +2895,14 @@ struct vkGetDeviceImageMemoryRequirementsKHR_params
     VkMemoryRequirements2 *pMemoryRequirements;
 };
 
+struct vkGetDeviceImageSparseMemoryRequirements_params
+{
+    VkDevice device;
+    const VkDeviceImageMemoryRequirements *pInfo;
+    uint32_t *pSparseMemoryRequirementCount;
+    VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements;
+};
+
 struct vkGetDeviceImageSparseMemoryRequirementsKHR_params
 {
     VkDevice device;
@@ -3083,6 +3341,13 @@ struct vkGetPhysicalDeviceSurfaceSupportKHR_params
     VkBool32 *pSupported;
 };
 
+struct vkGetPhysicalDeviceToolProperties_params
+{
+    VkPhysicalDevice physicalDevice;
+    uint32_t *pToolCount;
+    VkPhysicalDeviceToolProperties *pToolProperties;
+};
+
 struct vkGetPhysicalDeviceToolPropertiesEXT_params
 {
     VkPhysicalDevice physicalDevice;
@@ -3128,6 +3393,15 @@ struct vkGetPipelineExecutableStatisticsKHR_params
     VkPipelineExecutableStatisticKHR *pStatistics;
 };
 
+struct vkGetPrivateData_params
+{
+    VkDevice device;
+    VkObjectType objectType;
+    uint64_t objectHandle;
+    VkPrivateDataSlot privateDataSlot;
+    uint64_t *pData;
+};
+
 struct vkGetPrivateDataEXT_params
 {
     VkDevice device;
@@ -3332,6 +3606,14 @@ struct vkQueueSubmit_params
     VkFence fence;
 };
 
+struct vkQueueSubmit2_params
+{
+    VkQueue queue;
+    uint32_t submitCount;
+    const VkSubmitInfo2 *pSubmits;
+    VkFence fence;
+};
+
 struct vkQueueSubmit2KHR_params
 {
     VkQueue queue;
@@ -3430,6 +3712,15 @@ struct vkSetEvent_params
     VkEvent event;
 };
 
+struct vkSetPrivateData_params
+{
+    VkDevice device;
+    VkObjectType objectType;
+    uint64_t objectHandle;
+    VkPrivateDataSlot privateDataSlot;
+    uint64_t data;
+};
+
 struct vkSetPrivateDataEXT_params
 {
     VkDevice device;
diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index 33c4495d8aa..c609bbfd151 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -65,7 +65,7 @@ LOGGER = logging.Logger("vulkan")
 LOGGER.addHandler(logging.StreamHandler())
 
 VK_XML_VERSION = "1.3.204"
-WINE_VK_VERSION = (1, 2)
+WINE_VK_VERSION = (1, 3)
 
 # Filenames to create.
 WINE_VULKAN_H = "../../include/wine/vulkan.h"
diff --git a/dlls/winevulkan/vulkan_thunks.c b/dlls/winevulkan/vulkan_thunks.c
index c15a97da019..cee3e188353 100644
--- a/dlls/winevulkan/vulkan_thunks.c
+++ b/dlls/winevulkan/vulkan_thunks.c
@@ -5233,6 +5233,25 @@ static NTSTATUS wine_vkCmdBeginRenderPass2KHR(void *args)
 #endif
 }
 
+static NTSTATUS wine_vkCmdBeginRendering(void *args)
+{
+    struct vkCmdBeginRendering_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkRenderingInfo_host pRenderingInfo_host;
+    TRACE("%p, %p\n", params->commandBuffer, params->pRenderingInfo);
+
+    convert_VkRenderingInfo_win_to_host(params->pRenderingInfo, &pRenderingInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdBeginRendering(params->commandBuffer->command_buffer, &pRenderingInfo_host);
+
+    free_VkRenderingInfo(&pRenderingInfo_host);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p\n", params->commandBuffer, params->pRenderingInfo);
+    params->commandBuffer->device->funcs.p_vkCmdBeginRendering(params->commandBuffer->command_buffer, params->pRenderingInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdBeginRenderingKHR(void *args)
 {
     struct vkCmdBeginRenderingKHR_params *params = args;
@@ -5324,6 +5343,14 @@ static NTSTATUS wine_vkCmdBindVertexBuffers(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdBindVertexBuffers2(void *args)
+{
+    struct vkCmdBindVertexBuffers2_params *params = args;
+    TRACE("%p, %u, %u, %p, %p, %p, %p\n", params->commandBuffer, params->firstBinding, params->bindingCount, params->pBuffers, params->pOffsets, params->pSizes, params->pStrides);
+    params->commandBuffer->device->funcs.p_vkCmdBindVertexBuffers2(params->commandBuffer->command_buffer, params->firstBinding, params->bindingCount, params->pBuffers, params->pOffsets, params->pSizes, params->pStrides);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdBindVertexBuffers2EXT(void *args)
 {
     struct vkCmdBindVertexBuffers2EXT_params *params = args;
@@ -5340,6 +5367,24 @@ static NTSTATUS wine_vkCmdBlitImage(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdBlitImage2(void *args)
+{
+    struct vkCmdBlitImage2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkBlitImageInfo2_host pBlitImageInfo_host;
+    TRACE("%p, %p\n", params->commandBuffer, params->pBlitImageInfo);
+
+    convert_VkBlitImageInfo2_win_to_host(params->pBlitImageInfo, &pBlitImageInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdBlitImage2(params->commandBuffer->command_buffer, &pBlitImageInfo_host);
+
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p\n", params->commandBuffer, params->pBlitImageInfo);
+    params->commandBuffer->device->funcs.p_vkCmdBlitImage2(params->commandBuffer->command_buffer, params->pBlitImageInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdBlitImage2KHR(void *args)
 {
     struct vkCmdBlitImage2KHR_params *params = args;
@@ -5502,6 +5547,25 @@ static NTSTATUS wine_vkCmdCopyBuffer(void *args)
 #endif
 }
 
+static NTSTATUS wine_vkCmdCopyBuffer2(void *args)
+{
+    struct vkCmdCopyBuffer2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkCopyBufferInfo2_host pCopyBufferInfo_host;
+    TRACE("%p, %p\n", params->commandBuffer, params->pCopyBufferInfo);
+
+    convert_VkCopyBufferInfo2_win_to_host(params->pCopyBufferInfo, &pCopyBufferInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdCopyBuffer2(params->commandBuffer->command_buffer, &pCopyBufferInfo_host);
+
+    free_VkCopyBufferInfo2(&pCopyBufferInfo_host);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p\n", params->commandBuffer, params->pCopyBufferInfo);
+    params->commandBuffer->device->funcs.p_vkCmdCopyBuffer2(params->commandBuffer->command_buffer, params->pCopyBufferInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdCopyBuffer2KHR(void *args)
 {
     struct vkCmdCopyBuffer2KHR_params *params = args;
@@ -5540,6 +5604,25 @@ static NTSTATUS wine_vkCmdCopyBufferToImage(void *args)
 #endif
 }
 
+static NTSTATUS wine_vkCmdCopyBufferToImage2(void *args)
+{
+    struct vkCmdCopyBufferToImage2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkCopyBufferToImageInfo2_host pCopyBufferToImageInfo_host;
+    TRACE("%p, %p\n", params->commandBuffer, params->pCopyBufferToImageInfo);
+
+    convert_VkCopyBufferToImageInfo2_win_to_host(params->pCopyBufferToImageInfo, &pCopyBufferToImageInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdCopyBufferToImage2(params->commandBuffer->command_buffer, &pCopyBufferToImageInfo_host);
+
+    free_VkCopyBufferToImageInfo2(&pCopyBufferToImageInfo_host);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p\n", params->commandBuffer, params->pCopyBufferToImageInfo);
+    params->commandBuffer->device->funcs.p_vkCmdCopyBufferToImage2(params->commandBuffer->command_buffer, params->pCopyBufferToImageInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdCopyBufferToImage2KHR(void *args)
 {
     struct vkCmdCopyBufferToImage2KHR_params *params = args;
@@ -5567,6 +5650,24 @@ static NTSTATUS wine_vkCmdCopyImage(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdCopyImage2(void *args)
+{
+    struct vkCmdCopyImage2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkCopyImageInfo2_host pCopyImageInfo_host;
+    TRACE("%p, %p\n", params->commandBuffer, params->pCopyImageInfo);
+
+    convert_VkCopyImageInfo2_win_to_host(params->pCopyImageInfo, &pCopyImageInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdCopyImage2(params->commandBuffer->command_buffer, &pCopyImageInfo_host);
+
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p\n", params->commandBuffer, params->pCopyImageInfo);
+    params->commandBuffer->device->funcs.p_vkCmdCopyImage2(params->commandBuffer->command_buffer, params->pCopyImageInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdCopyImage2KHR(void *args)
 {
     struct vkCmdCopyImage2KHR_params *params = args;
@@ -5604,6 +5705,25 @@ static NTSTATUS wine_vkCmdCopyImageToBuffer(void *args)
 #endif
 }
 
+static NTSTATUS wine_vkCmdCopyImageToBuffer2(void *args)
+{
+    struct vkCmdCopyImageToBuffer2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkCopyImageToBufferInfo2_host pCopyImageToBufferInfo_host;
+    TRACE("%p, %p\n", params->commandBuffer, params->pCopyImageToBufferInfo);
+
+    convert_VkCopyImageToBufferInfo2_win_to_host(params->pCopyImageToBufferInfo, &pCopyImageToBufferInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdCopyImageToBuffer2(params->commandBuffer->command_buffer, &pCopyImageToBufferInfo_host);
+
+    free_VkCopyImageToBufferInfo2(&pCopyImageToBufferInfo_host);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p\n", params->commandBuffer, params->pCopyImageToBufferInfo);
+    params->commandBuffer->device->funcs.p_vkCmdCopyImageToBuffer2(params->commandBuffer->command_buffer, params->pCopyImageToBufferInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdCopyImageToBuffer2KHR(void *args)
 {
     struct vkCmdCopyImageToBuffer2KHR_params *params = args;
@@ -5907,6 +6027,14 @@ static NTSTATUS wine_vkCmdEndRenderPass2KHR(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdEndRendering(void *args)
+{
+    struct vkCmdEndRendering_params *params = args;
+    TRACE("%p\n", params->commandBuffer);
+    params->commandBuffer->device->funcs.p_vkCmdEndRendering(params->commandBuffer->command_buffer);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdEndRenderingKHR(void *args)
 {
     struct vkCmdEndRenderingKHR_params *params = args;
@@ -6017,6 +6145,25 @@ static NTSTATUS wine_vkCmdPipelineBarrier(void *args)
 #endif
 }
 
+static NTSTATUS wine_vkCmdPipelineBarrier2(void *args)
+{
+    struct vkCmdPipelineBarrier2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkDependencyInfo_host pDependencyInfo_host;
+    TRACE("%p, %p\n", params->commandBuffer, params->pDependencyInfo);
+
+    convert_VkDependencyInfo_win_to_host(params->pDependencyInfo, &pDependencyInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdPipelineBarrier2(params->commandBuffer->command_buffer, &pDependencyInfo_host);
+
+    free_VkDependencyInfo(&pDependencyInfo_host);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p\n", params->commandBuffer, params->pDependencyInfo);
+    params->commandBuffer->device->funcs.p_vkCmdPipelineBarrier2(params->commandBuffer->command_buffer, params->pDependencyInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdPipelineBarrier2KHR(void *args)
 {
     struct vkCmdPipelineBarrier2KHR_params *params = args;
@@ -6098,6 +6245,14 @@ static NTSTATUS wine_vkCmdResetEvent(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdResetEvent2(void *args)
+{
+    struct vkCmdResetEvent2_params *params = args;
+    TRACE("%p, 0x%s, 0x%s\n", params->commandBuffer, wine_dbgstr_longlong(params->event), wine_dbgstr_longlong(params->stageMask));
+    params->commandBuffer->device->funcs.p_vkCmdResetEvent2(params->commandBuffer->command_buffer, params->event, params->stageMask);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdResetEvent2KHR(void *args)
 {
     struct vkCmdResetEvent2KHR_params *params = args;
@@ -6122,6 +6277,24 @@ static NTSTATUS wine_vkCmdResolveImage(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdResolveImage2(void *args)
+{
+    struct vkCmdResolveImage2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkResolveImageInfo2_host pResolveImageInfo_host;
+    TRACE("%p, %p\n", params->commandBuffer, params->pResolveImageInfo);
+
+    convert_VkResolveImageInfo2_win_to_host(params->pResolveImageInfo, &pResolveImageInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdResolveImage2(params->commandBuffer->command_buffer, &pResolveImageInfo_host);
+
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p\n", params->commandBuffer, params->pResolveImageInfo);
+    params->commandBuffer->device->funcs.p_vkCmdResolveImage2(params->commandBuffer->command_buffer, params->pResolveImageInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdResolveImage2KHR(void *args)
 {
     struct vkCmdResolveImage2KHR_params *params = args;
@@ -6172,6 +6345,14 @@ static NTSTATUS wine_vkCmdSetColorWriteEnableEXT(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetCullMode(void *args)
+{
+    struct vkCmdSetCullMode_params *params = args;
+    TRACE("%p, %#x\n", params->commandBuffer, params->cullMode);
+    params->commandBuffer->device->funcs.p_vkCmdSetCullMode(params->commandBuffer->command_buffer, params->cullMode);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetCullModeEXT(void *args)
 {
     struct vkCmdSetCullModeEXT_params *params = args;
@@ -6188,6 +6369,14 @@ static NTSTATUS wine_vkCmdSetDepthBias(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetDepthBiasEnable(void *args)
+{
+    struct vkCmdSetDepthBiasEnable_params *params = args;
+    TRACE("%p, %u\n", params->commandBuffer, params->depthBiasEnable);
+    params->commandBuffer->device->funcs.p_vkCmdSetDepthBiasEnable(params->commandBuffer->command_buffer, params->depthBiasEnable);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetDepthBiasEnableEXT(void *args)
 {
     struct vkCmdSetDepthBiasEnableEXT_params *params = args;
@@ -6204,6 +6393,14 @@ static NTSTATUS wine_vkCmdSetDepthBounds(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetDepthBoundsTestEnable(void *args)
+{
+    struct vkCmdSetDepthBoundsTestEnable_params *params = args;
+    TRACE("%p, %u\n", params->commandBuffer, params->depthBoundsTestEnable);
+    params->commandBuffer->device->funcs.p_vkCmdSetDepthBoundsTestEnable(params->commandBuffer->command_buffer, params->depthBoundsTestEnable);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetDepthBoundsTestEnableEXT(void *args)
 {
     struct vkCmdSetDepthBoundsTestEnableEXT_params *params = args;
@@ -6212,6 +6409,14 @@ static NTSTATUS wine_vkCmdSetDepthBoundsTestEnableEXT(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetDepthCompareOp(void *args)
+{
+    struct vkCmdSetDepthCompareOp_params *params = args;
+    TRACE("%p, %#x\n", params->commandBuffer, params->depthCompareOp);
+    params->commandBuffer->device->funcs.p_vkCmdSetDepthCompareOp(params->commandBuffer->command_buffer, params->depthCompareOp);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetDepthCompareOpEXT(void *args)
 {
     struct vkCmdSetDepthCompareOpEXT_params *params = args;
@@ -6220,6 +6425,14 @@ static NTSTATUS wine_vkCmdSetDepthCompareOpEXT(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetDepthTestEnable(void *args)
+{
+    struct vkCmdSetDepthTestEnable_params *params = args;
+    TRACE("%p, %u\n", params->commandBuffer, params->depthTestEnable);
+    params->commandBuffer->device->funcs.p_vkCmdSetDepthTestEnable(params->commandBuffer->command_buffer, params->depthTestEnable);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetDepthTestEnableEXT(void *args)
 {
     struct vkCmdSetDepthTestEnableEXT_params *params = args;
@@ -6228,6 +6441,14 @@ static NTSTATUS wine_vkCmdSetDepthTestEnableEXT(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetDepthWriteEnable(void *args)
+{
+    struct vkCmdSetDepthWriteEnable_params *params = args;
+    TRACE("%p, %u\n", params->commandBuffer, params->depthWriteEnable);
+    params->commandBuffer->device->funcs.p_vkCmdSetDepthWriteEnable(params->commandBuffer->command_buffer, params->depthWriteEnable);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetDepthWriteEnableEXT(void *args)
 {
     struct vkCmdSetDepthWriteEnableEXT_params *params = args;
@@ -6268,6 +6489,25 @@ static NTSTATUS wine_vkCmdSetEvent(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetEvent2(void *args)
+{
+    struct vkCmdSetEvent2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkDependencyInfo_host pDependencyInfo_host;
+    TRACE("%p, 0x%s, %p\n", params->commandBuffer, wine_dbgstr_longlong(params->event), params->pDependencyInfo);
+
+    convert_VkDependencyInfo_win_to_host(params->pDependencyInfo, &pDependencyInfo_host);
+    params->commandBuffer->device->funcs.p_vkCmdSetEvent2(params->commandBuffer->command_buffer, params->event, &pDependencyInfo_host);
+
+    free_VkDependencyInfo(&pDependencyInfo_host);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, 0x%s, %p\n", params->commandBuffer, wine_dbgstr_longlong(params->event), params->pDependencyInfo);
+    params->commandBuffer->device->funcs.p_vkCmdSetEvent2(params->commandBuffer->command_buffer, params->event, params->pDependencyInfo);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdSetEvent2KHR(void *args)
 {
     struct vkCmdSetEvent2KHR_params *params = args;
@@ -6311,6 +6551,14 @@ static NTSTATUS wine_vkCmdSetFragmentShadingRateKHR(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetFrontFace(void *args)
+{
+    struct vkCmdSetFrontFace_params *params = args;
+    TRACE("%p, %#x\n", params->commandBuffer, params->frontFace);
+    params->commandBuffer->device->funcs.p_vkCmdSetFrontFace(params->commandBuffer->command_buffer, params->frontFace);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetFrontFaceEXT(void *args)
 {
     struct vkCmdSetFrontFaceEXT_params *params = args;
@@ -6394,6 +6642,14 @@ static NTSTATUS wine_vkCmdSetPerformanceStreamMarkerINTEL(void *args)
     return params->commandBuffer->device->funcs.p_vkCmdSetPerformanceStreamMarkerINTEL(params->commandBuffer->command_buffer, params->pMarkerInfo);
 }
 
+static NTSTATUS wine_vkCmdSetPrimitiveRestartEnable(void *args)
+{
+    struct vkCmdSetPrimitiveRestartEnable_params *params = args;
+    TRACE("%p, %u\n", params->commandBuffer, params->primitiveRestartEnable);
+    params->commandBuffer->device->funcs.p_vkCmdSetPrimitiveRestartEnable(params->commandBuffer->command_buffer, params->primitiveRestartEnable);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetPrimitiveRestartEnableEXT(void *args)
 {
     struct vkCmdSetPrimitiveRestartEnableEXT_params *params = args;
@@ -6402,6 +6658,14 @@ static NTSTATUS wine_vkCmdSetPrimitiveRestartEnableEXT(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetPrimitiveTopology(void *args)
+{
+    struct vkCmdSetPrimitiveTopology_params *params = args;
+    TRACE("%p, %#x\n", params->commandBuffer, params->primitiveTopology);
+    params->commandBuffer->device->funcs.p_vkCmdSetPrimitiveTopology(params->commandBuffer->command_buffer, params->primitiveTopology);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetPrimitiveTopologyEXT(void *args)
 {
     struct vkCmdSetPrimitiveTopologyEXT_params *params = args;
@@ -6410,6 +6674,14 @@ static NTSTATUS wine_vkCmdSetPrimitiveTopologyEXT(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetRasterizerDiscardEnable(void *args)
+{
+    struct vkCmdSetRasterizerDiscardEnable_params *params = args;
+    TRACE("%p, %u\n", params->commandBuffer, params->rasterizerDiscardEnable);
+    params->commandBuffer->device->funcs.p_vkCmdSetRasterizerDiscardEnable(params->commandBuffer->command_buffer, params->rasterizerDiscardEnable);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetRasterizerDiscardEnableEXT(void *args)
 {
     struct vkCmdSetRasterizerDiscardEnableEXT_params *params = args;
@@ -6442,6 +6714,14 @@ static NTSTATUS wine_vkCmdSetScissor(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetScissorWithCount(void *args)
+{
+    struct vkCmdSetScissorWithCount_params *params = args;
+    TRACE("%p, %u, %p\n", params->commandBuffer, params->scissorCount, params->pScissors);
+    params->commandBuffer->device->funcs.p_vkCmdSetScissorWithCount(params->commandBuffer->command_buffer, params->scissorCount, params->pScissors);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetScissorWithCountEXT(void *args)
 {
     struct vkCmdSetScissorWithCountEXT_params *params = args;
@@ -6458,6 +6738,14 @@ static NTSTATUS wine_vkCmdSetStencilCompareMask(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetStencilOp(void *args)
+{
+    struct vkCmdSetStencilOp_params *params = args;
+    TRACE("%p, %#x, %#x, %#x, %#x, %#x\n", params->commandBuffer, params->faceMask, params->failOp, params->passOp, params->depthFailOp, params->compareOp);
+    params->commandBuffer->device->funcs.p_vkCmdSetStencilOp(params->commandBuffer->command_buffer, params->faceMask, params->failOp, params->passOp, params->depthFailOp, params->compareOp);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetStencilOpEXT(void *args)
 {
     struct vkCmdSetStencilOpEXT_params *params = args;
@@ -6474,6 +6762,14 @@ static NTSTATUS wine_vkCmdSetStencilReference(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetStencilTestEnable(void *args)
+{
+    struct vkCmdSetStencilTestEnable_params *params = args;
+    TRACE("%p, %u\n", params->commandBuffer, params->stencilTestEnable);
+    params->commandBuffer->device->funcs.p_vkCmdSetStencilTestEnable(params->commandBuffer->command_buffer, params->stencilTestEnable);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetStencilTestEnableEXT(void *args)
 {
     struct vkCmdSetStencilTestEnableEXT_params *params = args;
@@ -6522,6 +6818,14 @@ static NTSTATUS wine_vkCmdSetViewportWScalingNV(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdSetViewportWithCount(void *args)
+{
+    struct vkCmdSetViewportWithCount_params *params = args;
+    TRACE("%p, %u, %p\n", params->commandBuffer, params->viewportCount, params->pViewports);
+    params->commandBuffer->device->funcs.p_vkCmdSetViewportWithCount(params->commandBuffer->command_buffer, params->viewportCount, params->pViewports);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdSetViewportWithCountEXT(void *args)
 {
     struct vkCmdSetViewportWithCountEXT_params *params = args;
@@ -6624,6 +6928,25 @@ static NTSTATUS wine_vkCmdWaitEvents(void *args)
 #endif
 }
 
+static NTSTATUS wine_vkCmdWaitEvents2(void *args)
+{
+    struct vkCmdWaitEvents2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkDependencyInfo_host *pDependencyInfos_host;
+    TRACE("%p, %u, %p, %p\n", params->commandBuffer, params->eventCount, params->pEvents, params->pDependencyInfos);
+
+    pDependencyInfos_host = convert_VkDependencyInfo_array_win_to_host(params->pDependencyInfos, params->eventCount);
+    params->commandBuffer->device->funcs.p_vkCmdWaitEvents2(params->commandBuffer->command_buffer, params->eventCount, params->pEvents, pDependencyInfos_host);
+
+    free_VkDependencyInfo_array(pDependencyInfos_host, params->eventCount);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %u, %p, %p\n", params->commandBuffer, params->eventCount, params->pEvents, params->pDependencyInfos);
+    params->commandBuffer->device->funcs.p_vkCmdWaitEvents2(params->commandBuffer->command_buffer, params->eventCount, params->pEvents, params->pDependencyInfos);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkCmdWaitEvents2KHR(void *args)
 {
     struct vkCmdWaitEvents2KHR_params *params = args;
@@ -6683,6 +7006,14 @@ static NTSTATUS wine_vkCmdWriteTimestamp(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkCmdWriteTimestamp2(void *args)
+{
+    struct vkCmdWriteTimestamp2_params *params = args;
+    TRACE("%p, 0x%s, 0x%s, %u\n", params->commandBuffer, wine_dbgstr_longlong(params->stage), wine_dbgstr_longlong(params->queryPool), params->query);
+    params->commandBuffer->device->funcs.p_vkCmdWriteTimestamp2(params->commandBuffer->command_buffer, params->stage, params->queryPool, params->query);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkCmdWriteTimestamp2KHR(void *args)
 {
     struct vkCmdWriteTimestamp2KHR_params *params = args;
@@ -7034,6 +7365,13 @@ static NTSTATUS wine_vkCreatePipelineLayout(void *args)
     return params->device->funcs.p_vkCreatePipelineLayout(params->device->device, params->pCreateInfo, NULL, params->pPipelineLayout);
 }
 
+static NTSTATUS wine_vkCreatePrivateDataSlot(void *args)
+{
+    struct vkCreatePrivateDataSlot_params *params = args;
+    TRACE("%p, %p, %p, %p\n", params->device, params->pCreateInfo, params->pAllocator, params->pPrivateDataSlot);
+    return params->device->funcs.p_vkCreatePrivateDataSlot(params->device->device, params->pCreateInfo, NULL, params->pPrivateDataSlot);
+}
+
 static NTSTATUS wine_vkCreatePrivateDataSlotEXT(void *args)
 {
     struct vkCreatePrivateDataSlotEXT_params *params = args;
@@ -7396,6 +7734,14 @@ static NTSTATUS wine_vkDestroyPipelineLayout(void *args)
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkDestroyPrivateDataSlot(void *args)
+{
+    struct vkDestroyPrivateDataSlot_params *params = args;
+    TRACE("%p, 0x%s, %p\n", params->device, wine_dbgstr_longlong(params->privateDataSlot), params->pAllocator);
+    params->device->funcs.p_vkDestroyPrivateDataSlot(params->device->device, params->privateDataSlot, NULL);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkDestroyPrivateDataSlotEXT(void *args)
 {
     struct vkDestroyPrivateDataSlotEXT_params *params = args;
@@ -7785,6 +8131,28 @@ static NTSTATUS wine_vkGetDeviceAccelerationStructureCompatibilityKHR(void *args
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS wine_vkGetDeviceBufferMemoryRequirements(void *args)
+{
+    struct vkGetDeviceBufferMemoryRequirements_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkDeviceBufferMemoryRequirements_host pInfo_host;
+    VkMemoryRequirements2_host pMemoryRequirements_host;
+    TRACE("%p, %p, %p\n", params->device, params->pInfo, params->pMemoryRequirements);
+
+    convert_VkDeviceBufferMemoryRequirements_win_to_host(params->pInfo, &pInfo_host);
+    convert_VkMemoryRequirements2_win_to_host(params->pMemoryRequirements, &pMemoryRequirements_host);
+    params->device->funcs.p_vkGetDeviceBufferMemoryRequirements(params->device->device, &pInfo_host, &pMemoryRequirements_host);
+
+    convert_VkMemoryRequirements2_host_to_win(&pMemoryRequirements_host, params->pMemoryRequirements);
+    free_VkDeviceBufferMemoryRequirements(&pInfo_host);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p, %p\n", params->device, params->pInfo, params->pMemoryRequirements);
+    params->device->funcs.p_vkGetDeviceBufferMemoryRequirements(params->device->device, params->pInfo, params->pMemoryRequirements);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkGetDeviceBufferMemoryRequirementsKHR(void *args)
 {
     struct vkGetDeviceBufferMemoryRequirementsKHR_params *params = args;
@@ -7837,6 +8205,25 @@ static NTSTATUS wine_vkGetDeviceGroupSurfacePresentModesKHR(void *args)
     return params->device->funcs.p_vkGetDeviceGroupSurfacePresentModesKHR(params->device->device, wine_surface_from_handle(params->surface)->driver_surface, params->pModes);
 }
 
+static NTSTATUS wine_vkGetDeviceImageMemoryRequirements(void *args)
+{
+    struct vkGetDeviceImageMemoryRequirements_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkMemoryRequirements2_host pMemoryRequirements_host;
+    TRACE("%p, %p, %p\n", params->device, params->pInfo, params->pMemoryRequirements);
+
+    convert_VkMemoryRequirements2_win_to_host(params->pMemoryRequirements, &pMemoryRequirements_host);
+    params->device->funcs.p_vkGetDeviceImageMemoryRequirements(params->device->device, params->pInfo, &pMemoryRequirements_host);
+
+    convert_VkMemoryRequirements2_host_to_win(&pMemoryRequirements_host, params->pMemoryRequirements);
+    return STATUS_SUCCESS;
+#else
+    TRACE("%p, %p, %p\n", params->device, params->pInfo, params->pMemoryRequirements);
+    params->device->funcs.p_vkGetDeviceImageMemoryRequirements(params->device->device, params->pInfo, params->pMemoryRequirements);
+    return STATUS_SUCCESS;
+#endif
+}
+
 static NTSTATUS wine_vkGetDeviceImageMemoryRequirementsKHR(void *args)
 {
     struct vkGetDeviceImageMemoryRequirementsKHR_params *params = args;
@@ -7856,6 +8243,14 @@ static NTSTATUS wine_vkGetDeviceImageMemoryRequirementsKHR(void *args)
 #endif
 }
 
+static NTSTATUS wine_vkGetDeviceImageSparseMemoryRequirements(void *args)
+{
+    struct vkGetDeviceImageSparseMemoryRequirements_params *params = args;
+    TRACE("%p, %p, %p, %p\n", params->device, params->pInfo, params->pSparseMemoryRequirementCount, params->pSparseMemoryRequirements);
+    params->device->funcs.p_vkGetDeviceImageSparseMemoryRequirements(params->device->device, params->pInfo, params->pSparseMemoryRequirementCount, params->pSparseMemoryRequirements);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkGetDeviceImageSparseMemoryRequirementsKHR(void *args)
 {
     struct vkGetDeviceImageSparseMemoryRequirementsKHR_params *params = args;
@@ -8492,6 +8887,13 @@ static NTSTATUS wine_vkGetPhysicalDeviceSurfaceSupportKHR(void *args)
     return params->physicalDevice->instance->funcs.p_vkGetPhysicalDeviceSurfaceSupportKHR(params->physicalDevice->phys_dev, params->queueFamilyIndex, wine_surface_from_handle(params->surface)->driver_surface, params->pSupported);
 }
 
+static NTSTATUS wine_vkGetPhysicalDeviceToolProperties(void *args)
+{
+    struct vkGetPhysicalDeviceToolProperties_params *params = args;
+    TRACE("%p, %p, %p\n", params->physicalDevice, params->pToolCount, params->pToolProperties);
+    return params->physicalDevice->instance->funcs.p_vkGetPhysicalDeviceToolProperties(params->physicalDevice->phys_dev, params->pToolCount, params->pToolProperties);
+}
+
 static NTSTATUS wine_vkGetPhysicalDeviceToolPropertiesEXT(void *args)
 {
     struct vkGetPhysicalDeviceToolPropertiesEXT_params *params = args;
@@ -8567,6 +8969,14 @@ static NTSTATUS wine_vkGetPipelineExecutableStatisticsKHR(void *args)
 #endif
 }
 
+static NTSTATUS wine_vkGetPrivateData(void *args)
+{
+    struct vkGetPrivateData_params *params = args;
+    TRACE("%p, %#x, 0x%s, 0x%s, %p\n", params->device, params->objectType, wine_dbgstr_longlong(params->objectHandle), wine_dbgstr_longlong(params->privateDataSlot), params->pData);
+    params->device->funcs.p_vkGetPrivateData(params->device->device, params->objectType, wine_vk_unwrap_handle(params->objectType, params->objectHandle), params->privateDataSlot, params->pData);
+    return STATUS_SUCCESS;
+}
+
 static NTSTATUS wine_vkGetPrivateDataEXT(void *args)
 {
     struct vkGetPrivateDataEXT_params *params = args;
@@ -8787,6 +9197,32 @@ static NTSTATUS wine_vkQueueSubmit(void *args)
     return result;
 }
 
+static NTSTATUS wine_vkQueueSubmit2(void *args)
+{
+    struct vkQueueSubmit2_params *params = args;
+#if defined(USE_STRUCT_CONVERSION)
+    VkResult result;
+    VkSubmitInfo2_host *pSubmits_host;
+    TRACE("%p, %u, %p, 0x%s\n", params->queue, params->submitCount, params->pSubmits, wine_dbgstr_longlong(params->fence));
+
+    pSubmits_host = convert_VkSubmitInfo2_array_win_to_host(params->pSubmits, params->submitCount);
+    result = params->queue->device->funcs.p_vkQueueSubmit2(params->queue->queue, params->submitCount, pSubmits_host, params->fence);
+
+    free_VkSubmitInfo2_array(pSubmits_host, params->submitCount);
+    return result;
+#else
+    VkResult result;
+    VkSubmitInfo2 *pSubmits_host;
+    TRACE("%p, %u, %p, 0x%s\n", params->queue, params->submitCount, params->pSubmits, wine_dbgstr_longlong(params->fence));
+
+    pSubmits_host = convert_VkSubmitInfo2_array_win_to_host(params->pSubmits, params->submitCount);
+    result = params->queue->device->funcs.p_vkQueueSubmit2(params->queue->queue, params->submitCount, pSubmits_host, params->fence);
+
+    free_VkSubmitInfo2_array(pSubmits_host, params->submitCount);
+    return result;
+#endif
+}
+
 static NTSTATUS wine_vkQueueSubmit2KHR(void *args)
 {
     struct vkQueueSubmit2KHR_params *params = args;
@@ -8949,6 +9385,13 @@ static NTSTATUS wine_vkSetEvent(void *args)
     return params->device->funcs.p_vkSetEvent(params->device->device, params->event);
 }
 
+static NTSTATUS wine_vkSetPrivateData(void *args)
+{
+    struct vkSetPrivateData_params *params = args;
+    TRACE("%p, %#x, 0x%s, 0x%s, 0x%s\n", params->device, params->objectType, wine_dbgstr_longlong(params->objectHandle), wine_dbgstr_longlong(params->privateDataSlot), wine_dbgstr_longlong(params->data));
+    return params->device->funcs.p_vkSetPrivateData(params->device->device, params->objectType, wine_vk_unwrap_handle(params->objectType, params->objectHandle), params->privateDataSlot, params->data);
+}
+
 static NTSTATUS wine_vkSetPrivateDataEXT(void *args)
 {
     struct vkSetPrivateDataEXT_params *params = args;
@@ -9430,6 +9873,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkCmdBeginRenderPass,
     wine_vkCmdBeginRenderPass2,
     wine_vkCmdBeginRenderPass2KHR,
+    wine_vkCmdBeginRendering,
     wine_vkCmdBeginRenderingKHR,
     wine_vkCmdBeginTransformFeedbackEXT,
     wine_vkCmdBindDescriptorSets,
@@ -9440,8 +9884,10 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkCmdBindShadingRateImageNV,
     wine_vkCmdBindTransformFeedbackBuffersEXT,
     wine_vkCmdBindVertexBuffers,
+    wine_vkCmdBindVertexBuffers2,
     wine_vkCmdBindVertexBuffers2EXT,
     wine_vkCmdBlitImage,
+    wine_vkCmdBlitImage2,
     wine_vkCmdBlitImage2KHR,
     wine_vkCmdBuildAccelerationStructureNV,
     wine_vkCmdBuildAccelerationStructuresIndirectKHR,
@@ -9453,12 +9899,16 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkCmdCopyAccelerationStructureNV,
     wine_vkCmdCopyAccelerationStructureToMemoryKHR,
     wine_vkCmdCopyBuffer,
+    wine_vkCmdCopyBuffer2,
     wine_vkCmdCopyBuffer2KHR,
     wine_vkCmdCopyBufferToImage,
+    wine_vkCmdCopyBufferToImage2,
     wine_vkCmdCopyBufferToImage2KHR,
     wine_vkCmdCopyImage,
+    wine_vkCmdCopyImage2,
     wine_vkCmdCopyImage2KHR,
     wine_vkCmdCopyImageToBuffer,
+    wine_vkCmdCopyImageToBuffer2,
     wine_vkCmdCopyImageToBuffer2KHR,
     wine_vkCmdCopyMemoryToAccelerationStructureKHR,
     wine_vkCmdCopyQueryPoolResults,
@@ -9493,6 +9943,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkCmdEndRenderPass,
     wine_vkCmdEndRenderPass2,
     wine_vkCmdEndRenderPass2KHR,
+    wine_vkCmdEndRendering,
     wine_vkCmdEndRenderingKHR,
     wine_vkCmdEndTransformFeedbackEXT,
     wine_vkCmdExecuteCommands,
@@ -9503,36 +9954,47 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkCmdNextSubpass2,
     wine_vkCmdNextSubpass2KHR,
     wine_vkCmdPipelineBarrier,
+    wine_vkCmdPipelineBarrier2,
     wine_vkCmdPipelineBarrier2KHR,
     wine_vkCmdPreprocessGeneratedCommandsNV,
     wine_vkCmdPushConstants,
     wine_vkCmdPushDescriptorSetKHR,
     wine_vkCmdPushDescriptorSetWithTemplateKHR,
     wine_vkCmdResetEvent,
+    wine_vkCmdResetEvent2,
     wine_vkCmdResetEvent2KHR,
     wine_vkCmdResetQueryPool,
     wine_vkCmdResolveImage,
+    wine_vkCmdResolveImage2,
     wine_vkCmdResolveImage2KHR,
     wine_vkCmdSetBlendConstants,
     wine_vkCmdSetCheckpointNV,
     wine_vkCmdSetCoarseSampleOrderNV,
     wine_vkCmdSetColorWriteEnableEXT,
+    wine_vkCmdSetCullMode,
     wine_vkCmdSetCullModeEXT,
     wine_vkCmdSetDepthBias,
+    wine_vkCmdSetDepthBiasEnable,
     wine_vkCmdSetDepthBiasEnableEXT,
     wine_vkCmdSetDepthBounds,
+    wine_vkCmdSetDepthBoundsTestEnable,
     wine_vkCmdSetDepthBoundsTestEnableEXT,
+    wine_vkCmdSetDepthCompareOp,
     wine_vkCmdSetDepthCompareOpEXT,
+    wine_vkCmdSetDepthTestEnable,
     wine_vkCmdSetDepthTestEnableEXT,
+    wine_vkCmdSetDepthWriteEnable,
     wine_vkCmdSetDepthWriteEnableEXT,
     wine_vkCmdSetDeviceMask,
     wine_vkCmdSetDeviceMaskKHR,
     wine_vkCmdSetDiscardRectangleEXT,
     wine_vkCmdSetEvent,
+    wine_vkCmdSetEvent2,
     wine_vkCmdSetEvent2KHR,
     wine_vkCmdSetExclusiveScissorNV,
     wine_vkCmdSetFragmentShadingRateEnumNV,
     wine_vkCmdSetFragmentShadingRateKHR,
+    wine_vkCmdSetFrontFace,
     wine_vkCmdSetFrontFaceEXT,
     wine_vkCmdSetLineStippleEXT,
     wine_vkCmdSetLineWidth,
@@ -9541,22 +10003,29 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkCmdSetPerformanceMarkerINTEL,
     wine_vkCmdSetPerformanceOverrideINTEL,
     wine_vkCmdSetPerformanceStreamMarkerINTEL,
+    wine_vkCmdSetPrimitiveRestartEnable,
     wine_vkCmdSetPrimitiveRestartEnableEXT,
+    wine_vkCmdSetPrimitiveTopology,
     wine_vkCmdSetPrimitiveTopologyEXT,
+    wine_vkCmdSetRasterizerDiscardEnable,
     wine_vkCmdSetRasterizerDiscardEnableEXT,
     wine_vkCmdSetRayTracingPipelineStackSizeKHR,
     wine_vkCmdSetSampleLocationsEXT,
     wine_vkCmdSetScissor,
+    wine_vkCmdSetScissorWithCount,
     wine_vkCmdSetScissorWithCountEXT,
     wine_vkCmdSetStencilCompareMask,
+    wine_vkCmdSetStencilOp,
     wine_vkCmdSetStencilOpEXT,
     wine_vkCmdSetStencilReference,
+    wine_vkCmdSetStencilTestEnable,
     wine_vkCmdSetStencilTestEnableEXT,
     wine_vkCmdSetStencilWriteMask,
     wine_vkCmdSetVertexInputEXT,
     wine_vkCmdSetViewport,
     wine_vkCmdSetViewportShadingRatePaletteNV,
     wine_vkCmdSetViewportWScalingNV,
+    wine_vkCmdSetViewportWithCount,
     wine_vkCmdSetViewportWithCountEXT,
     wine_vkCmdSubpassShadingHUAWEI,
     wine_vkCmdTraceRaysIndirectKHR,
@@ -9564,12 +10033,14 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkCmdTraceRaysNV,
     wine_vkCmdUpdateBuffer,
     wine_vkCmdWaitEvents,
+    wine_vkCmdWaitEvents2,
     wine_vkCmdWaitEvents2KHR,
     wine_vkCmdWriteAccelerationStructuresPropertiesKHR,
     wine_vkCmdWriteAccelerationStructuresPropertiesNV,
     wine_vkCmdWriteBufferMarker2AMD,
     wine_vkCmdWriteBufferMarkerAMD,
     wine_vkCmdWriteTimestamp,
+    wine_vkCmdWriteTimestamp2,
     wine_vkCmdWriteTimestamp2KHR,
     wine_vkCompileDeferredNV,
     wine_vkCopyAccelerationStructureKHR,
@@ -9601,6 +10072,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkCreateInstance,
     wine_vkCreatePipelineCache,
     wine_vkCreatePipelineLayout,
+    wine_vkCreatePrivateDataSlot,
     wine_vkCreatePrivateDataSlotEXT,
     wine_vkCreateQueryPool,
     wine_vkCreateRayTracingPipelinesKHR,
@@ -9645,6 +10117,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkDestroyPipeline,
     wine_vkDestroyPipelineCache,
     wine_vkDestroyPipelineLayout,
+    wine_vkDestroyPrivateDataSlot,
     wine_vkDestroyPrivateDataSlotEXT,
     wine_vkDestroyQueryPool,
     wine_vkDestroyRenderPass,
@@ -9688,12 +10161,15 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkGetDescriptorSetLayoutSupport,
     wine_vkGetDescriptorSetLayoutSupportKHR,
     wine_vkGetDeviceAccelerationStructureCompatibilityKHR,
+    wine_vkGetDeviceBufferMemoryRequirements,
     wine_vkGetDeviceBufferMemoryRequirementsKHR,
     wine_vkGetDeviceGroupPeerMemoryFeatures,
     wine_vkGetDeviceGroupPeerMemoryFeaturesKHR,
     wine_vkGetDeviceGroupPresentCapabilitiesKHR,
     wine_vkGetDeviceGroupSurfacePresentModesKHR,
+    wine_vkGetDeviceImageMemoryRequirements,
     wine_vkGetDeviceImageMemoryRequirementsKHR,
+    wine_vkGetDeviceImageSparseMemoryRequirements,
     wine_vkGetDeviceImageSparseMemoryRequirementsKHR,
     wine_vkGetDeviceMemoryCommitment,
     wine_vkGetDeviceMemoryOpaqueCaptureAddress,
@@ -9755,12 +10231,14 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkGetPhysicalDeviceSurfaceFormatsKHR,
     wine_vkGetPhysicalDeviceSurfacePresentModesKHR,
     wine_vkGetPhysicalDeviceSurfaceSupportKHR,
+    wine_vkGetPhysicalDeviceToolProperties,
     wine_vkGetPhysicalDeviceToolPropertiesEXT,
     wine_vkGetPhysicalDeviceWin32PresentationSupportKHR,
     wine_vkGetPipelineCacheData,
     wine_vkGetPipelineExecutableInternalRepresentationsKHR,
     wine_vkGetPipelineExecutablePropertiesKHR,
     wine_vkGetPipelineExecutableStatisticsKHR,
+    wine_vkGetPrivateData,
     wine_vkGetPrivateDataEXT,
     wine_vkGetQueryPoolResults,
     wine_vkGetQueueCheckpointData2NV,
@@ -9787,6 +10265,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkQueuePresentKHR,
     wine_vkQueueSetPerformanceConfigurationINTEL,
     wine_vkQueueSubmit,
+    wine_vkQueueSubmit2,
     wine_vkQueueSubmit2KHR,
     wine_vkQueueWaitIdle,
     wine_vkReleasePerformanceConfigurationINTEL,
@@ -9802,6 +10281,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     wine_vkSetDebugUtilsObjectTagEXT,
     wine_vkSetDeviceMemoryPriorityEXT,
     wine_vkSetEvent,
+    wine_vkSetPrivateData,
     wine_vkSetPrivateDataEXT,
     wine_vkSignalSemaphore,
     wine_vkSignalSemaphoreKHR,
diff --git a/dlls/winevulkan/vulkan_thunks.h b/dlls/winevulkan/vulkan_thunks.h
index bdcd44c5b90..bfc7af8004e 100644
--- a/dlls/winevulkan/vulkan_thunks.h
+++ b/dlls/winevulkan/vulkan_thunks.h
@@ -12,7 +12,7 @@
 #ifndef __WINE_VULKAN_THUNKS_H
 #define __WINE_VULKAN_THUNKS_H
 
-#define WINE_VK_VERSION VK_API_VERSION_1_2
+#define WINE_VK_VERSION VK_API_VERSION_1_3
 
 /* Functions for which we have custom implementations outside of the thunks. */
 NTSTATUS wine_vkAllocateCommandBuffers(void *args) DECLSPEC_HIDDEN;
@@ -1809,6 +1809,7 @@ struct vulkan_device_funcs
     void (*p_vkCmdBeginRenderPass)(VkCommandBuffer, const VkRenderPassBeginInfo_host *, VkSubpassContents);
     void (*p_vkCmdBeginRenderPass2)(VkCommandBuffer, const VkRenderPassBeginInfo_host *, const VkSubpassBeginInfo *);
     void (*p_vkCmdBeginRenderPass2KHR)(VkCommandBuffer, const VkRenderPassBeginInfo_host *, const VkSubpassBeginInfo *);
+    void (*p_vkCmdBeginRendering)(VkCommandBuffer, const VkRenderingInfo_host *);
     void (*p_vkCmdBeginRenderingKHR)(VkCommandBuffer, const VkRenderingInfo_host *);
     void (*p_vkCmdBeginTransformFeedbackEXT)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *);
     void (*p_vkCmdBindDescriptorSets)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkDescriptorSet *, uint32_t, const uint32_t *);
@@ -1819,8 +1820,10 @@ struct vulkan_device_funcs
     void (*p_vkCmdBindShadingRateImageNV)(VkCommandBuffer, VkImageView, VkImageLayout);
     void (*p_vkCmdBindTransformFeedbackBuffersEXT)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *);
     void (*p_vkCmdBindVertexBuffers)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *);
+    void (*p_vkCmdBindVertexBuffers2)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *, const VkDeviceSize *);
     void (*p_vkCmdBindVertexBuffers2EXT)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *, const VkDeviceSize *);
     void (*p_vkCmdBlitImage)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageBlit *, VkFilter);
+    void (*p_vkCmdBlitImage2)(VkCommandBuffer, const VkBlitImageInfo2_host *);
     void (*p_vkCmdBlitImage2KHR)(VkCommandBuffer, const VkBlitImageInfo2_host *);
     void (*p_vkCmdBuildAccelerationStructureNV)(VkCommandBuffer, const VkAccelerationStructureInfoNV_host *, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize);
     void (*p_vkCmdBuildAccelerationStructuresIndirectKHR)(VkCommandBuffer, uint32_t, const VkAccelerationStructureBuildGeometryInfoKHR_host *, const VkDeviceAddress *, const uint32_t *, const uint32_t * const*);
@@ -1832,12 +1835,16 @@ struct vulkan_device_funcs
     void (*p_vkCmdCopyAccelerationStructureNV)(VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR);
     void (*p_vkCmdCopyAccelerationStructureToMemoryKHR)(VkCommandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR_host *);
     void (*p_vkCmdCopyBuffer)(VkCommandBuffer, VkBuffer, VkBuffer, uint32_t, const VkBufferCopy_host *);
+    void (*p_vkCmdCopyBuffer2)(VkCommandBuffer, const VkCopyBufferInfo2_host *);
     void (*p_vkCmdCopyBuffer2KHR)(VkCommandBuffer, const VkCopyBufferInfo2_host *);
     void (*p_vkCmdCopyBufferToImage)(VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint32_t, const VkBufferImageCopy_host *);
+    void (*p_vkCmdCopyBufferToImage2)(VkCommandBuffer, const VkCopyBufferToImageInfo2_host *);
     void (*p_vkCmdCopyBufferToImage2KHR)(VkCommandBuffer, const VkCopyBufferToImageInfo2_host *);
     void (*p_vkCmdCopyImage)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageCopy *);
+    void (*p_vkCmdCopyImage2)(VkCommandBuffer, const VkCopyImageInfo2_host *);
     void (*p_vkCmdCopyImage2KHR)(VkCommandBuffer, const VkCopyImageInfo2_host *);
     void (*p_vkCmdCopyImageToBuffer)(VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint32_t, const VkBufferImageCopy_host *);
+    void (*p_vkCmdCopyImageToBuffer2)(VkCommandBuffer, const VkCopyImageToBufferInfo2_host *);
     void (*p_vkCmdCopyImageToBuffer2KHR)(VkCommandBuffer, const VkCopyImageToBufferInfo2_host *);
     void (*p_vkCmdCopyMemoryToAccelerationStructureKHR)(VkCommandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR_host *);
     void (*p_vkCmdCopyQueryPoolResults)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags);
@@ -1872,6 +1879,7 @@ struct vulkan_device_funcs
     void (*p_vkCmdEndRenderPass)(VkCommandBuffer);
     void (*p_vkCmdEndRenderPass2)(VkCommandBuffer, const VkSubpassEndInfo *);
     void (*p_vkCmdEndRenderPass2KHR)(VkCommandBuffer, const VkSubpassEndInfo *);
+    void (*p_vkCmdEndRendering)(VkCommandBuffer);
     void (*p_vkCmdEndRenderingKHR)(VkCommandBuffer);
     void (*p_vkCmdEndTransformFeedbackEXT)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *);
     void (*p_vkCmdExecuteCommands)(VkCommandBuffer, uint32_t, const VkCommandBuffer *);
@@ -1882,36 +1890,47 @@ struct vulkan_device_funcs
     void (*p_vkCmdNextSubpass2)(VkCommandBuffer, const VkSubpassBeginInfo *, const VkSubpassEndInfo *);
     void (*p_vkCmdNextSubpass2KHR)(VkCommandBuffer, const VkSubpassBeginInfo *, const VkSubpassEndInfo *);
     void (*p_vkCmdPipelineBarrier)(VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint32_t, const VkMemoryBarrier *, uint32_t, const VkBufferMemoryBarrier_host *, uint32_t, const VkImageMemoryBarrier_host *);
+    void (*p_vkCmdPipelineBarrier2)(VkCommandBuffer, const VkDependencyInfo_host *);
     void (*p_vkCmdPipelineBarrier2KHR)(VkCommandBuffer, const VkDependencyInfo_host *);
     void (*p_vkCmdPreprocessGeneratedCommandsNV)(VkCommandBuffer, const VkGeneratedCommandsInfoNV_host *);
     void (*p_vkCmdPushConstants)(VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint32_t, uint32_t, const void *);
     void (*p_vkCmdPushDescriptorSetKHR)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkWriteDescriptorSet_host *);
     void (*p_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint32_t, const void *);
     void (*p_vkCmdResetEvent)(VkCommandBuffer, VkEvent, VkPipelineStageFlags);
+    void (*p_vkCmdResetEvent2)(VkCommandBuffer, VkEvent, VkPipelineStageFlags2);
     void (*p_vkCmdResetEvent2KHR)(VkCommandBuffer, VkEvent, VkPipelineStageFlags2);
     void (*p_vkCmdResetQueryPool)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t);
     void (*p_vkCmdResolveImage)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageResolve *);
+    void (*p_vkCmdResolveImage2)(VkCommandBuffer, const VkResolveImageInfo2_host *);
     void (*p_vkCmdResolveImage2KHR)(VkCommandBuffer, const VkResolveImageInfo2_host *);
     void (*p_vkCmdSetBlendConstants)(VkCommandBuffer, const float[4]);
     void (*p_vkCmdSetCheckpointNV)(VkCommandBuffer, const void *);
     void (*p_vkCmdSetCoarseSampleOrderNV)(VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint32_t, const VkCoarseSampleOrderCustomNV *);
     void (*p_vkCmdSetColorWriteEnableEXT)(VkCommandBuffer, uint32_t, const VkBool32 *);
+    void (*p_vkCmdSetCullMode)(VkCommandBuffer, VkCullModeFlags);
     void (*p_vkCmdSetCullModeEXT)(VkCommandBuffer, VkCullModeFlags);
     void (*p_vkCmdSetDepthBias)(VkCommandBuffer, float, float, float);
+    void (*p_vkCmdSetDepthBiasEnable)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetDepthBiasEnableEXT)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetDepthBounds)(VkCommandBuffer, float, float);
+    void (*p_vkCmdSetDepthBoundsTestEnable)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetDepthBoundsTestEnableEXT)(VkCommandBuffer, VkBool32);
+    void (*p_vkCmdSetDepthCompareOp)(VkCommandBuffer, VkCompareOp);
     void (*p_vkCmdSetDepthCompareOpEXT)(VkCommandBuffer, VkCompareOp);
+    void (*p_vkCmdSetDepthTestEnable)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetDepthTestEnableEXT)(VkCommandBuffer, VkBool32);
+    void (*p_vkCmdSetDepthWriteEnable)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetDepthWriteEnableEXT)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetDeviceMask)(VkCommandBuffer, uint32_t);
     void (*p_vkCmdSetDeviceMaskKHR)(VkCommandBuffer, uint32_t);
     void (*p_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *);
     void (*p_vkCmdSetEvent)(VkCommandBuffer, VkEvent, VkPipelineStageFlags);
+    void (*p_vkCmdSetEvent2)(VkCommandBuffer, VkEvent, const VkDependencyInfo_host *);
     void (*p_vkCmdSetEvent2KHR)(VkCommandBuffer, VkEvent, const VkDependencyInfo_host *);
     void (*p_vkCmdSetExclusiveScissorNV)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *);
     void (*p_vkCmdSetFragmentShadingRateEnumNV)(VkCommandBuffer, VkFragmentShadingRateNV, const VkFragmentShadingRateCombinerOpKHR[2]);
     void (*p_vkCmdSetFragmentShadingRateKHR)(VkCommandBuffer, const VkExtent2D *, const VkFragmentShadingRateCombinerOpKHR[2]);
+    void (*p_vkCmdSetFrontFace)(VkCommandBuffer, VkFrontFace);
     void (*p_vkCmdSetFrontFaceEXT)(VkCommandBuffer, VkFrontFace);
     void (*p_vkCmdSetLineStippleEXT)(VkCommandBuffer, uint32_t, uint16_t);
     void (*p_vkCmdSetLineWidth)(VkCommandBuffer, float);
@@ -1920,22 +1939,29 @@ struct vulkan_device_funcs
     VkResult (*p_vkCmdSetPerformanceMarkerINTEL)(VkCommandBuffer, const VkPerformanceMarkerInfoINTEL_host *);
     VkResult (*p_vkCmdSetPerformanceOverrideINTEL)(VkCommandBuffer, const VkPerformanceOverrideInfoINTEL_host *);
     VkResult (*p_vkCmdSetPerformanceStreamMarkerINTEL)(VkCommandBuffer, const VkPerformanceStreamMarkerInfoINTEL *);
+    void (*p_vkCmdSetPrimitiveRestartEnable)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetPrimitiveRestartEnableEXT)(VkCommandBuffer, VkBool32);
+    void (*p_vkCmdSetPrimitiveTopology)(VkCommandBuffer, VkPrimitiveTopology);
     void (*p_vkCmdSetPrimitiveTopologyEXT)(VkCommandBuffer, VkPrimitiveTopology);
+    void (*p_vkCmdSetRasterizerDiscardEnable)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetRasterizerDiscardEnableEXT)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetRayTracingPipelineStackSizeKHR)(VkCommandBuffer, uint32_t);
     void (*p_vkCmdSetSampleLocationsEXT)(VkCommandBuffer, const VkSampleLocationsInfoEXT *);
     void (*p_vkCmdSetScissor)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *);
+    void (*p_vkCmdSetScissorWithCount)(VkCommandBuffer, uint32_t, const VkRect2D *);
     void (*p_vkCmdSetScissorWithCountEXT)(VkCommandBuffer, uint32_t, const VkRect2D *);
     void (*p_vkCmdSetStencilCompareMask)(VkCommandBuffer, VkStencilFaceFlags, uint32_t);
+    void (*p_vkCmdSetStencilOp)(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp);
     void (*p_vkCmdSetStencilOpEXT)(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp);
     void (*p_vkCmdSetStencilReference)(VkCommandBuffer, VkStencilFaceFlags, uint32_t);
+    void (*p_vkCmdSetStencilTestEnable)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetStencilTestEnableEXT)(VkCommandBuffer, VkBool32);
     void (*p_vkCmdSetStencilWriteMask)(VkCommandBuffer, VkStencilFaceFlags, uint32_t);
     void (*p_vkCmdSetVertexInputEXT)(VkCommandBuffer, uint32_t, const VkVertexInputBindingDescription2EXT *, uint32_t, const VkVertexInputAttributeDescription2EXT *);
     void (*p_vkCmdSetViewport)(VkCommandBuffer, uint32_t, uint32_t, const VkViewport *);
     void (*p_vkCmdSetViewportShadingRatePaletteNV)(VkCommandBuffer, uint32_t, uint32_t, const VkShadingRatePaletteNV *);
     void (*p_vkCmdSetViewportWScalingNV)(VkCommandBuffer, uint32_t, uint32_t, const VkViewportWScalingNV *);
+    void (*p_vkCmdSetViewportWithCount)(VkCommandBuffer, uint32_t, const VkViewport *);
     void (*p_vkCmdSetViewportWithCountEXT)(VkCommandBuffer, uint32_t, const VkViewport *);
     void (*p_vkCmdSubpassShadingHUAWEI)(VkCommandBuffer);
     void (*p_vkCmdTraceRaysIndirectKHR)(VkCommandBuffer, const VkStridedDeviceAddressRegionKHR_host *, const VkStridedDeviceAddressRegionKHR_host *, const VkStridedDeviceAddressRegionKHR_host *, const VkStridedDeviceAddressRegionKHR_host *, VkDeviceAddress);
@@ -1943,12 +1969,14 @@ struct vulkan_device_funcs
     void (*p_vkCmdTraceRaysNV)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t, uint32_t, uint32_t);
     void (*p_vkCmdUpdateBuffer)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, const void *);
     void (*p_vkCmdWaitEvents)(VkCommandBuffer, uint32_t, const VkEvent *, VkPipelineStageFlags, VkPipelineStageFlags, uint32_t, const VkMemoryBarrier *, uint32_t, const VkBufferMemoryBarrier_host *, uint32_t, const VkImageMemoryBarrier_host *);
+    void (*p_vkCmdWaitEvents2)(VkCommandBuffer, uint32_t, const VkEvent *, const VkDependencyInfo_host *);
     void (*p_vkCmdWaitEvents2KHR)(VkCommandBuffer, uint32_t, const VkEvent *, const VkDependencyInfo_host *);
     void (*p_vkCmdWriteAccelerationStructuresPropertiesKHR)(VkCommandBuffer, uint32_t, const VkAccelerationStructureKHR *, VkQueryType, VkQueryPool, uint32_t);
     void (*p_vkCmdWriteAccelerationStructuresPropertiesNV)(VkCommandBuffer, uint32_t, const VkAccelerationStructureNV *, VkQueryType, VkQueryPool, uint32_t);
     void (*p_vkCmdWriteBufferMarker2AMD)(VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint32_t);
     void (*p_vkCmdWriteBufferMarkerAMD)(VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint32_t);
     void (*p_vkCmdWriteTimestamp)(VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint32_t);
+    void (*p_vkCmdWriteTimestamp2)(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t);
     void (*p_vkCmdWriteTimestamp2KHR)(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t);
     VkResult (*p_vkCompileDeferredNV)(VkDevice, VkPipeline, uint32_t);
     VkResult (*p_vkCopyAccelerationStructureKHR)(VkDevice, VkDeferredOperationKHR, const VkCopyAccelerationStructureInfoKHR_host *);
@@ -1976,6 +2004,7 @@ struct vulkan_device_funcs
     VkResult (*p_vkCreateIndirectCommandsLayoutNV)(VkDevice, const VkIndirectCommandsLayoutCreateInfoNV_host *, const VkAllocationCallbacks *, VkIndirectCommandsLayoutNV *);
     VkResult (*p_vkCreatePipelineCache)(VkDevice, const VkPipelineCacheCreateInfo *, const VkAllocationCallbacks *, VkPipelineCache *);
     VkResult (*p_vkCreatePipelineLayout)(VkDevice, const VkPipelineLayoutCreateInfo *, const VkAllocationCallbacks *, VkPipelineLayout *);
+    VkResult (*p_vkCreatePrivateDataSlot)(VkDevice, const VkPrivateDataSlotCreateInfo *, const VkAllocationCallbacks *, VkPrivateDataSlot *);
     VkResult (*p_vkCreatePrivateDataSlotEXT)(VkDevice, const VkPrivateDataSlotCreateInfo *, const VkAllocationCallbacks *, VkPrivateDataSlot *);
     VkResult (*p_vkCreateQueryPool)(VkDevice, const VkQueryPoolCreateInfo *, const VkAllocationCallbacks *, VkQueryPool *);
     VkResult (*p_vkCreateRayTracingPipelinesKHR)(VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint32_t, const VkRayTracingPipelineCreateInfoKHR_host *, const VkAllocationCallbacks *, VkPipeline *);
@@ -2015,6 +2044,7 @@ struct vulkan_device_funcs
     void (*p_vkDestroyPipeline)(VkDevice, VkPipeline, const VkAllocationCallbacks *);
     void (*p_vkDestroyPipelineCache)(VkDevice, VkPipelineCache, const VkAllocationCallbacks *);
     void (*p_vkDestroyPipelineLayout)(VkDevice, VkPipelineLayout, const VkAllocationCallbacks *);
+    void (*p_vkDestroyPrivateDataSlot)(VkDevice, VkPrivateDataSlot, const VkAllocationCallbacks *);
     void (*p_vkDestroyPrivateDataSlotEXT)(VkDevice, VkPrivateDataSlot, const VkAllocationCallbacks *);
     void (*p_vkDestroyQueryPool)(VkDevice, VkQueryPool, const VkAllocationCallbacks *);
     void (*p_vkDestroyRenderPass)(VkDevice, VkRenderPass, const VkAllocationCallbacks *);
@@ -2049,12 +2079,15 @@ struct vulkan_device_funcs
     void (*p_vkGetDescriptorSetLayoutSupport)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, VkDescriptorSetLayoutSupport *);
     void (*p_vkGetDescriptorSetLayoutSupportKHR)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, VkDescriptorSetLayoutSupport *);
     void (*p_vkGetDeviceAccelerationStructureCompatibilityKHR)(VkDevice, const VkAccelerationStructureVersionInfoKHR *, VkAccelerationStructureCompatibilityKHR *);
+    void (*p_vkGetDeviceBufferMemoryRequirements)(VkDevice, const VkDeviceBufferMemoryRequirements_host *, VkMemoryRequirements2_host *);
     void (*p_vkGetDeviceBufferMemoryRequirementsKHR)(VkDevice, const VkDeviceBufferMemoryRequirements_host *, VkMemoryRequirements2_host *);
     void (*p_vkGetDeviceGroupPeerMemoryFeatures)(VkDevice, uint32_t, uint32_t, uint32_t, VkPeerMemoryFeatureFlags *);
     void (*p_vkGetDeviceGroupPeerMemoryFeaturesKHR)(VkDevice, uint32_t, uint32_t, uint32_t, VkPeerMemoryFeatureFlags *);
     VkResult (*p_vkGetDeviceGroupPresentCapabilitiesKHR)(VkDevice, VkDeviceGroupPresentCapabilitiesKHR *);
     VkResult (*p_vkGetDeviceGroupSurfacePresentModesKHR)(VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR *);
+    void (*p_vkGetDeviceImageMemoryRequirements)(VkDevice, const VkDeviceImageMemoryRequirements *, VkMemoryRequirements2_host *);
     void (*p_vkGetDeviceImageMemoryRequirementsKHR)(VkDevice, const VkDeviceImageMemoryRequirements *, VkMemoryRequirements2_host *);
+    void (*p_vkGetDeviceImageSparseMemoryRequirements)(VkDevice, const VkDeviceImageMemoryRequirements *, uint32_t *, VkSparseImageMemoryRequirements2 *);
     void (*p_vkGetDeviceImageSparseMemoryRequirementsKHR)(VkDevice, const VkDeviceImageMemoryRequirements *, uint32_t *, VkSparseImageMemoryRequirements2 *);
     void (*p_vkGetDeviceMemoryCommitment)(VkDevice, VkDeviceMemory, VkDeviceSize *);
     uint64_t (*p_vkGetDeviceMemoryOpaqueCaptureAddress)(VkDevice, const VkDeviceMemoryOpaqueCaptureAddressInfo_host *);
@@ -2082,6 +2115,7 @@ struct vulkan_device_funcs
     VkResult (*p_vkGetPipelineExecutableInternalRepresentationsKHR)(VkDevice, const VkPipelineExecutableInfoKHR_host *, uint32_t *, VkPipelineExecutableInternalRepresentationKHR *);
     VkResult (*p_vkGetPipelineExecutablePropertiesKHR)(VkDevice, const VkPipelineInfoKHR_host *, uint32_t *, VkPipelineExecutablePropertiesKHR *);
     VkResult (*p_vkGetPipelineExecutableStatisticsKHR)(VkDevice, const VkPipelineExecutableInfoKHR_host *, uint32_t *, VkPipelineExecutableStatisticKHR *);
+    void (*p_vkGetPrivateData)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t *);
     void (*p_vkGetPrivateDataEXT)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t *);
     VkResult (*p_vkGetQueryPoolResults)(VkDevice, VkQueryPool, uint32_t, uint32_t, size_t, void *, VkDeviceSize, VkQueryResultFlags);
     void (*p_vkGetQueueCheckpointData2NV)(VkQueue, uint32_t *, VkCheckpointData2NV *);
@@ -2108,6 +2142,7 @@ struct vulkan_device_funcs
     VkResult (*p_vkQueuePresentKHR)(VkQueue, const VkPresentInfoKHR *);
     VkResult (*p_vkQueueSetPerformanceConfigurationINTEL)(VkQueue, VkPerformanceConfigurationINTEL);
     VkResult (*p_vkQueueSubmit)(VkQueue, uint32_t, const VkSubmitInfo *, VkFence);
+    VkResult (*p_vkQueueSubmit2)(VkQueue, uint32_t, const VkSubmitInfo2_host *, VkFence);
     VkResult (*p_vkQueueSubmit2KHR)(VkQueue, uint32_t, const VkSubmitInfo2_host *, VkFence);
     VkResult (*p_vkQueueWaitIdle)(VkQueue);
     VkResult (*p_vkReleasePerformanceConfigurationINTEL)(VkDevice, VkPerformanceConfigurationINTEL);
@@ -2123,6 +2158,7 @@ struct vulkan_device_funcs
     VkResult (*p_vkSetDebugUtilsObjectTagEXT)(VkDevice, const VkDebugUtilsObjectTagInfoEXT_host *);
     void (*p_vkSetDeviceMemoryPriorityEXT)(VkDevice, VkDeviceMemory, float);
     VkResult (*p_vkSetEvent)(VkDevice, VkEvent);
+    VkResult (*p_vkSetPrivateData)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t);
     VkResult (*p_vkSetPrivateDataEXT)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t);
     VkResult (*p_vkSignalSemaphore)(VkDevice, const VkSemaphoreSignalInfo_host *);
     VkResult (*p_vkSignalSemaphoreKHR)(VkDevice, const VkSemaphoreSignalInfo_host *);
@@ -2192,6 +2228,7 @@ struct vulkan_instance_funcs
     VkResult (*p_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkSurfaceFormatKHR *);
     VkResult (*p_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkPresentModeKHR *);
     VkResult (*p_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice, uint32_t, VkSurfaceKHR, VkBool32 *);
+    VkResult (*p_vkGetPhysicalDeviceToolProperties)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceToolProperties *);
     VkResult (*p_vkGetPhysicalDeviceToolPropertiesEXT)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceToolProperties *);
     VkBool32 (*p_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice, uint32_t);
 };
@@ -2220,6 +2257,7 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkCmdBeginRenderPass) \
     USE_VK_FUNC(vkCmdBeginRenderPass2) \
     USE_VK_FUNC(vkCmdBeginRenderPass2KHR) \
+    USE_VK_FUNC(vkCmdBeginRendering) \
     USE_VK_FUNC(vkCmdBeginRenderingKHR) \
     USE_VK_FUNC(vkCmdBeginTransformFeedbackEXT) \
     USE_VK_FUNC(vkCmdBindDescriptorSets) \
@@ -2230,8 +2268,10 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkCmdBindShadingRateImageNV) \
     USE_VK_FUNC(vkCmdBindTransformFeedbackBuffersEXT) \
     USE_VK_FUNC(vkCmdBindVertexBuffers) \
+    USE_VK_FUNC(vkCmdBindVertexBuffers2) \
     USE_VK_FUNC(vkCmdBindVertexBuffers2EXT) \
     USE_VK_FUNC(vkCmdBlitImage) \
+    USE_VK_FUNC(vkCmdBlitImage2) \
     USE_VK_FUNC(vkCmdBlitImage2KHR) \
     USE_VK_FUNC(vkCmdBuildAccelerationStructureNV) \
     USE_VK_FUNC(vkCmdBuildAccelerationStructuresIndirectKHR) \
@@ -2243,12 +2283,16 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkCmdCopyAccelerationStructureNV) \
     USE_VK_FUNC(vkCmdCopyAccelerationStructureToMemoryKHR) \
     USE_VK_FUNC(vkCmdCopyBuffer) \
+    USE_VK_FUNC(vkCmdCopyBuffer2) \
     USE_VK_FUNC(vkCmdCopyBuffer2KHR) \
     USE_VK_FUNC(vkCmdCopyBufferToImage) \
+    USE_VK_FUNC(vkCmdCopyBufferToImage2) \
     USE_VK_FUNC(vkCmdCopyBufferToImage2KHR) \
     USE_VK_FUNC(vkCmdCopyImage) \
+    USE_VK_FUNC(vkCmdCopyImage2) \
     USE_VK_FUNC(vkCmdCopyImage2KHR) \
     USE_VK_FUNC(vkCmdCopyImageToBuffer) \
+    USE_VK_FUNC(vkCmdCopyImageToBuffer2) \
     USE_VK_FUNC(vkCmdCopyImageToBuffer2KHR) \
     USE_VK_FUNC(vkCmdCopyMemoryToAccelerationStructureKHR) \
     USE_VK_FUNC(vkCmdCopyQueryPoolResults) \
@@ -2283,6 +2327,7 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkCmdEndRenderPass) \
     USE_VK_FUNC(vkCmdEndRenderPass2) \
     USE_VK_FUNC(vkCmdEndRenderPass2KHR) \
+    USE_VK_FUNC(vkCmdEndRendering) \
     USE_VK_FUNC(vkCmdEndRenderingKHR) \
     USE_VK_FUNC(vkCmdEndTransformFeedbackEXT) \
     USE_VK_FUNC(vkCmdExecuteCommands) \
@@ -2293,36 +2338,47 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkCmdNextSubpass2) \
     USE_VK_FUNC(vkCmdNextSubpass2KHR) \
     USE_VK_FUNC(vkCmdPipelineBarrier) \
+    USE_VK_FUNC(vkCmdPipelineBarrier2) \
     USE_VK_FUNC(vkCmdPipelineBarrier2KHR) \
     USE_VK_FUNC(vkCmdPreprocessGeneratedCommandsNV) \
     USE_VK_FUNC(vkCmdPushConstants) \
     USE_VK_FUNC(vkCmdPushDescriptorSetKHR) \
     USE_VK_FUNC(vkCmdPushDescriptorSetWithTemplateKHR) \
     USE_VK_FUNC(vkCmdResetEvent) \
+    USE_VK_FUNC(vkCmdResetEvent2) \
     USE_VK_FUNC(vkCmdResetEvent2KHR) \
     USE_VK_FUNC(vkCmdResetQueryPool) \
     USE_VK_FUNC(vkCmdResolveImage) \
+    USE_VK_FUNC(vkCmdResolveImage2) \
     USE_VK_FUNC(vkCmdResolveImage2KHR) \
     USE_VK_FUNC(vkCmdSetBlendConstants) \
     USE_VK_FUNC(vkCmdSetCheckpointNV) \
     USE_VK_FUNC(vkCmdSetCoarseSampleOrderNV) \
     USE_VK_FUNC(vkCmdSetColorWriteEnableEXT) \
+    USE_VK_FUNC(vkCmdSetCullMode) \
     USE_VK_FUNC(vkCmdSetCullModeEXT) \
     USE_VK_FUNC(vkCmdSetDepthBias) \
+    USE_VK_FUNC(vkCmdSetDepthBiasEnable) \
     USE_VK_FUNC(vkCmdSetDepthBiasEnableEXT) \
     USE_VK_FUNC(vkCmdSetDepthBounds) \
+    USE_VK_FUNC(vkCmdSetDepthBoundsTestEnable) \
     USE_VK_FUNC(vkCmdSetDepthBoundsTestEnableEXT) \
+    USE_VK_FUNC(vkCmdSetDepthCompareOp) \
     USE_VK_FUNC(vkCmdSetDepthCompareOpEXT) \
+    USE_VK_FUNC(vkCmdSetDepthTestEnable) \
     USE_VK_FUNC(vkCmdSetDepthTestEnableEXT) \
+    USE_VK_FUNC(vkCmdSetDepthWriteEnable) \
     USE_VK_FUNC(vkCmdSetDepthWriteEnableEXT) \
     USE_VK_FUNC(vkCmdSetDeviceMask) \
     USE_VK_FUNC(vkCmdSetDeviceMaskKHR) \
     USE_VK_FUNC(vkCmdSetDiscardRectangleEXT) \
     USE_VK_FUNC(vkCmdSetEvent) \
+    USE_VK_FUNC(vkCmdSetEvent2) \
     USE_VK_FUNC(vkCmdSetEvent2KHR) \
     USE_VK_FUNC(vkCmdSetExclusiveScissorNV) \
     USE_VK_FUNC(vkCmdSetFragmentShadingRateEnumNV) \
     USE_VK_FUNC(vkCmdSetFragmentShadingRateKHR) \
+    USE_VK_FUNC(vkCmdSetFrontFace) \
     USE_VK_FUNC(vkCmdSetFrontFaceEXT) \
     USE_VK_FUNC(vkCmdSetLineStippleEXT) \
     USE_VK_FUNC(vkCmdSetLineWidth) \
@@ -2331,22 +2387,29 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkCmdSetPerformanceMarkerINTEL) \
     USE_VK_FUNC(vkCmdSetPerformanceOverrideINTEL) \
     USE_VK_FUNC(vkCmdSetPerformanceStreamMarkerINTEL) \
+    USE_VK_FUNC(vkCmdSetPrimitiveRestartEnable) \
     USE_VK_FUNC(vkCmdSetPrimitiveRestartEnableEXT) \
+    USE_VK_FUNC(vkCmdSetPrimitiveTopology) \
     USE_VK_FUNC(vkCmdSetPrimitiveTopologyEXT) \
+    USE_VK_FUNC(vkCmdSetRasterizerDiscardEnable) \
     USE_VK_FUNC(vkCmdSetRasterizerDiscardEnableEXT) \
     USE_VK_FUNC(vkCmdSetRayTracingPipelineStackSizeKHR) \
     USE_VK_FUNC(vkCmdSetSampleLocationsEXT) \
     USE_VK_FUNC(vkCmdSetScissor) \
+    USE_VK_FUNC(vkCmdSetScissorWithCount) \
     USE_VK_FUNC(vkCmdSetScissorWithCountEXT) \
     USE_VK_FUNC(vkCmdSetStencilCompareMask) \
+    USE_VK_FUNC(vkCmdSetStencilOp) \
     USE_VK_FUNC(vkCmdSetStencilOpEXT) \
     USE_VK_FUNC(vkCmdSetStencilReference) \
+    USE_VK_FUNC(vkCmdSetStencilTestEnable) \
     USE_VK_FUNC(vkCmdSetStencilTestEnableEXT) \
     USE_VK_FUNC(vkCmdSetStencilWriteMask) \
     USE_VK_FUNC(vkCmdSetVertexInputEXT) \
     USE_VK_FUNC(vkCmdSetViewport) \
     USE_VK_FUNC(vkCmdSetViewportShadingRatePaletteNV) \
     USE_VK_FUNC(vkCmdSetViewportWScalingNV) \
+    USE_VK_FUNC(vkCmdSetViewportWithCount) \
     USE_VK_FUNC(vkCmdSetViewportWithCountEXT) \
     USE_VK_FUNC(vkCmdSubpassShadingHUAWEI) \
     USE_VK_FUNC(vkCmdTraceRaysIndirectKHR) \
@@ -2354,12 +2417,14 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkCmdTraceRaysNV) \
     USE_VK_FUNC(vkCmdUpdateBuffer) \
     USE_VK_FUNC(vkCmdWaitEvents) \
+    USE_VK_FUNC(vkCmdWaitEvents2) \
     USE_VK_FUNC(vkCmdWaitEvents2KHR) \
     USE_VK_FUNC(vkCmdWriteAccelerationStructuresPropertiesKHR) \
     USE_VK_FUNC(vkCmdWriteAccelerationStructuresPropertiesNV) \
     USE_VK_FUNC(vkCmdWriteBufferMarker2AMD) \
     USE_VK_FUNC(vkCmdWriteBufferMarkerAMD) \
     USE_VK_FUNC(vkCmdWriteTimestamp) \
+    USE_VK_FUNC(vkCmdWriteTimestamp2) \
     USE_VK_FUNC(vkCmdWriteTimestamp2KHR) \
     USE_VK_FUNC(vkCompileDeferredNV) \
     USE_VK_FUNC(vkCopyAccelerationStructureKHR) \
@@ -2387,6 +2452,7 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkCreateIndirectCommandsLayoutNV) \
     USE_VK_FUNC(vkCreatePipelineCache) \
     USE_VK_FUNC(vkCreatePipelineLayout) \
+    USE_VK_FUNC(vkCreatePrivateDataSlot) \
     USE_VK_FUNC(vkCreatePrivateDataSlotEXT) \
     USE_VK_FUNC(vkCreateQueryPool) \
     USE_VK_FUNC(vkCreateRayTracingPipelinesKHR) \
@@ -2426,6 +2492,7 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkDestroyPipeline) \
     USE_VK_FUNC(vkDestroyPipelineCache) \
     USE_VK_FUNC(vkDestroyPipelineLayout) \
+    USE_VK_FUNC(vkDestroyPrivateDataSlot) \
     USE_VK_FUNC(vkDestroyPrivateDataSlotEXT) \
     USE_VK_FUNC(vkDestroyQueryPool) \
     USE_VK_FUNC(vkDestroyRenderPass) \
@@ -2460,12 +2527,15 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkGetDescriptorSetLayoutSupport) \
     USE_VK_FUNC(vkGetDescriptorSetLayoutSupportKHR) \
     USE_VK_FUNC(vkGetDeviceAccelerationStructureCompatibilityKHR) \
+    USE_VK_FUNC(vkGetDeviceBufferMemoryRequirements) \
     USE_VK_FUNC(vkGetDeviceBufferMemoryRequirementsKHR) \
     USE_VK_FUNC(vkGetDeviceGroupPeerMemoryFeatures) \
     USE_VK_FUNC(vkGetDeviceGroupPeerMemoryFeaturesKHR) \
     USE_VK_FUNC(vkGetDeviceGroupPresentCapabilitiesKHR) \
     USE_VK_FUNC(vkGetDeviceGroupSurfacePresentModesKHR) \
+    USE_VK_FUNC(vkGetDeviceImageMemoryRequirements) \
     USE_VK_FUNC(vkGetDeviceImageMemoryRequirementsKHR) \
+    USE_VK_FUNC(vkGetDeviceImageSparseMemoryRequirements) \
     USE_VK_FUNC(vkGetDeviceImageSparseMemoryRequirementsKHR) \
     USE_VK_FUNC(vkGetDeviceMemoryCommitment) \
     USE_VK_FUNC(vkGetDeviceMemoryOpaqueCaptureAddress) \
@@ -2493,6 +2563,7 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkGetPipelineExecutableInternalRepresentationsKHR) \
     USE_VK_FUNC(vkGetPipelineExecutablePropertiesKHR) \
     USE_VK_FUNC(vkGetPipelineExecutableStatisticsKHR) \
+    USE_VK_FUNC(vkGetPrivateData) \
     USE_VK_FUNC(vkGetPrivateDataEXT) \
     USE_VK_FUNC(vkGetQueryPoolResults) \
     USE_VK_FUNC(vkGetQueueCheckpointData2NV) \
@@ -2519,6 +2590,7 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkQueuePresentKHR) \
     USE_VK_FUNC(vkQueueSetPerformanceConfigurationINTEL) \
     USE_VK_FUNC(vkQueueSubmit) \
+    USE_VK_FUNC(vkQueueSubmit2) \
     USE_VK_FUNC(vkQueueSubmit2KHR) \
     USE_VK_FUNC(vkQueueWaitIdle) \
     USE_VK_FUNC(vkReleasePerformanceConfigurationINTEL) \
@@ -2534,6 +2606,7 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkSetDebugUtilsObjectTagEXT) \
     USE_VK_FUNC(vkSetDeviceMemoryPriorityEXT) \
     USE_VK_FUNC(vkSetEvent) \
+    USE_VK_FUNC(vkSetPrivateData) \
     USE_VK_FUNC(vkSetPrivateDataEXT) \
     USE_VK_FUNC(vkSignalSemaphore) \
     USE_VK_FUNC(vkSignalSemaphoreKHR) \
@@ -2600,6 +2673,7 @@ struct vulkan_instance_funcs
     USE_VK_FUNC(vkGetPhysicalDeviceSurfaceFormatsKHR) \
     USE_VK_FUNC(vkGetPhysicalDeviceSurfacePresentModesKHR) \
     USE_VK_FUNC(vkGetPhysicalDeviceSurfaceSupportKHR) \
+    USE_VK_FUNC(vkGetPhysicalDeviceToolProperties) \
     USE_VK_FUNC(vkGetPhysicalDeviceToolPropertiesEXT) \
     USE_VK_FUNC(vkGetPhysicalDeviceWin32PresentationSupportKHR)
 
diff --git a/dlls/winevulkan/winevulkan.spec b/dlls/winevulkan/winevulkan.spec
index 0183bac75ff..dceb3037700 100644
--- a/dlls/winevulkan/winevulkan.spec
+++ b/dlls/winevulkan/winevulkan.spec
@@ -24,25 +24,25 @@
 @ stdcall vkCmdBeginQuery(ptr int64 long long)
 @ stdcall vkCmdBeginRenderPass(ptr ptr long)
 @ stdcall vkCmdBeginRenderPass2(ptr ptr ptr)
-@ stub vkCmdBeginRendering
+@ stdcall vkCmdBeginRendering(ptr ptr)
 @ stdcall vkCmdBindDescriptorSets(ptr long int64 long long ptr long ptr)
 @ stdcall vkCmdBindIndexBuffer(ptr int64 int64 long)
 @ stdcall vkCmdBindPipeline(ptr long int64)
 @ stdcall vkCmdBindVertexBuffers(ptr long long ptr ptr)
-@ stub vkCmdBindVertexBuffers2
+@ stdcall vkCmdBindVertexBuffers2(ptr long long ptr ptr ptr ptr)
 @ stdcall vkCmdBlitImage(ptr int64 long int64 long long ptr long)
-@ stub vkCmdBlitImage2
+@ stdcall vkCmdBlitImage2(ptr ptr)
 @ stdcall vkCmdClearAttachments(ptr long ptr long ptr)
 @ stdcall vkCmdClearColorImage(ptr int64 long ptr long ptr)
 @ stdcall vkCmdClearDepthStencilImage(ptr int64 long ptr long ptr)
 @ stdcall vkCmdCopyBuffer(ptr int64 int64 long ptr)
-@ stub vkCmdCopyBuffer2
+@ stdcall vkCmdCopyBuffer2(ptr ptr)
 @ stdcall vkCmdCopyBufferToImage(ptr int64 int64 long long ptr)
-@ stub vkCmdCopyBufferToImage2
+@ stdcall vkCmdCopyBufferToImage2(ptr ptr)
 @ stdcall vkCmdCopyImage(ptr int64 long int64 long long ptr)
-@ stub vkCmdCopyImage2
+@ stdcall vkCmdCopyImage2(ptr ptr)
 @ stdcall vkCmdCopyImageToBuffer(ptr int64 long int64 long ptr)
-@ stub vkCmdCopyImageToBuffer2
+@ stdcall vkCmdCopyImageToBuffer2(ptr ptr)
 @ stdcall vkCmdCopyQueryPoolResults(ptr int64 long long int64 int64 int64 long)
 @ stdcall vkCmdDispatch(ptr long long long)
 @ stdcall vkCmdDispatchBase(ptr long long long long long long)
@@ -56,50 +56,50 @@
 @ stdcall vkCmdEndQuery(ptr int64 long)
 @ stdcall vkCmdEndRenderPass(ptr)
 @ stdcall vkCmdEndRenderPass2(ptr ptr)
-@ stub vkCmdEndRendering
+@ stdcall vkCmdEndRendering(ptr)
 @ stdcall vkCmdExecuteCommands(ptr long ptr)
 @ stdcall vkCmdFillBuffer(ptr int64 int64 int64 long)
 @ stdcall vkCmdNextSubpass(ptr long)
 @ stdcall vkCmdNextSubpass2(ptr ptr ptr)
 @ stdcall vkCmdPipelineBarrier(ptr long long long long ptr long ptr long ptr)
-@ stub vkCmdPipelineBarrier2
+@ stdcall vkCmdPipelineBarrier2(ptr ptr)
 @ stdcall vkCmdPushConstants(ptr int64 long long long ptr)
 @ stdcall vkCmdResetEvent(ptr int64 long)
-@ stub vkCmdResetEvent2
+@ stdcall vkCmdResetEvent2(ptr int64 int64)
 @ stdcall vkCmdResetQueryPool(ptr int64 long long)
 @ stdcall vkCmdResolveImage(ptr int64 long int64 long long ptr)
-@ stub vkCmdResolveImage2
+@ stdcall vkCmdResolveImage2(ptr ptr)
 @ stdcall vkCmdSetBlendConstants(ptr ptr)
-@ stub vkCmdSetCullMode
+@ stdcall vkCmdSetCullMode(ptr long)
 @ stdcall vkCmdSetDepthBias(ptr float float float)
-@ stub vkCmdSetDepthBiasEnable
+@ stdcall vkCmdSetDepthBiasEnable(ptr long)
 @ stdcall vkCmdSetDepthBounds(ptr float float)
-@ stub vkCmdSetDepthBoundsTestEnable
-@ stub vkCmdSetDepthCompareOp
-@ stub vkCmdSetDepthTestEnable
-@ stub vkCmdSetDepthWriteEnable
+@ stdcall vkCmdSetDepthBoundsTestEnable(ptr long)
+@ stdcall vkCmdSetDepthCompareOp(ptr long)
+@ stdcall vkCmdSetDepthTestEnable(ptr long)
+@ stdcall vkCmdSetDepthWriteEnable(ptr long)
 @ stdcall vkCmdSetDeviceMask(ptr long)
 @ stdcall vkCmdSetEvent(ptr int64 long)
-@ stub vkCmdSetEvent2
-@ stub vkCmdSetFrontFace
+@ stdcall vkCmdSetEvent2(ptr int64 ptr)
+@ stdcall vkCmdSetFrontFace(ptr long)
 @ stdcall vkCmdSetLineWidth(ptr float)
-@ stub vkCmdSetPrimitiveRestartEnable
-@ stub vkCmdSetPrimitiveTopology
-@ stub vkCmdSetRasterizerDiscardEnable
+@ stdcall vkCmdSetPrimitiveRestartEnable(ptr long)
+@ stdcall vkCmdSetPrimitiveTopology(ptr long)
+@ stdcall vkCmdSetRasterizerDiscardEnable(ptr long)
 @ stdcall vkCmdSetScissor(ptr long long ptr)
-@ stub vkCmdSetScissorWithCount
+@ stdcall vkCmdSetScissorWithCount(ptr long ptr)
 @ stdcall vkCmdSetStencilCompareMask(ptr long long)
-@ stub vkCmdSetStencilOp
+@ stdcall vkCmdSetStencilOp(ptr long long long long long)
 @ stdcall vkCmdSetStencilReference(ptr long long)
-@ stub vkCmdSetStencilTestEnable
+@ stdcall vkCmdSetStencilTestEnable(ptr long)
 @ stdcall vkCmdSetStencilWriteMask(ptr long long)
 @ stdcall vkCmdSetViewport(ptr long long ptr)
-@ stub vkCmdSetViewportWithCount
+@ stdcall vkCmdSetViewportWithCount(ptr long ptr)
 @ stdcall vkCmdUpdateBuffer(ptr int64 int64 int64 ptr)
 @ stdcall vkCmdWaitEvents(ptr long ptr long long long ptr long ptr long ptr)
-@ stub vkCmdWaitEvents2
+@ stdcall vkCmdWaitEvents2(ptr long ptr ptr)
 @ stdcall vkCmdWriteTimestamp(ptr long int64 long)
-@ stub vkCmdWriteTimestamp2
+@ stdcall vkCmdWriteTimestamp2(ptr int64 int64 long)
 @ stdcall vkCreateBuffer(ptr ptr ptr ptr)
 @ stdcall vkCreateBufferView(ptr ptr ptr ptr)
 @ stdcall vkCreateCommandPool(ptr ptr ptr ptr)
@@ -119,7 +119,7 @@
 @ stdcall vkCreateInstance(ptr ptr ptr)
 @ stdcall vkCreatePipelineCache(ptr ptr ptr ptr)
 @ stdcall vkCreatePipelineLayout(ptr ptr ptr ptr)
-@ stub vkCreatePrivateDataSlot
+@ stdcall vkCreatePrivateDataSlot(ptr ptr ptr ptr)
 @ stdcall vkCreateQueryPool(ptr ptr ptr ptr)
 @ stdcall vkCreateRenderPass(ptr ptr ptr ptr)
 @ stdcall vkCreateRenderPass2(ptr ptr ptr ptr)
@@ -146,7 +146,7 @@
 @ stdcall vkDestroyPipeline(ptr int64 ptr)
 @ stdcall vkDestroyPipelineCache(ptr int64 ptr)
 @ stdcall vkDestroyPipelineLayout(ptr int64 ptr)
-@ stub vkDestroyPrivateDataSlot
+@ stdcall vkDestroyPrivateDataSlot(ptr int64 ptr)
 @ stdcall vkDestroyQueryPool(ptr int64 ptr)
 @ stdcall vkDestroyRenderPass(ptr int64 ptr)
 @ stdcall vkDestroySampler(ptr int64 ptr)
@@ -173,12 +173,12 @@
 @ stdcall vkGetBufferMemoryRequirements2(ptr ptr ptr)
 @ stdcall vkGetBufferOpaqueCaptureAddress(ptr ptr)
 @ stdcall vkGetDescriptorSetLayoutSupport(ptr ptr ptr)
-@ stub vkGetDeviceBufferMemoryRequirements
+@ stdcall vkGetDeviceBufferMemoryRequirements(ptr ptr ptr)
 @ stdcall vkGetDeviceGroupPeerMemoryFeatures(ptr long long long ptr)
 @ stdcall vkGetDeviceGroupPresentCapabilitiesKHR(ptr ptr)
 @ stdcall vkGetDeviceGroupSurfacePresentModesKHR(ptr int64 ptr)
-@ stub vkGetDeviceImageMemoryRequirements
-@ stub vkGetDeviceImageSparseMemoryRequirements
+@ stdcall vkGetDeviceImageMemoryRequirements(ptr ptr ptr)
+@ stdcall vkGetDeviceImageSparseMemoryRequirements(ptr ptr ptr ptr)
 @ stdcall vkGetDeviceMemoryCommitment(ptr int64 ptr)
 @ stdcall vkGetDeviceMemoryOpaqueCaptureAddress(ptr ptr)
 @ stdcall vkGetDeviceProcAddr(ptr str)
@@ -221,10 +221,10 @@
 @ stdcall vkGetPhysicalDeviceSurfaceFormatsKHR(ptr int64 ptr ptr)
 @ stdcall vkGetPhysicalDeviceSurfacePresentModesKHR(ptr int64 ptr ptr)
 @ stdcall vkGetPhysicalDeviceSurfaceSupportKHR(ptr long int64 ptr)
-@ stub vkGetPhysicalDeviceToolProperties
+@ stdcall vkGetPhysicalDeviceToolProperties(ptr ptr ptr)
 @ stdcall vkGetPhysicalDeviceWin32PresentationSupportKHR(ptr long)
 @ stdcall vkGetPipelineCacheData(ptr int64 ptr ptr)
-@ stub vkGetPrivateData
+@ stdcall vkGetPrivateData(ptr long int64 int64 ptr)
 @ stdcall vkGetQueryPoolResults(ptr int64 long long long ptr int64 long)
 @ stdcall vkGetRenderAreaGranularity(ptr int64 ptr)
 @ stdcall vkGetSemaphoreCounterValue(ptr int64 ptr)
@@ -235,7 +235,7 @@
 @ stdcall vkQueueBindSparse(ptr long ptr int64)
 @ stdcall vkQueuePresentKHR(ptr ptr)
 @ stdcall vkQueueSubmit(ptr long ptr int64)
-@ stub vkQueueSubmit2
+@ stdcall vkQueueSubmit2(ptr long ptr int64)
 @ stdcall vkQueueWaitIdle(ptr)
 @ stdcall vkResetCommandBuffer(ptr long)
 @ stdcall vkResetCommandPool(ptr int64 long)
@@ -244,7 +244,7 @@
 @ stdcall vkResetFences(ptr long ptr)
 @ stdcall vkResetQueryPool(ptr int64 long long)
 @ stdcall vkSetEvent(ptr int64)
-@ stub vkSetPrivateData
+@ stdcall vkSetPrivateData(ptr long int64 int64 int64)
 @ stdcall vkSignalSemaphore(ptr ptr)
 @ stdcall vkTrimCommandPool(ptr int64 long)
 @ stdcall vkUnmapMemory(ptr int64)
diff --git a/include/wine/vulkan.h b/include/wine/vulkan.h
index 7c6ec02cf30..a89e8ebf9fb 100644
--- a/include/wine/vulkan.h
+++ b/include/wine/vulkan.h
@@ -9922,6 +9922,7 @@ typedef void (VKAPI_PTR *PFN_vkCmdBeginQueryIndexedEXT)(VkCommandBuffer, VkQuery
 typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass)(VkCommandBuffer, const VkRenderPassBeginInfo *, VkSubpassContents);
 typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass2)(VkCommandBuffer, const VkRenderPassBeginInfo *, const VkSubpassBeginInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass2KHR)(VkCommandBuffer, const VkRenderPassBeginInfo *, const VkSubpassBeginInfo *);
+typedef void (VKAPI_PTR *PFN_vkCmdBeginRendering)(VkCommandBuffer, const VkRenderingInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderingKHR)(VkCommandBuffer, const VkRenderingInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdBeginTransformFeedbackEXT)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *);
 typedef void (VKAPI_PTR *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkDescriptorSet *, uint32_t, const uint32_t *);
@@ -9932,8 +9933,10 @@ typedef void (VKAPI_PTR *PFN_vkCmdBindPipelineShaderGroupNV)(VkCommandBuffer, Vk
 typedef void (VKAPI_PTR *PFN_vkCmdBindShadingRateImageNV)(VkCommandBuffer, VkImageView, VkImageLayout);
 typedef void (VKAPI_PTR *PFN_vkCmdBindTransformFeedbackBuffersEXT)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *);
 typedef void (VKAPI_PTR *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *);
+typedef void (VKAPI_PTR *PFN_vkCmdBindVertexBuffers2)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *, const VkDeviceSize *);
 typedef void (VKAPI_PTR *PFN_vkCmdBindVertexBuffers2EXT)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *, const VkDeviceSize *);
 typedef void (VKAPI_PTR *PFN_vkCmdBlitImage)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageBlit *, VkFilter);
+typedef void (VKAPI_PTR *PFN_vkCmdBlitImage2)(VkCommandBuffer, const VkBlitImageInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdBlitImage2KHR)(VkCommandBuffer, const VkBlitImageInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdBuildAccelerationStructureNV)(VkCommandBuffer, const VkAccelerationStructureInfoNV *, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize);
 typedef void (VKAPI_PTR *PFN_vkCmdBuildAccelerationStructuresIndirectKHR)(VkCommandBuffer, uint32_t, const VkAccelerationStructureBuildGeometryInfoKHR *, const VkDeviceAddress *, const uint32_t *, const uint32_t * const*);
@@ -9945,12 +9948,16 @@ typedef void (VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureKHR)(VkCommandBuffer,
 typedef void (VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureNV)(VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureToMemoryKHR)(VkCommandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyBuffer)(VkCommandBuffer, VkBuffer, VkBuffer, uint32_t, const VkBufferCopy *);
+typedef void (VKAPI_PTR *PFN_vkCmdCopyBuffer2)(VkCommandBuffer, const VkCopyBufferInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyBuffer2KHR)(VkCommandBuffer, const VkCopyBufferInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint32_t, const VkBufferImageCopy *);
+typedef void (VKAPI_PTR *PFN_vkCmdCopyBufferToImage2)(VkCommandBuffer, const VkCopyBufferToImageInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyBufferToImage2KHR)(VkCommandBuffer, const VkCopyBufferToImageInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyImage)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageCopy *);
+typedef void (VKAPI_PTR *PFN_vkCmdCopyImage2)(VkCommandBuffer, const VkCopyImageInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyImage2KHR)(VkCommandBuffer, const VkCopyImageInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint32_t, const VkBufferImageCopy *);
+typedef void (VKAPI_PTR *PFN_vkCmdCopyImageToBuffer2)(VkCommandBuffer, const VkCopyImageToBufferInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyImageToBuffer2KHR)(VkCommandBuffer, const VkCopyImageToBufferInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyMemoryToAccelerationStructureKHR)(VkCommandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR *);
 typedef void (VKAPI_PTR *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags);
@@ -9985,6 +9992,7 @@ typedef void (VKAPI_PTR *PFN_vkCmdEndQueryIndexedEXT)(VkCommandBuffer, VkQueryPo
 typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass)(VkCommandBuffer);
 typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass2)(VkCommandBuffer, const VkSubpassEndInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass2KHR)(VkCommandBuffer, const VkSubpassEndInfo *);
+typedef void (VKAPI_PTR *PFN_vkCmdEndRendering)(VkCommandBuffer);
 typedef void (VKAPI_PTR *PFN_vkCmdEndRenderingKHR)(VkCommandBuffer);
 typedef void (VKAPI_PTR *PFN_vkCmdEndTransformFeedbackEXT)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *);
 typedef void (VKAPI_PTR *PFN_vkCmdExecuteCommands)(VkCommandBuffer, uint32_t, const VkCommandBuffer *);
@@ -9995,36 +10003,47 @@ typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass)(VkCommandBuffer, VkSubpassContent
 typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass2)(VkCommandBuffer, const VkSubpassBeginInfo *, const VkSubpassEndInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass2KHR)(VkCommandBuffer, const VkSubpassBeginInfo *, const VkSubpassEndInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint32_t, const VkMemoryBarrier *, uint32_t, const VkBufferMemoryBarrier *, uint32_t, const VkImageMemoryBarrier *);
+typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier2)(VkCommandBuffer, const VkDependencyInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier2KHR)(VkCommandBuffer, const VkDependencyInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdPreprocessGeneratedCommandsNV)(VkCommandBuffer, const VkGeneratedCommandsInfoNV *);
 typedef void (VKAPI_PTR *PFN_vkCmdPushConstants)(VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint32_t, uint32_t, const void *);
 typedef void (VKAPI_PTR *PFN_vkCmdPushDescriptorSetKHR)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkWriteDescriptorSet *);
 typedef void (VKAPI_PTR *PFN_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint32_t, const void *);
 typedef void (VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer, VkEvent, VkPipelineStageFlags);
+typedef void (VKAPI_PTR *PFN_vkCmdResetEvent2)(VkCommandBuffer, VkEvent, VkPipelineStageFlags2);
 typedef void (VKAPI_PTR *PFN_vkCmdResetEvent2KHR)(VkCommandBuffer, VkEvent, VkPipelineStageFlags2);
 typedef void (VKAPI_PTR *PFN_vkCmdResetQueryPool)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdResolveImage)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageResolve *);
+typedef void (VKAPI_PTR *PFN_vkCmdResolveImage2)(VkCommandBuffer, const VkResolveImageInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdResolveImage2KHR)(VkCommandBuffer, const VkResolveImageInfo2 *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetBlendConstants)(VkCommandBuffer, const float[4]);
 typedef void (VKAPI_PTR *PFN_vkCmdSetCheckpointNV)(VkCommandBuffer, const void *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetCoarseSampleOrderNV)(VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint32_t, const VkCoarseSampleOrderCustomNV *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetColorWriteEnableEXT)(VkCommandBuffer, uint32_t, const VkBool32 *);
+typedef void (VKAPI_PTR *PFN_vkCmdSetCullMode)(VkCommandBuffer, VkCullModeFlags);
 typedef void (VKAPI_PTR *PFN_vkCmdSetCullModeEXT)(VkCommandBuffer, VkCullModeFlags);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBias)(VkCommandBuffer, float, float, float);
+typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBiasEnable)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBiasEnableEXT)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBounds)(VkCommandBuffer, float, float);
+typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBoundsTestEnable)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBoundsTestEnableEXT)(VkCommandBuffer, VkBool32);
+typedef void (VKAPI_PTR *PFN_vkCmdSetDepthCompareOp)(VkCommandBuffer, VkCompareOp);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDepthCompareOpEXT)(VkCommandBuffer, VkCompareOp);
+typedef void (VKAPI_PTR *PFN_vkCmdSetDepthTestEnable)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDepthTestEnableEXT)(VkCommandBuffer, VkBool32);
+typedef void (VKAPI_PTR *PFN_vkCmdSetDepthWriteEnable)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDepthWriteEnableEXT)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDeviceMask)(VkCommandBuffer, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDeviceMaskKHR)(VkCommandBuffer, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer, VkEvent, VkPipelineStageFlags);
+typedef void (VKAPI_PTR *PFN_vkCmdSetEvent2)(VkCommandBuffer, VkEvent, const VkDependencyInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetEvent2KHR)(VkCommandBuffer, VkEvent, const VkDependencyInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetExclusiveScissorNV)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetFragmentShadingRateEnumNV)(VkCommandBuffer, VkFragmentShadingRateNV, const VkFragmentShadingRateCombinerOpKHR[2]);
 typedef void (VKAPI_PTR *PFN_vkCmdSetFragmentShadingRateKHR)(VkCommandBuffer, const VkExtent2D *, const VkFragmentShadingRateCombinerOpKHR[2]);
+typedef void (VKAPI_PTR *PFN_vkCmdSetFrontFace)(VkCommandBuffer, VkFrontFace);
 typedef void (VKAPI_PTR *PFN_vkCmdSetFrontFaceEXT)(VkCommandBuffer, VkFrontFace);
 typedef void (VKAPI_PTR *PFN_vkCmdSetLineStippleEXT)(VkCommandBuffer, uint32_t, uint16_t);
 typedef void (VKAPI_PTR *PFN_vkCmdSetLineWidth)(VkCommandBuffer, float);
@@ -10033,22 +10052,29 @@ typedef void (VKAPI_PTR *PFN_vkCmdSetPatchControlPointsEXT)(VkCommandBuffer, uin
 typedef VkResult (VKAPI_PTR *PFN_vkCmdSetPerformanceMarkerINTEL)(VkCommandBuffer, const VkPerformanceMarkerInfoINTEL *);
 typedef VkResult (VKAPI_PTR *PFN_vkCmdSetPerformanceOverrideINTEL)(VkCommandBuffer, const VkPerformanceOverrideInfoINTEL *);
 typedef VkResult (VKAPI_PTR *PFN_vkCmdSetPerformanceStreamMarkerINTEL)(VkCommandBuffer, const VkPerformanceStreamMarkerInfoINTEL *);
+typedef void (VKAPI_PTR *PFN_vkCmdSetPrimitiveRestartEnable)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetPrimitiveRestartEnableEXT)(VkCommandBuffer, VkBool32);
+typedef void (VKAPI_PTR *PFN_vkCmdSetPrimitiveTopology)(VkCommandBuffer, VkPrimitiveTopology);
 typedef void (VKAPI_PTR *PFN_vkCmdSetPrimitiveTopologyEXT)(VkCommandBuffer, VkPrimitiveTopology);
+typedef void (VKAPI_PTR *PFN_vkCmdSetRasterizerDiscardEnable)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetRasterizerDiscardEnableEXT)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetRayTracingPipelineStackSizeKHR)(VkCommandBuffer, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdSetSampleLocationsEXT)(VkCommandBuffer, const VkSampleLocationsInfoEXT *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetScissor)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *);
+typedef void (VKAPI_PTR *PFN_vkCmdSetScissorWithCount)(VkCommandBuffer, uint32_t, const VkRect2D *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetScissorWithCountEXT)(VkCommandBuffer, uint32_t, const VkRect2D *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer, VkStencilFaceFlags, uint32_t);
+typedef void (VKAPI_PTR *PFN_vkCmdSetStencilOp)(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp);
 typedef void (VKAPI_PTR *PFN_vkCmdSetStencilOpEXT)(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp);
 typedef void (VKAPI_PTR *PFN_vkCmdSetStencilReference)(VkCommandBuffer, VkStencilFaceFlags, uint32_t);
+typedef void (VKAPI_PTR *PFN_vkCmdSetStencilTestEnable)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetStencilTestEnableEXT)(VkCommandBuffer, VkBool32);
 typedef void (VKAPI_PTR *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer, VkStencilFaceFlags, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdSetVertexInputEXT)(VkCommandBuffer, uint32_t, const VkVertexInputBindingDescription2EXT *, uint32_t, const VkVertexInputAttributeDescription2EXT *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetViewport)(VkCommandBuffer, uint32_t, uint32_t, const VkViewport *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetViewportShadingRatePaletteNV)(VkCommandBuffer, uint32_t, uint32_t, const VkShadingRatePaletteNV *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetViewportWScalingNV)(VkCommandBuffer, uint32_t, uint32_t, const VkViewportWScalingNV *);
+typedef void (VKAPI_PTR *PFN_vkCmdSetViewportWithCount)(VkCommandBuffer, uint32_t, const VkViewport *);
 typedef void (VKAPI_PTR *PFN_vkCmdSetViewportWithCountEXT)(VkCommandBuffer, uint32_t, const VkViewport *);
 typedef void (VKAPI_PTR *PFN_vkCmdSubpassShadingHUAWEI)(VkCommandBuffer);
 typedef void (VKAPI_PTR *PFN_vkCmdTraceRaysIndirectKHR)(VkCommandBuffer, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, VkDeviceAddress);
@@ -10056,12 +10082,14 @@ typedef void (VKAPI_PTR *PFN_vkCmdTraceRaysKHR)(VkCommandBuffer, const VkStrided
 typedef void (VKAPI_PTR *PFN_vkCmdTraceRaysNV)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t, uint32_t, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdUpdateBuffer)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, const void *);
 typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer, uint32_t, const VkEvent *, VkPipelineStageFlags, VkPipelineStageFlags, uint32_t, const VkMemoryBarrier *, uint32_t, const VkBufferMemoryBarrier *, uint32_t, const VkImageMemoryBarrier *);
+typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents2)(VkCommandBuffer, uint32_t, const VkEvent *, const VkDependencyInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents2KHR)(VkCommandBuffer, uint32_t, const VkEvent *, const VkDependencyInfo *);
 typedef void (VKAPI_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)(VkCommandBuffer, uint32_t, const VkAccelerationStructureKHR *, VkQueryType, VkQueryPool, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesNV)(VkCommandBuffer, uint32_t, const VkAccelerationStructureNV *, VkQueryType, VkQueryPool, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdWriteBufferMarker2AMD)(VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdWriteBufferMarkerAMD)(VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdWriteTimestamp)(VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint32_t);
+typedef void (VKAPI_PTR *PFN_vkCmdWriteTimestamp2)(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t);
 typedef void (VKAPI_PTR *PFN_vkCmdWriteTimestamp2KHR)(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t);
 typedef VkResult (VKAPI_PTR *PFN_vkCompileDeferredNV)(VkDevice, VkPipeline, uint32_t);
 typedef VkResult (VKAPI_PTR *PFN_vkCopyAccelerationStructureKHR)(VkDevice, VkDeferredOperationKHR, const VkCopyAccelerationStructureInfoKHR *);
@@ -10093,6 +10121,7 @@ typedef VkResult (VKAPI_PTR *PFN_vkCreateIndirectCommandsLayoutNV)(VkDevice, con
 typedef VkResult (VKAPI_PTR *PFN_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *, VkInstance *);
 typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineCache)(VkDevice, const VkPipelineCacheCreateInfo *, const VkAllocationCallbacks *, VkPipelineCache *);
 typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineLayout)(VkDevice, const VkPipelineLayoutCreateInfo *, const VkAllocationCallbacks *, VkPipelineLayout *);
+typedef VkResult (VKAPI_PTR *PFN_vkCreatePrivateDataSlot)(VkDevice, const VkPrivateDataSlotCreateInfo *, const VkAllocationCallbacks *, VkPrivateDataSlot *);
 typedef VkResult (VKAPI_PTR *PFN_vkCreatePrivateDataSlotEXT)(VkDevice, const VkPrivateDataSlotCreateInfo *, const VkAllocationCallbacks *, VkPrivateDataSlot *);
 typedef VkResult (VKAPI_PTR *PFN_vkCreateQueryPool)(VkDevice, const VkQueryPoolCreateInfo *, const VkAllocationCallbacks *, VkQueryPool *);
 typedef VkResult (VKAPI_PTR *PFN_vkCreateRayTracingPipelinesKHR)(VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint32_t, const VkRayTracingPipelineCreateInfoKHR *, const VkAllocationCallbacks *, VkPipeline *);
@@ -10137,6 +10166,7 @@ typedef void (VKAPI_PTR *PFN_vkDestroyInstance)(VkInstance, const VkAllocationCa
 typedef void (VKAPI_PTR *PFN_vkDestroyPipeline)(VkDevice, VkPipeline, const VkAllocationCallbacks *);
 typedef void (VKAPI_PTR *PFN_vkDestroyPipelineCache)(VkDevice, VkPipelineCache, const VkAllocationCallbacks *);
 typedef void (VKAPI_PTR *PFN_vkDestroyPipelineLayout)(VkDevice, VkPipelineLayout, const VkAllocationCallbacks *);
+typedef void (VKAPI_PTR *PFN_vkDestroyPrivateDataSlot)(VkDevice, VkPrivateDataSlot, const VkAllocationCallbacks *);
 typedef void (VKAPI_PTR *PFN_vkDestroyPrivateDataSlotEXT)(VkDevice, VkPrivateDataSlot, const VkAllocationCallbacks *);
 typedef void (VKAPI_PTR *PFN_vkDestroyQueryPool)(VkDevice, VkQueryPool, const VkAllocationCallbacks *);
 typedef void (VKAPI_PTR *PFN_vkDestroyRenderPass)(VkDevice, VkRenderPass, const VkAllocationCallbacks *);
@@ -10181,12 +10211,15 @@ typedef VkResult (VKAPI_PTR *PFN_vkGetDeferredOperationResultKHR)(VkDevice, VkDe
 typedef void (VKAPI_PTR *PFN_vkGetDescriptorSetLayoutSupport)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, VkDescriptorSetLayoutSupport *);
 typedef void (VKAPI_PTR *PFN_vkGetDescriptorSetLayoutSupportKHR)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, VkDescriptorSetLayoutSupport *);
 typedef void (VKAPI_PTR *PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)(VkDevice, const VkAccelerationStructureVersionInfoKHR *, VkAccelerationStructureCompatibilityKHR *);
+typedef void (VKAPI_PTR *PFN_vkGetDeviceBufferMemoryRequirements)(VkDevice, const VkDeviceBufferMemoryRequirements *, VkMemoryRequirements2 *);
 typedef void (VKAPI_PTR *PFN_vkGetDeviceBufferMemoryRequirementsKHR)(VkDevice, const VkDeviceBufferMemoryRequirements *, VkMemoryRequirements2 *);
 typedef void (VKAPI_PTR *PFN_vkGetDeviceGroupPeerMemoryFeatures)(VkDevice, uint32_t, uint32_t, uint32_t, VkPeerMemoryFeatureFlags *);
 typedef void (VKAPI_PTR *PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)(VkDevice, uint32_t, uint32_t, uint32_t, VkPeerMemoryFeatureFlags *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetDeviceGroupPresentCapabilitiesKHR)(VkDevice, VkDeviceGroupPresentCapabilitiesKHR *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetDeviceGroupSurfacePresentModesKHR)(VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR *);
+typedef void (VKAPI_PTR *PFN_vkGetDeviceImageMemoryRequirements)(VkDevice, const VkDeviceImageMemoryRequirements *, VkMemoryRequirements2 *);
 typedef void (VKAPI_PTR *PFN_vkGetDeviceImageMemoryRequirementsKHR)(VkDevice, const VkDeviceImageMemoryRequirements *, VkMemoryRequirements2 *);
+typedef void (VKAPI_PTR *PFN_vkGetDeviceImageSparseMemoryRequirements)(VkDevice, const VkDeviceImageMemoryRequirements *, uint32_t *, VkSparseImageMemoryRequirements2 *);
 typedef void (VKAPI_PTR *PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)(VkDevice, const VkDeviceImageMemoryRequirements *, uint32_t *, VkSparseImageMemoryRequirements2 *);
 typedef void (VKAPI_PTR *PFN_vkGetDeviceMemoryCommitment)(VkDevice, VkDeviceMemory, VkDeviceSize *);
 typedef uint64_t (VKAPI_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddress)(VkDevice, const VkDeviceMemoryOpaqueCaptureAddressInfo *);
@@ -10252,12 +10285,14 @@ typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)(VkPhysic
 typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkSurfaceFormatKHR *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkPresentModeKHR *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice, uint32_t, VkSurfaceKHR, VkBool32 *);
+typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceToolProperties)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceToolProperties *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceToolPropertiesEXT)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceToolProperties *);
 typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice, uint32_t);
 typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineCacheData)(VkDevice, VkPipelineCache, size_t *, void *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineExecutableInternalRepresentationsKHR)(VkDevice, const VkPipelineExecutableInfoKHR *, uint32_t *, VkPipelineExecutableInternalRepresentationKHR *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineExecutablePropertiesKHR)(VkDevice, const VkPipelineInfoKHR *, uint32_t *, VkPipelineExecutablePropertiesKHR *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineExecutableStatisticsKHR)(VkDevice, const VkPipelineExecutableInfoKHR *, uint32_t *, VkPipelineExecutableStatisticKHR *);
+typedef void (VKAPI_PTR *PFN_vkGetPrivateData)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t *);
 typedef void (VKAPI_PTR *PFN_vkGetPrivateDataEXT)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t *);
 typedef VkResult (VKAPI_PTR *PFN_vkGetQueryPoolResults)(VkDevice, VkQueryPool, uint32_t, uint32_t, size_t, void *, VkDeviceSize, VkQueryResultFlags);
 typedef void (VKAPI_PTR *PFN_vkGetQueueCheckpointData2NV)(VkQueue, uint32_t *, VkCheckpointData2NV *);
@@ -10284,6 +10319,7 @@ typedef void (VKAPI_PTR *PFN_vkQueueInsertDebugUtilsLabelEXT)(VkQueue, const VkD
 typedef VkResult (VKAPI_PTR *PFN_vkQueuePresentKHR)(VkQueue, const VkPresentInfoKHR *);
 typedef VkResult (VKAPI_PTR *PFN_vkQueueSetPerformanceConfigurationINTEL)(VkQueue, VkPerformanceConfigurationINTEL);
 typedef VkResult (VKAPI_PTR *PFN_vkQueueSubmit)(VkQueue, uint32_t, const VkSubmitInfo *, VkFence);
+typedef VkResult (VKAPI_PTR *PFN_vkQueueSubmit2)(VkQueue, uint32_t, const VkSubmitInfo2 *, VkFence);
 typedef VkResult (VKAPI_PTR *PFN_vkQueueSubmit2KHR)(VkQueue, uint32_t, const VkSubmitInfo2 *, VkFence);
 typedef VkResult (VKAPI_PTR *PFN_vkQueueWaitIdle)(VkQueue);
 typedef VkResult (VKAPI_PTR *PFN_vkReleasePerformanceConfigurationINTEL)(VkDevice, VkPerformanceConfigurationINTEL);
@@ -10299,6 +10335,7 @@ typedef VkResult (VKAPI_PTR *PFN_vkSetDebugUtilsObjectNameEXT)(VkDevice, const V
 typedef VkResult (VKAPI_PTR *PFN_vkSetDebugUtilsObjectTagEXT)(VkDevice, const VkDebugUtilsObjectTagInfoEXT *);
 typedef void (VKAPI_PTR *PFN_vkSetDeviceMemoryPriorityEXT)(VkDevice, VkDeviceMemory, float);
 typedef VkResult (VKAPI_PTR *PFN_vkSetEvent)(VkDevice, VkEvent);
+typedef VkResult (VKAPI_PTR *PFN_vkSetPrivateData)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t);
 typedef VkResult (VKAPI_PTR *PFN_vkSetPrivateDataEXT)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t);
 typedef VkResult (VKAPI_PTR *PFN_vkSignalSemaphore)(VkDevice, const VkSemaphoreSignalInfo *);
 typedef VkResult (VKAPI_PTR *PFN_vkSignalSemaphoreKHR)(VkDevice, const VkSemaphoreSignalInfo *);
@@ -10340,6 +10377,7 @@ void VKAPI_CALL vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQuery
 void VKAPI_CALL vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, VkSubpassContents contents);
 void VKAPI_CALL vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo);
 void VKAPI_CALL vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo);
+void VKAPI_CALL vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo);
 void VKAPI_CALL vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo);
 void VKAPI_CALL vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets);
 void VKAPI_CALL vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t *pDynamicOffsets);
@@ -10350,8 +10388,10 @@ void VKAPI_CALL vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, Vk
 void VKAPI_CALL vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
 void VKAPI_CALL vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes);
 void VKAPI_CALL vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets);
+void VKAPI_CALL vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides);
 void VKAPI_CALL vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides);
 void VKAPI_CALL vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit *pRegions, VkFilter filter);
+void VKAPI_CALL vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo);
 void VKAPI_CALL vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo);
 void VKAPI_CALL vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV *pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset);
 void VKAPI_CALL vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR *pInfos, const VkDeviceAddress *pIndirectDeviceAddresses, const uint32_t *pIndirectStrides, const uint32_t * const*ppMaxPrimitiveCounts);
@@ -10363,12 +10403,16 @@ void VKAPI_CALL vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer,
 void VKAPI_CALL vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode);
 void VKAPI_CALL vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo);
 void VKAPI_CALL vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy *pRegions);
+void VKAPI_CALL vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo);
 void VKAPI_CALL vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo);
 void VKAPI_CALL vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy *pRegions);
+void VKAPI_CALL vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo);
 void VKAPI_CALL vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo);
 void VKAPI_CALL vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy *pRegions);
+void VKAPI_CALL vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo);
 void VKAPI_CALL vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo);
 void VKAPI_CALL vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy *pRegions);
+void VKAPI_CALL vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo);
 void VKAPI_CALL vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo);
 void VKAPI_CALL vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo);
 void VKAPI_CALL vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
@@ -10403,6 +10447,7 @@ void VKAPI_CALL vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPo
 void VKAPI_CALL vkCmdEndRenderPass(VkCommandBuffer commandBuffer);
 void VKAPI_CALL vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo);
 void VKAPI_CALL vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo);
+void VKAPI_CALL vkCmdEndRendering(VkCommandBuffer commandBuffer);
 void VKAPI_CALL vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer);
 void VKAPI_CALL vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets);
 void VKAPI_CALL vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers);
@@ -10413,36 +10458,47 @@ void VKAPI_CALL vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContent
 void VKAPI_CALL vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo);
 void VKAPI_CALL vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo);
 void VKAPI_CALL vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers);
+void VKAPI_CALL vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo);
 void VKAPI_CALL vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo);
 void VKAPI_CALL vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo);
 void VKAPI_CALL vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void *pValues);
 void VKAPI_CALL vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites);
 void VKAPI_CALL vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void *pData);
 void VKAPI_CALL vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
+void VKAPI_CALL vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
 void VKAPI_CALL vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
 void VKAPI_CALL vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
 void VKAPI_CALL vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve *pRegions);
+void VKAPI_CALL vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo);
 void VKAPI_CALL vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo);
 void VKAPI_CALL vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4]);
 void VKAPI_CALL vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void *pCheckpointMarker);
 void VKAPI_CALL vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV *pCustomSampleOrders);
 void VKAPI_CALL vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32 *pColorWriteEnables);
+void VKAPI_CALL vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
 void VKAPI_CALL vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
 void VKAPI_CALL vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
+void VKAPI_CALL vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
 void VKAPI_CALL vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
 void VKAPI_CALL vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
+void VKAPI_CALL vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
 void VKAPI_CALL vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
+void VKAPI_CALL vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
 void VKAPI_CALL vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
+void VKAPI_CALL vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
 void VKAPI_CALL vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
+void VKAPI_CALL vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
 void VKAPI_CALL vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
 void VKAPI_CALL vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask);
 void VKAPI_CALL vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask);
 void VKAPI_CALL vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D *pDiscardRectangles);
 void VKAPI_CALL vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
+void VKAPI_CALL vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo);
 void VKAPI_CALL vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo);
 void VKAPI_CALL vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D *pExclusiveScissors);
 void VKAPI_CALL vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]);
 void VKAPI_CALL vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D *pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]);
+void VKAPI_CALL vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
 void VKAPI_CALL vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
 void VKAPI_CALL vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
 void VKAPI_CALL vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth);
@@ -10451,22 +10507,29 @@ void VKAPI_CALL vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uin
 VkResult VKAPI_CALL vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL *pMarkerInfo);
 VkResult VKAPI_CALL vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL *pOverrideInfo);
 VkResult VKAPI_CALL vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL *pMarkerInfo);
+void VKAPI_CALL vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
 void VKAPI_CALL vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
+void VKAPI_CALL vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
 void VKAPI_CALL vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
+void VKAPI_CALL vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
 void VKAPI_CALL vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
 void VKAPI_CALL vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize);
 void VKAPI_CALL vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT *pSampleLocationsInfo);
 void VKAPI_CALL vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D *pScissors);
+void VKAPI_CALL vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors);
 void VKAPI_CALL vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors);
 void VKAPI_CALL vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
+void VKAPI_CALL vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
 void VKAPI_CALL vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
 void VKAPI_CALL vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
+void VKAPI_CALL vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
 void VKAPI_CALL vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
 void VKAPI_CALL vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
 void VKAPI_CALL vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT *pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions);
 void VKAPI_CALL vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport *pViewports);
 void VKAPI_CALL vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV *pShadingRatePalettes);
 void VKAPI_CALL vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV *pViewportWScalings);
+void VKAPI_CALL vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports);
 void VKAPI_CALL vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports);
 void VKAPI_CALL vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer);
 void VKAPI_CALL vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);
@@ -10474,12 +10537,14 @@ void VKAPI_CALL vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStrided
 void VKAPI_CALL vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth);
 void VKAPI_CALL vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void *pData);
 void VKAPI_CALL vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers);
+void VKAPI_CALL vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos);
 void VKAPI_CALL vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos);
 void VKAPI_CALL vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR *pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
 void VKAPI_CALL vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV *pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
 void VKAPI_CALL vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
 void VKAPI_CALL vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
 void VKAPI_CALL vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);
+void VKAPI_CALL vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
 void VKAPI_CALL vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
 VkResult VKAPI_CALL vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader);
 VkResult VKAPI_CALL vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR *pInfo);
@@ -10511,6 +10576,7 @@ VkResult VKAPI_CALL vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIn
 VkResult VKAPI_CALL vkCreateInstance(const VkInstanceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkInstance *pInstance);
 VkResult VKAPI_CALL vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineCache *pPipelineCache);
 VkResult VKAPI_CALL vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineLayout *pPipelineLayout);
+VkResult VKAPI_CALL vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot);
 VkResult VKAPI_CALL vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot);
 VkResult VKAPI_CALL vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkQueryPool *pQueryPool);
 VkResult VKAPI_CALL vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines);
@@ -10555,6 +10621,7 @@ void VKAPI_CALL vkDestroyInstance(VkInstance instance, const VkAllocationCallbac
 void VKAPI_CALL vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator);
 void VKAPI_CALL vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks *pAllocator);
 void VKAPI_CALL vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks *pAllocator);
+void VKAPI_CALL vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator);
 void VKAPI_CALL vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator);
 void VKAPI_CALL vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks *pAllocator);
 void VKAPI_CALL vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks *pAllocator);
@@ -10599,12 +10666,15 @@ VkResult VKAPI_CALL vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredO
 void VKAPI_CALL vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport);
 void VKAPI_CALL vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport);
 void VKAPI_CALL vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, const VkAccelerationStructureVersionInfoKHR *pVersionInfo, VkAccelerationStructureCompatibilityKHR *pCompatibility);
+void VKAPI_CALL vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements);
 void VKAPI_CALL vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements);
 void VKAPI_CALL vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures);
 void VKAPI_CALL vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures);
 VkResult VKAPI_CALL vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities);
 VkResult VKAPI_CALL vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR *pModes);
+void VKAPI_CALL vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements);
 void VKAPI_CALL vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements);
+void VKAPI_CALL vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements);
 void VKAPI_CALL vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements);
 void VKAPI_CALL vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize *pCommittedMemoryInBytes);
 uint64_t VKAPI_CALL vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo);
@@ -10670,12 +10740,14 @@ VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physi
 VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pSurfaceFormatCount, VkSurfaceFormatKHR *pSurfaceFormats);
 VkResult VKAPI_CALL vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pPresentModeCount, VkPresentModeKHR *pPresentModes);
 VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 *pSupported);
+VkResult VKAPI_CALL vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties);
 VkResult VKAPI_CALL vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties);
 VkBool32 VKAPI_CALL vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex);
 VkResult VKAPI_CALL vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t *pDataSize, void *pData);
 VkResult VKAPI_CALL vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR *pInternalRepresentations);
 VkResult VKAPI_CALL vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR *pPipelineInfo, uint32_t *pExecutableCount, VkPipelineExecutablePropertiesKHR *pProperties);
 VkResult VKAPI_CALL vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pStatisticCount, VkPipelineExecutableStatisticKHR *pStatistics);
+void VKAPI_CALL vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData);
 void VKAPI_CALL vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData);
 VkResult VKAPI_CALL vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void *pData, VkDeviceSize stride, VkQueryResultFlags flags);
 void VKAPI_CALL vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointData2NV *pCheckpointData);
@@ -10702,6 +10774,7 @@ void VKAPI_CALL vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtil
 VkResult VKAPI_CALL vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR *pPresentInfo);
 VkResult VKAPI_CALL vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration);
 VkResult VKAPI_CALL vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits, VkFence fence);
+VkResult VKAPI_CALL vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence);
 VkResult VKAPI_CALL vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence);
 VkResult VKAPI_CALL vkQueueWaitIdle(VkQueue queue);
 VkResult VKAPI_CALL vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration);
@@ -10717,6 +10790,7 @@ VkResult VKAPI_CALL vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugU
 VkResult VKAPI_CALL vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT *pTagInfo);
 void VKAPI_CALL vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority);
 VkResult VKAPI_CALL vkSetEvent(VkDevice device, VkEvent event);
+VkResult VKAPI_CALL vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data);
 VkResult VKAPI_CALL vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data);
 VkResult VKAPI_CALL vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo);
 VkResult VKAPI_CALL vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo);
