From 49f3ef13b3fd177293546918b13b843704de6536 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 1 Oct 2021 13:56:55 +0200
Subject: [PATCH] bcrypt: Add support for calculating secret ecc keys.

---
 configure.ac                  |  14 ++
 dlls/bcrypt/bcrypt_internal.h |   1 +
 dlls/bcrypt/bcrypt_main.c     |   6 +
 dlls/bcrypt/gnutls.c          | 241 +++++++++++++++++++++++++++++++++-
 include/bcrypt.h              |   1 +
 5 files changed, 260 insertions(+), 3 deletions(-)

diff --git a/configure.ac b/configure.ac
index e24a6f02f59..36d5f39158d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -47,6 +47,7 @@ AC_ARG_WITH(faudio,    AS_HELP_STRING([--without-faudio],[do not use FAudio (XAu
 AC_ARG_WITH(float-abi, AS_HELP_STRING([--with-float-abi=abi],[specify the ABI (soft|softfp|hard) for ARM platforms]))
 AC_ARG_WITH(fontconfig,AS_HELP_STRING([--without-fontconfig],[do not use fontconfig]))
 AC_ARG_WITH(freetype,  AS_HELP_STRING([--without-freetype],[do not use the FreeType library]))
+AC_ARG_WITH(gcrypt,    AS_HELP_STRING([--without-gcrypt],[do not use libgcrypt]))
 AC_ARG_WITH(gettext,   AS_HELP_STRING([--without-gettext],[do not use gettext]))
 AC_ARG_WITH(gettextpo, AS_HELP_STRING([--with-gettextpo],[use the GetTextPO library to rebuild po files]),
             [if test "x$withval" = "xno"; then ac_cv_header_gettext_po_h=no; fi])
@@ -2019,6 +2020,19 @@ WINE_NOTICE_WITH(vkd3d,[test "x$ac_cv_lib_soname_vkd3d" = "x"],
                  [vkd3d ${notice_platform}development files not found (or too old), Direct3D 12 won't be supported.])
 test "x$ac_cv_lib_soname_vkd3d" != "x" || enable_d3d12=${enable_d3d12:-no}

+dnl **** Check for gcrypt ****
+if test "x$with_gcrypt" != "xno"
+then
+    WINE_PACKAGE_FLAGS(GCRYPT,[libgcrypt],,,,
+        [AC_CHECK_HEADERS([gcrypt.h])
+        if test "$ac_cv_header_gcrypt_h" = "yes"
+        then
+            WINE_CHECK_SONAME(gcrypt,gcry_sexp_build,,,[$GCRYPT_LIBS])
+        fi])
+fi
+WINE_NOTICE_WITH(gcrypt,[test "x$ac_cv_lib_soname_gcrypt" = "x"],
+                 [libgcrypt ${notice_platform}development files not found, GCRYPT won't be supported.])
+
 dnl **** Check for gcc specific options ****

 AC_SUBST(EXTRACFLAGS,"")
diff --git a/dlls/bcrypt/bcrypt_internal.h b/dlls/bcrypt/bcrypt_internal.h
index 6d8b3293d68..5569da34845 100644
--- a/dlls/bcrypt/bcrypt_internal.h
+++ b/dlls/bcrypt/bcrypt_internal.h
@@ -131,6 +131,7 @@ enum alg_id
     /* secret agreement */
     ALG_ID_DH,
     ALG_ID_ECDH_P256,
+    ALG_ID_ECDH_P384,

     /* signature */
     ALG_ID_RSA_SIGN,
diff --git a/dlls/bcrypt/bcrypt_main.c b/dlls/bcrypt/bcrypt_main.c
index d05301e9d23..0eb64365c7d 100644
--- a/dlls/bcrypt/bcrypt_main.c
+++ b/dlls/bcrypt/bcrypt_main.c
@@ -113,6 +113,7 @@ builtin_algorithms[] =
     {  BCRYPT_RSA_ALGORITHM,        BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE, 0,      0,    0 },
     {  BCRYPT_DH_ALGORITHM,         BCRYPT_SECRET_AGREEMENT_INTERFACE,      0,      0,    0 },
     {  BCRYPT_ECDH_P256_ALGORITHM,  BCRYPT_SECRET_AGREEMENT_INTERFACE,      0,      0,    0 },
+    {  BCRYPT_ECDH_P384_ALGORITHM,  BCRYPT_SECRET_AGREEMENT_INTERFACE,      0,      0,    0 },
     {  BCRYPT_RSA_SIGN_ALGORITHM,   BCRYPT_SIGNATURE_INTERFACE,             0,      0,    0 },
     {  BCRYPT_ECDSA_P256_ALGORITHM, BCRYPT_SIGNATURE_INTERFACE,             0,      0,    0 },
     {  BCRYPT_ECDSA_P384_ALGORITHM, BCRYPT_SIGNATURE_INTERFACE,             0,      0,    0 },
@@ -1334,6 +1335,11 @@ static NTSTATUS key_import_pair( struct algorithm *alg, const WCHAR *type, BCRYP
             magic = BCRYPT_ECDH_PUBLIC_P256_MAGIC;
             break;

+        case ALG_ID_ECDH_P384:
+            key_size = 48;
+            magic = BCRYPT_ECDH_PUBLIC_P384_MAGIC;
+            break;
+
         case ALG_ID_ECDSA_P256:
             key_size = 32;
             magic = BCRYPT_ECDSA_PUBLIC_P256_MAGIC;
diff --git a/dlls/bcrypt/gnutls.c b/dlls/bcrypt/gnutls.c
index 9c60e9a28e3..9f5e3fb788e 100644
--- a/dlls/bcrypt/gnutls.c
+++ b/dlls/bcrypt/gnutls.c
@@ -53,6 +53,10 @@
 #include <gmp.h>
 #endif

+#ifdef HAVE_GCRYPT_H
+#include <gcrypt.h>
+#endif
+

 WINE_DEFAULT_DEBUG_CHANNEL(bcrypt);
 WINE_DECLARE_DEBUG_CHANNEL(winediag);
@@ -165,6 +169,24 @@ MAKE_FUNCPTR(mpz_mod);
 MAKE_FUNCPTR(mpz_powm);
 MAKE_FUNCPTR(mpz_sub_ui);
 #endif
+
+#if defined(HAVE_GCRYPT_H) && defined(SONAME_LIBGCRYPT)
+static BOOL gcrypt_available;
+static void *libgcrypt_handle;
+
+MAKE_FUNCPTR(gcry_check_version);
+MAKE_FUNCPTR(gcry_sexp_build);
+MAKE_FUNCPTR(gcry_pk_encrypt);
+MAKE_FUNCPTR(gcry_mpi_new);
+MAKE_FUNCPTR(gcry_mpi_print);
+MAKE_FUNCPTR(gcry_sexp_release);
+MAKE_FUNCPTR(gcry_mpi_release);
+MAKE_FUNCPTR(gcry_strsource);
+MAKE_FUNCPTR(gcry_strerror);
+MAKE_FUNCPTR(gcry_sexp_find_token);
+MAKE_FUNCPTR(gcry_sexp_nth_mpi);
+#endif
+
 #undef MAKE_FUNCPTR

 static int compat_gnutls_cipher_tag(gnutls_cipher_hd_t handle, void *tag, size_t tag_size)
@@ -335,6 +357,36 @@ static BOOL gnutls_initialize(void)
     }
 #undef LOAD_FUNCPTR
 #undef LOAD_FUNCPTR_STR
+#endif
+
+#if defined(HAVE_GCRYPT_H) && defined(SONAME_LIBGCRYPT)
+#define LOAD_FUNCPTR(f) \
+    if (!(p##f = dlsym( libgcrypt_handle, #f ))) \
+    { \
+        WARN( "failed to load %s\n", #f ); \
+        gcrypt_available = FALSE; \
+    }
+
+    if ((libgcrypt_handle = dlopen( SONAME_LIBGCRYPT, RTLD_NOW )))
+    {
+        gcrypt_available = TRUE;
+
+        LOAD_FUNCPTR(gcry_check_version);
+        LOAD_FUNCPTR(gcry_sexp_build);
+        LOAD_FUNCPTR(gcry_pk_encrypt);
+        LOAD_FUNCPTR(gcry_mpi_new);
+        LOAD_FUNCPTR(gcry_mpi_print);
+        LOAD_FUNCPTR(gcry_sexp_release);
+        LOAD_FUNCPTR(gcry_mpi_release);
+        LOAD_FUNCPTR(gcry_strsource);
+        LOAD_FUNCPTR(gcry_strerror);
+        LOAD_FUNCPTR(gcry_sexp_find_token);
+        LOAD_FUNCPTR(gcry_sexp_nth_mpi);
+    }
+    else
+        WARN("failed to load gcrypt, no support for ECC secret agreement\n");
+
+#undef LOAD_FUNCPTR
 #endif

     if (!(pgnutls_cipher_tag = dlsym( libgnutls_handle, "gnutls_cipher_tag" )))
@@ -478,6 +530,11 @@ static void gnutls_uninitialize(void)
     dlclose( libgmp_handle );
     libgmp_handle = NULL;
 #endif
+
+#if defined(HAVE_GCRYPT_H) && defined(SONAME_LIBGCRYPT)
+    dlclose( libgcrypt_handle );
+    libgcrypt_handle = NULL;
+#endif
 }

 struct buffer
@@ -849,6 +906,10 @@ static NTSTATUS export_gnutls_pubkey_ecc( gnutls_privkey_t gnutls_key, enum alg_
         magic = BCRYPT_ECDH_PUBLIC_P256_MAGIC;
         size = 32;
         break;
+    case ALG_ID_ECDH_P384:
+        magic = BCRYPT_ECDH_PUBLIC_P384_MAGIC;
+        size = 48;
+        break;
     case ALG_ID_ECDSA_P256:
         magic = BCRYPT_ECDSA_PUBLIC_P256_MAGIC;
         size = 32;
@@ -864,7 +925,7 @@ static NTSTATUS export_gnutls_pubkey_ecc( gnutls_privkey_t gnutls_key, enum alg_
         return STATUS_INTERNAL_ERROR;
     }

-    if (curve != GNUTLS_ECC_CURVE_SECP256R1)
+    if (curve != GNUTLS_ECC_CURVE_SECP256R1 && curve != GNUTLS_ECC_CURVE_SECP384R1)
     {
         FIXME( "curve %u not supported\n", curve );
         free( x.data ); free( y.data );
@@ -1217,6 +1278,11 @@ static NTSTATUS CDECL key_asymmetric_generate( struct key *key )
         bitlen = GNUTLS_CURVE_TO_BITS( GNUTLS_ECC_CURVE_SECP256R1 );
         break;

+    case ALG_ID_ECDH_P384:
+        pk_alg = GNUTLS_PK_ECC;
+        bitlen = GNUTLS_CURVE_TO_BITS( GNUTLS_ECC_CURVE_SECP384R1 );
+        break;
+
     case ALG_ID_DH:
         return key_dh_generate( key );

@@ -1283,6 +1349,10 @@ static NTSTATUS CDECL key_export_ecc( struct key *key, UCHAR *buf, ULONG len, UL
         magic = BCRYPT_ECDH_PRIVATE_P256_MAGIC;
         size = 32;
         break;
+    case ALG_ID_ECDH_P384:
+        magic = BCRYPT_ECDH_PRIVATE_P384_MAGIC;
+        size = 48;
+        break;
     case ALG_ID_ECDSA_P256:
         magic = BCRYPT_ECDSA_PRIVATE_P256_MAGIC;
         size = 32;
@@ -1299,7 +1369,7 @@ static NTSTATUS CDECL key_export_ecc( struct key *key, UCHAR *buf, ULONG len, UL
         return STATUS_INTERNAL_ERROR;
     }

-    if (curve != GNUTLS_ECC_CURVE_SECP256R1)
+    if (curve != GNUTLS_ECC_CURVE_SECP256R1 && curve != GNUTLS_ECC_CURVE_SECP384R1)
     {
         FIXME( "curve %u not supported\n", curve );
         free( x.data ); free( y.data ); free( d.data );
@@ -1553,6 +1623,7 @@ static NTSTATUS CDECL key_asymmetric_init( struct key *key )
     {
     case ALG_ID_DH:
     case ALG_ID_ECDH_P256:
+    case ALG_ID_ECDH_P384:
     case ALG_ID_ECDSA_P256:
     case ALG_ID_ECDSA_P384:
     case ALG_ID_RSA:
@@ -2215,6 +2286,59 @@ static NTSTATUS CDECL key_asymmetric_decrypt( struct key *key, UCHAR *input, ULO
     return status;
 }

+#if defined(HAVE_GCRYPT_H) && defined(SONAME_LIBGCRYPT)
+static NTSTATUS gcrypt_extract_result_into_secret(gcry_sexp_t result, struct secret *secret)
+{
+    NTSTATUS status = STATUS_SUCCESS;
+    gcry_mpi_t fullcoords = NULL;
+    gcry_sexp_t fragment = NULL;
+    UCHAR *tmp_buffer = NULL;
+    gcry_error_t err;
+    size_t size;
+
+    fragment = pgcry_sexp_find_token(result, "s", 0);
+    if (!fragment)
+    {
+        status = STATUS_NO_MEMORY;
+        goto done;
+    }
+
+    fullcoords = pgcry_sexp_nth_mpi(fragment, 1, GCRYMPI_FMT_USG);
+    if (!fullcoords)
+    {
+        status = STATUS_NO_MEMORY;
+        goto done;
+    }
+
+    if ((err = pgcry_mpi_print(GCRYMPI_FMT_USG, NULL, 0, &size, fullcoords)))
+    {
+        ERR("Error = %s/%s.\n", pgcry_strsource(err), pgcry_strerror(err));
+        status = STATUS_INTERNAL_ERROR;
+        goto done;
+    }
+
+    tmp_buffer = malloc(size);
+    if ((err = pgcry_mpi_print(GCRYMPI_FMT_STD, tmp_buffer, size, NULL, fullcoords)))
+    {
+        ERR("Error = %s/%s.\n", pgcry_strsource(err), pgcry_strerror(err));
+        status = STATUS_INTERNAL_ERROR;
+        goto done;
+    }
+
+    secret->data = malloc(size / 2);
+    memcpy(secret->data, tmp_buffer + size % 2, size / 2);
+    secret->data_len = size / 2;
+
+done:
+    free(tmp_buffer);
+
+    pgcry_mpi_release(fullcoords);
+    pgcry_sexp_release(fragment);
+
+    return status;
+}
+#endif
+
 static NTSTATUS key_secret_agreement( void *args )
 {
     struct key_secret_agreement_params *params = args;
@@ -2329,8 +2329,120 @@ static NTSTATUS key_secret_agreement( void *args )
 #endif

         case ALG_ID_ECDH_P256:
-            FIXME("ECDH is not supported.\n");
+        case ALG_ID_ECDH_P384:
+/* this is necessary since GNUTLS doesn't support ECDH public key encryption, maybe we can replace this when it does:
+   https://github.com/gnutls/gnutls/blob/cdc4fc288d87f91f974aa23b6e8595a53970ce00/lib/nettle/pk.c#L495 */
+#if defined(HAVE_GCRYPT_H) && defined(SONAME_LIBGCRYPT)
+        {
+            const char *pubkey_format;
+            DWORD key_size;
+            UCHAR *pubkey_raw;
+            gcry_sexp_t pubkey = NULL;
+            UCHAR *privkey_raw;
+            ULONG privkey_size;
+            gcry_sexp_t privkey = NULL;
+            gcry_sexp_t xchg_result = NULL;
+            gcry_error_t err;
+            NTSTATUS status = STATUS_SUCCESS;
+
+            if (!gcrypt_available)
+            {
+                WARN("ECC secret support not available.\n");
+                return STATUS_NOT_IMPLEMENTED;
+            }
+
+            if (priv_key->alg_id == ALG_ID_ECDH_P256)
+            {
+                pubkey_format = "NIST P-256";
+                key_size = 32;
+            }
+            else if (priv_key->alg_id == ALG_ID_ECDH_P384)
+            {
+                pubkey_format = "NIST P-384";
+                key_size = 48;
+            }
+
+            /* copy public key into temporary buffer so we can prepend 0x04 (to indicate it is uncompressed) */
+            pubkey_raw = malloc((key_size * 2) + 1);
+            pubkey_raw[0] = 0x04;
+            memcpy(pubkey_raw + 1, peer_key->u.a.pubkey + sizeof(BCRYPT_ECCKEY_BLOB), key_size * 2);
+
+            err = pgcry_sexp_build(&pubkey, NULL,
+                                "(key-data(public-key(ecdh(curve %s)(q %b))))",
+                                pubkey_format,
+                                (key_size * 2) + 1,
+                                pubkey_raw);
+
+            free(pubkey_raw);
+
+            if (err)
+            {
+                ERR("Failed to build gcrypt public key. err %s/%s\n", pgcry_strsource (err), pgcry_strerror (err));
+                return STATUS_INTERNAL_ERROR;
+            }
+
+            /* copy private key from gnutls to gcrypt */
+            privkey_size = sizeof(BCRYPT_ECCKEY_BLOB) + key_size * 3;
+            privkey_raw = malloc(privkey_size);
+            status = key_export_ecc(priv_key, privkey_raw, privkey_size, &privkey_size);
+
+            if (status)
+            {
+                ERR("Failed to extra gnutls private key\n");
+                free(privkey_raw);
+                pgcry_sexp_release(pubkey);
+                return status;
+            }
+
+            err = pgcry_sexp_build(&privkey, NULL,
+                                "(data(flags raw)(value %b))",
+                                key_size,
+                                privkey_raw + sizeof(BCRYPT_ECCKEY_BLOB) + key_size * 2);
+
+            free(privkey_raw);
+
+            if (err)
+            {
+                ERR("Failed to build gcrypt private key. err %s/%s\n", pgcry_strsource (err), pgcry_strerror (err));
+                pgcry_sexp_release(pubkey);
+                return STATUS_INTERNAL_ERROR;
+            }
+
+            err = pgcry_pk_encrypt(&xchg_result, privkey, pubkey);
+
+            pgcry_sexp_release(privkey);
+            pgcry_sexp_release(pubkey);
+
+            if (err)
+            {
+                ERR("Failed to perform key exchange. err %s/%s\n", pgcry_strsource (err), pgcry_strerror (err));
+                return STATUS_INTERNAL_ERROR;
+            }
+
+            status = gcrypt_extract_result_into_secret(xchg_result, secret);
+
+            pgcry_sexp_release(xchg_result);
+
+            if (status)
+            {
+                ERR("Failed to extract secret key.\n");
+                return status;
+            }
+
+            if (secret->data_len != key_size)
+            {
+                ERR("got secret size %u, expected %u.\n", secret->data_len, key_size);
+
+                free(secret->data);
+                return STATUS_INTERNAL_ERROR;
+            }
+
             break;
+        }
+#else
+            WARN("Compiled without ECC secret support.\n");
+            return STATUS_NOT_IMPLEMENTED;
+#endif

         default:
             ERR( "unhandled algorithm %u\n", priv_key->alg_id );
diff --git a/include/bcrypt.h b/include/bcrypt.h
index e485023abb0..fe69cee1667 100644
--- a/include/bcrypt.h
+++ b/include/bcrypt.h
@@ -87,6 +87,7 @@ typedef LONG NTSTATUS;
 #define BCRYPT_DH_ALGORITHM         L"DH"
 #define BCRYPT_DSA_ALGORITHM        L"DSA"
 #define BCRYPT_ECDH_P256_ALGORITHM  L"ECDH_P256"
+#define BCRYPT_ECDH_P384_ALGORITHM  L"ECDH_P384"
 #define BCRYPT_ECDSA_P256_ALGORITHM L"ECDSA_P256"
 #define BCRYPT_ECDSA_P384_ALGORITHM L"ECDSA_P384"
 #define BCRYPT_ECDSA_P521_ALGORITHM L"ECDSA_P521"
--
2.33.0
diff --git a/dlls/bcrypt/gnutls.c b/dlls/bcrypt/gnutls.c
index 903750f467f..fb488ba2640 100644
--- a/dlls/bcrypt/gnutls.c
+++ b/dlls/bcrypt/gnutls.c
@@ -2335,6 +2335,7 @@ static NTSTATUS key_secret_agreement( void *args )
 #if defined(HAVE_GCRYPT_H) && defined(SONAME_LIBGCRYPT)
         {
             const char *pubkey_format;
+            struct key_export_params key_export;
             DWORD key_size;
             UCHAR *pubkey_raw;
             gcry_sexp_t pubkey = NULL;
diff --git a/dlls/bcrypt/gnutls.c b/dlls/bcrypt/gnutls.c
index 829de456113..903750f467f 100644
--- a/dlls/bcrypt/gnutls.c
+++ b/dlls/bcrypt/gnutls.c
@@ -2384,7 +2384,11 @@ static NTSTATUS key_secret_agreement( void *args )
             /* copy private key from gnutls to gcrypt */
             privkey_size = sizeof(BCRYPT_ECCKEY_BLOB) + key_size * 3;
             privkey_raw = malloc(privkey_size);
-            status = key_export_ecc(priv_key, privkey_raw, privkey_size, &privkey_size);
+            key_export.key = priv_key;
+            key_export.buf = privkey_raw;
+            key_export.len = privkey_size;
+            key_export.ret_len = &privkey_size;
+            status = key_export_ecc( &key_export );

             if (status)
             {
From 5bf7c820d5890f284fb6dac357ba46020678b588 Mon Sep 17 00:00:00 2001
From: Arkadiusz Hiler <ahiler@codeweavers.com>
Date: Wed, 10 Nov 2021 23:54:15 +0200
Subject: [PATCH] fixup! bcrypt: Add support for calculating secret ecc keys.

---
 include/bcrypt.h | 1 +
 1 file changed, 1 insertion(+)

diff --git a/include/bcrypt.h b/include/bcrypt.h
index fb7d809bc40..f84ab934ec6 100644
--- a/include/bcrypt.h
+++ b/include/bcrypt.h
@@ -165,6 +165,7 @@ static const WCHAR BCRYPT_DES_ALGORITHM[] = {'D','E','S',0};
 static const WCHAR BCRYPT_DH_ALGORITHM[] = {'D','H',0};
 static const WCHAR BCRYPT_DSA_ALGORITHM[] = {'D','S','A',0};
 static const WCHAR BCRYPT_ECDH_P256_ALGORITHM[] = {'E','C','D','H','_','P','2','5','6',0};
+static const WCHAR BCRYPT_ECDH_P384_ALGORITHM[] =  {'E','C','D','H','_','P','3','8','4',0};
 static const WCHAR BCRYPT_ECDSA_P256_ALGORITHM[] = {'E','C','D','S','A','_','P','2','5','6',0};
 static const WCHAR BCRYPT_ECDSA_P384_ALGORITHM[] = {'E','C','D','S','A','_','P','3','8','4',0};
 static const WCHAR BCRYPT_ECDSA_P521_ALGORITHM[] = {'E','C','D','S','A','_','P','5','2','1',0};
