From ed32c881e266b116e394f0343fc976ab0b6d2962 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty <etaash.mathamsetty@gmail.com>
Date: Fri, 17 Nov 2023 17:48:10 -0500
Subject: [PATCH] cfgmgr32: Add CM_Register_Notification stub.

---
 dlls/cfgmgr32/cfgmgr32.spec |  1 +
 dlls/cfgmgr32/main.c        |  8 +++++
 include/cfgmgr32.h          | 72 +++++++++++++++++++++++++++++++++++++
 3 files changed, 81 insertions(+)

diff --git a/dlls/cfgmgr32/cfgmgr32.spec b/dlls/cfgmgr32/cfgmgr32.spec
index 5c9b8f613db..e4cd845e2a4 100644
--- a/dlls/cfgmgr32/cfgmgr32.spec
+++ b/dlls/cfgmgr32/cfgmgr32.spec
@@ -154,6 +154,7 @@
 @ stub CM_Register_Device_InterfaceW
 @ stub CM_Register_Device_Interface_ExA
 @ stub CM_Register_Device_Interface_ExW
+@ stdcall CM_Register_Notification(ptr ptr ptr ptr)
 @ stub CM_Remove_SubTree
 @ stub CM_Remove_SubTree_Ex
 @ stub CM_Remove_Unmarked_Children
diff --git a/dlls/cfgmgr32/main.c b/dlls/cfgmgr32/main.c
index fee3c42a5c4..d15354367f8 100644
--- a/dlls/cfgmgr32/main.c
+++ b/dlls/cfgmgr32/main.c
@@ -21,6 +21,14 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(setupapi);
 
+CONFIGRET WINAPI CM_Register_Notification( CM_NOTIFY_FILTER *filter, void *context,
+                                           PCM_NOTIFY_CALLBACK callback, HCMNOTIFICATION *notify_context )
+{
+    FIXME("%p %p %p %p stub!\n", filter, context, callback, notify_context);
+
+    return CR_CALL_NOT_IMPLEMENTED;
+}
+
 /***********************************************************************
  *           CM_MapCrToWin32Err (cfgmgr32.@)
  */
diff --git a/include/cfgmgr32.h b/include/cfgmgr32.h
index 04f1f80b174..e07ca4edd6f 100644
--- a/include/cfgmgr32.h
+++ b/include/cfgmgr32.h
@@ -187,6 +187,7 @@ typedef DWORD CONFIGRET;
 typedef DWORD DEVINST, *PDEVINST;
 typedef DWORD DEVNODE, *PDEVNODE;
 typedef HANDLE HMACHINE, *PHMACHINE;
+typedef HANDLE HCMNOTIFICATION, *PHCMNOTIFICATION;
 typedef CHAR *DEVNODEID_A, *DEVINSTID_A;
 typedef WCHAR *DEVNODEID_W, *DEVINSTID_W;
 typedef ULONG REGDISPOSITION;
@@ -208,6 +209,77 @@ typedef enum _PNP_VETO_TYPE
     PNP_VetoInsufficientRights
 } PNP_VETO_TYPE, *PPNP_VETO_TYPE;
 
+typedef enum _CM_NOTIFY_FILTER_TYPE
+{
+    CM_NOTIFY_FILTER_TYPE_DEVICEINTERFACE = 0,
+    CM_NOTIFY_FILTER_TYPE_DEVICEHANDLE,
+    CM_NOTIFY_FILTER_TYPE_DEVICEINSTANCE,
+    CM_NOTIFY_FILTER_TYPE_MAX
+} CM_NOTIFY_FILTER_TYPE, *PCM_NOTIFY_FILTER_TYPE;
+
+typedef enum _CM_NOTIFY_ACTION
+{
+    CM_NOTIFY_ACTION_DEVICEINTERFACEARRIVAL = 0,
+    CM_NOTIFY_ACTION_DEVICEINTERFACEREMOVAL,
+    CM_NOTIFY_ACTION_DEVICEQUERYREMOVE,
+    CM_NOTIFY_ACTION_DEVICEQUERYREMOVEFAILED,
+    CM_NOTIFY_ACTION_DEVICEREMOVEPENDING,
+    CM_NOTIFY_ACTION_DEVICEREMOVECOMPLETE,
+    CM_NOTIFY_ACTION_DEVICECUSTOMEVENT,
+    CM_NOTIFY_ACTION_DEVICEINSTANCEENUMERATED,
+    CM_NOTIFY_ACTION_DEVICEINSTANCESTARTED,
+    CM_NOTIFY_ACTION_DEVICEINSTANCEREMOVED,
+    CM_NOTIFY_ACTION_MAX
+} CM_NOTIFY_ACTION, *PCM_NOTIFY_ACTION;
+
+typedef struct _CM_NOTIFY_FILTER
+{
+    DWORD                 cbSize;
+    DWORD                 Flags;
+    CM_NOTIFY_FILTER_TYPE FilterType;
+    DWORD                 Reserved;
+    union {
+        struct {
+            GUID ClassGuid;
+        } DeviceInterface;
+        struct {
+            HANDLE hTarget;
+        } DeviceHandle;
+        struct {
+            WCHAR InstanceId[MAX_DEVICE_ID_LEN];
+        } DeviceInstance;
+    } u;
+} CM_NOTIFY_FILTER, *PCM_NOTIFY_FILTER;
+
+typedef struct _CM_NOTIFY_EVENT_DATA
+{
+    CM_NOTIFY_FILTER_TYPE    FilterType;
+    DWORD                    Reserved;
+    union {
+        struct {
+            GUID    ClassGuid;
+            WCHAR   SymbolicLink[ANYSIZE_ARRAY];
+        } DeviceInterface;
+        struct {
+            GUID    EventGuid;
+            LONG    NameOffset;
+            DWORD   DataSize;
+            BYTE    Data[ANYSIZE_ARRAY];
+        } DeviceHandle;
+        struct {
+            WCHAR   InstanceId[ANYSIZE_ARRAY];
+        } DeviceInstance;
+    } u;
+} CM_NOTIFY_EVENT_DATA, *PCM_NOTIFY_EVENT_DATA;
+
+typedef DWORD (WINAPI *PCM_NOTIFY_CALLBACK)(
+    HCMNOTIFICATION Notify,
+    void *Context,
+    CM_NOTIFY_ACTION Action,
+    CM_NOTIFY_EVENT_DATA *EventData,
+    DWORD EventDataSize
+);
+
 DECL_WINELIB_CFGMGR32_TYPE_AW(DEVNODEID)
 DECL_WINELIB_CFGMGR32_TYPE_AW(DEVINSTID)
 
-- 
GitLab

From 2e14fb4cae5194366cba4aea496cecc9d488a9ff Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty <etaash.mathamsetty@gmail.com>
Date: Sun, 10 Dec 2023 15:29:32 -0500
Subject: [PATCH] xinput: Implement XInputGetCapabilitiesEx.

---
 dlls/xinput1_3/main.c         | 32 ++++++++++++++++++++++++++++++++
 dlls/xinput1_4/xinput1_4.spec |  1 +
 include/xinput.h              | 11 +++++++++++
 3 files changed, 44 insertions(+)

diff --git a/dlls/xinput1_3/main.c b/dlls/xinput1_3/main.c
index e69553fba16..c4b2d5e871b 100644
--- a/dlls/xinput1_3/main.c
+++ b/dlls/xinput1_3/main.c
@@ -1129,3 +1129,35 @@ DWORD WINAPI DECLSPEC_HOTPATCH XInputGetBatteryInformation(DWORD index, BYTE typ

     return ERROR_NOT_SUPPORTED;
 }
+
+DWORD WINAPI DECLSPEC_HOTPATCH XInputGetCapabilitiesEx(DWORD unk, DWORD index, DWORD flags, XINPUT_CAPABILITIES_EX *caps)
+{
+    HIDD_ATTRIBUTES attr;
+    TRACE("unk %lu, index %lu, flags %#lx, capabilities %p.\n", unk, index, flags, caps);
+
+    start_update_thread();
+
+    if (index >= XUSER_MAX_COUNT) return ERROR_BAD_ARGUMENTS;
+
+    if (!controller_lock(&controllers[index])) return ERROR_DEVICE_NOT_CONNECTED;
+
+    if (flags & XINPUT_FLAG_GAMEPAD && controllers[index].caps.SubType != XINPUT_DEVSUBTYPE_GAMEPAD)
+    {
+        controller_unlock(&controllers[index]);
+        return ERROR_DEVICE_NOT_CONNECTED;
+    }
+
+    memcpy(&caps->Capabilities, &controllers[index].caps, sizeof(caps->Capabilities));
+
+    if (!HidD_GetAttributes(controllers[index].device, &attr))
+    {
+        controller_unlock(&controllers[index]);
+        return ERROR_DEVICE_NOT_CONNECTED;
+    }
+
+    caps->VendorId = attr.VendorID;
+    caps->ProductId = attr.ProductID;
+    caps->VersionNumber = attr.VersionNumber;
+
+    return ERROR_SUCCESS;
+}
diff --git a/dlls/xinput1_4/xinput1_4.spec b/dlls/xinput1_4/xinput1_4.spec
index 8c3f4c0cd73..22c511237dd 100644
--- a/dlls/xinput1_4/xinput1_4.spec
+++ b/dlls/xinput1_4/xinput1_4.spec
@@ -7,3 +7,4 @@
 8 stdcall XInputGetKeystroke(long long ptr)
 10 stub XInputGetAudioDeviceIds(long ptr ptr ptr ptr)
 100 stdcall XInputGetStateEx(long ptr)
+108 stdcall XInputGetCapabilitiesEx(long long long ptr)
diff --git a/include/xinput.h b/include/xinput.h
index f7c291630cb..4fca5a04480 100644
--- a/include/xinput.h
+++ b/include/xinput.h
@@ -210,6 +210,16 @@ typedef struct _XINPUT_CAPABILITIES {
     XINPUT_VIBRATION Vibration;
 } XINPUT_CAPABILITIES, *PXINPUT_CAPABILITIES;

+typedef struct _XINPUT_CAPABILITIES_EX
+{
+	XINPUT_CAPABILITIES Capabilities;
+	WORD  VendorId;
+	WORD  ProductId;
+	WORD  VersionNumber;
+	WORD  unk1;
+	DWORD unk2;
+} XINPUT_CAPABILITIES_EX, *PXINPUT_CAPABILITIES_EX;
+
 /*
  * Defines the structure for a joystick input event which is
  * retrieved using the function XInputGetKeystroke
@@ -237,6 +247,7 @@ DWORD WINAPI XInputSetState(DWORD, XINPUT_VIBRATION*);
 DWORD WINAPI XInputGetState(DWORD, XINPUT_STATE*);
 DWORD WINAPI XInputGetKeystroke(DWORD, DWORD, PXINPUT_KEYSTROKE);
 DWORD WINAPI XInputGetCapabilities(DWORD, DWORD, XINPUT_CAPABILITIES*);
+DWORD WINAPI XInputGetCapabilitiesEx(DWORD, DWORD, DWORD, XINPUT_CAPABILITIES_EX*);
 DWORD WINAPI XInputGetDSoundAudioDeviceGuids(DWORD, GUID*, GUID*);
 DWORD WINAPI XInputGetBatteryInformation(DWORD, BYTE, XINPUT_BATTERY_INFORMATION*);

--
GitLab
From 60412be14f2a8ee9d786e62eeaaad69e7e6d79ed Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty <etaash.mathamsetty@gmail.com>
Date: Sun, 10 Dec 2023 15:36:26 -0500
Subject: [PATCH] xinput: Reimplement XInputGetCapabilities.

---
 dlls/xinput1_3/main.c | 20 ++++++--------------
 1 file changed, 6 insertions(+), 14 deletions(-)

diff --git a/dlls/xinput1_3/main.c b/dlls/xinput1_3/main.c
index c4b2d5e871b..beba90b4b45 100644
--- a/dlls/xinput1_3/main.c
+++ b/dlls/xinput1_3/main.c
@@ -1086,25 +1086,17 @@ DWORD WINAPI DECLSPEC_HOTPATCH XInputGetKeystroke(DWORD index, DWORD reserved, P

 DWORD WINAPI DECLSPEC_HOTPATCH XInputGetCapabilities(DWORD index, DWORD flags, XINPUT_CAPABILITIES *capabilities)
 {
-    TRACE("index %lu, flags %#lx, capabilities %p.\n", index, flags, capabilities);
-
-    start_update_thread();
-
-    if (index >= XUSER_MAX_COUNT) return ERROR_BAD_ARGUMENTS;
+    XINPUT_CAPABILITIES_EX caps_ex;
+    DWORD ret;

-    if (!controller_lock(&controllers[index])) return ERROR_DEVICE_NOT_CONNECTED;
+    ret = XInputGetCapabilitiesEx(0, index, flags, &caps_ex);

-    if (flags & XINPUT_FLAG_GAMEPAD && controllers[index].caps.SubType != XINPUT_DEVSUBTYPE_GAMEPAD)
+    if (!ret)
     {
-        controller_unlock(&controllers[index]);
-        return ERROR_DEVICE_NOT_CONNECTED;
+        memcpy(capabilities, &caps_ex.Capabilities, sizeof(*capabilities));
     }

-    memcpy(capabilities, &controllers[index].caps, sizeof(*capabilities));
-
-    controller_unlock(&controllers[index]);
-
-    return ERROR_SUCCESS;
+    return ret;
 }

 DWORD WINAPI DECLSPEC_HOTPATCH XInputGetDSoundAudioDeviceGuids(DWORD index, GUID *render_guid, GUID *capture_guid)
--
GitLab
