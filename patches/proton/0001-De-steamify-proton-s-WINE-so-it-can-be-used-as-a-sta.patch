From 14bb0da11b3b9ecab2c2f8be0d8ff64e5f85afd7 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 16:42:27 -0600
Subject: [PATCH 01/12] 1

---
 dlls/advapi32/advapi.c    | 34 ++++++++++++++++------------------
 dlls/kernelbase/process.c | 15 ---------------
 2 files changed, 16 insertions(+), 33 deletions(-)

diff --git a/dlls/advapi32/advapi.c b/dlls/advapi32/advapi.c
index a22e896c88a..6b3ffe2ea25 100644
--- a/dlls/advapi32/advapi.c
+++ b/dlls/advapi32/advapi.c
@@ -44,15 +44,14 @@ WINE_DEFAULT_DEBUG_CHANNEL(advapi);
  */
 BOOL WINAPI GetUserNameA( LPSTR name, LPDWORD size )
 {
-    static const char steamuserA[] = {'s','t','e','a','m','u','s','e','r',0};
-    if(*size < ARRAY_SIZE(steamuserA)){
-        SetLastError( ERROR_INSUFFICIENT_BUFFER );
-        *size = ARRAY_SIZE(steamuserA);
-        return FALSE;
-    }
-    memcpy(name, steamuserA, sizeof(steamuserA));
-    *size = ARRAY_SIZE(steamuserA);
-    return TRUE;
+    DWORD len = GetEnvironmentVariableA( "WINEUSERNAME", name, *size );
+    BOOL ret;
+
+    if (!len) return FALSE;
+    if ((ret = (len < *size))) len++;
+    else SetLastError( ERROR_INSUFFICIENT_BUFFER );
+    *size = len;
+    return ret;
 }
 
 /******************************************************************************
@@ -60,15 +59,14 @@ BOOL WINAPI GetUserNameA( LPSTR name, LPDWORD size )
  */
 BOOL WINAPI GetUserNameW( LPWSTR name, LPDWORD size )
 {
-    static const WCHAR steamuserW[] = {'s','t','e','a','m','u','s','e','r',0};
-    if(*size < ARRAY_SIZE(steamuserW)){
-        SetLastError( ERROR_INSUFFICIENT_BUFFER );
-        *size = ARRAY_SIZE(steamuserW);
-        return FALSE;
-    }
-    memcpy(name, steamuserW, sizeof(steamuserW));
-    *size = ARRAY_SIZE(steamuserW);
-    return TRUE;
+    DWORD len = GetEnvironmentVariableW( L"WINEUSERNAME", name, *size );
+    BOOL ret;
+
+    if (!len) return FALSE;
+    if ((ret = (len < *size))) len++;
+    else SetLastError( ERROR_INSUFFICIENT_BUFFER );
+    *size = len;
+    return ret;
 }
 
 /******************************************************************************
diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index 54f9435bc16..ac30af8156e 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -1223,21 +1223,6 @@ HANDLE WINAPI DECLSPEC_HOTPATCH OpenProcess( DWORD access, BOOL inherit, DWORD i
     attr.SecurityDescriptor = NULL;
     attr.SecurityQualityOfService = NULL;
 
-    /* PROTON HACK:
-     * On Windows, the Steam client puts its process ID into the registry
-     * at:
-     *
-     *   [HKCU\Software\Valve\Steam\ActiveProcess]
-     *   PID=dword:00000008
-     *
-     * Games get that pid from the registry and then query it with
-     * OpenProcess to ensure Steam is running. Since we aren't running the
-     * Windows Steam in Wine, instead we hack this magic number into the
-     * registry and then substitute the game's process itself in its place
-     * so it can query a valid process.
-     */
-    if (id == 0xfffe) id = GetCurrentProcessId();
-
     cid.UniqueProcess = ULongToHandle(id);
     cid.UniqueThread  = 0;
 
-- 
2.40.0

From 7c37975071de0abb999bf70a18a75dc905d6e141 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 16:52:06 -0600
Subject: [PATCH 02/12] 2

---
 dlls/ntdll/loader.c             | 23 ----------
 dlls/ntdll/unix/loader.c        | 76 ---------------------------------
 dlls/ntdll/unix/signal_i386.c   |  7 ---
 dlls/ntdll/unix/signal_x86_64.c |  7 ---
 dlls/ntdll/unix/unix_private.h  |  2 -
 dlls/ntdll/unixlib.h            |  7 ---
 6 files changed, 122 deletions(-)

diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index aef795d38a1..c92e6b61f5b 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -2279,16 +2279,12 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
                               DWORD flags, BOOL system, WINE_MODREF **pwm )
 {
     static const char builtin_signature[] = "Wine builtin DLL";
-    static HMODULE lsteamclient = NULL;
     char *signature = (char *)((IMAGE_DOS_HEADER *)*module + 1);
-    UNICODE_STRING lsteamclient_us;
     BOOL is_builtin;
     IMAGE_NT_HEADERS *nt;
     WINE_MODREF *wm;
     NTSTATUS status;
     SIZE_T map_size;
-    WCHAR *basename, *tmp;
-    ULONG basename_len;
 
     if (!(nt = RtlImageNtHeader( *module ))) return STATUS_INVALID_IMAGE_FORMAT;
 
@@ -2309,25 +2305,6 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
 
     set_security_cookie( *module, map_size );
 
-    basename = nt_name->Buffer;
-    if ((tmp = wcsrchr(basename, '\\'))) basename = tmp + 1;
-    if ((tmp = wcsrchr(basename, '/'))) basename = tmp + 1;
-    basename_len = wcslen(basename);
-    if (basename_len >= 4 && !wcscmp(basename + basename_len - 4, L".dll")) basename_len -= 4;
-
-    if (use_lsteamclient() && (!RtlCompareUnicodeStrings(basename, basename_len, L"steamclient", 11, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"steamclient64", 13, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"gameoverlayrenderer", 19, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"gameoverlayrenderer64", 21, TRUE)) &&
-        RtlCreateUnicodeStringFromAsciiz(&lsteamclient_us, "lsteamclient.dll") &&
-        (lsteamclient || LdrLoadDll(load_path, 0, &lsteamclient_us, &lsteamclient) == STATUS_SUCCESS))
-    {
-        struct steamclient_setup_trampolines_params params = {.src_mod = *module, .tgt_mod = lsteamclient};
-        NTDLL_UNIX_CALL( steamclient_setup_trampolines, &params );
-        wm->ldr.Flags |= LDR_DONT_RESOLVE_REFS;
-        flags |= DONT_RESOLVE_DLL_REFERENCES;
-    }
-
     /* fixup imports */
 
     if (!(flags & DONT_RESOLVE_DLL_REFERENCES) &&
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index 9c5aa5122a3..f1054c2e9f4 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -2121,24 +2121,6 @@ static ULONG_PTR get_image_address(void)
 }
 
 
-static void *steamclient_srcs[128];
-static void *steamclient_tgts[128];
-static int steamclient_count;
-
-void *steamclient_handle_fault( LPCVOID addr, DWORD err )
-{
-    int i;
-
-    if (!(err & EXCEPTION_EXECUTE_FAULT)) return NULL;
-
-    for (i = 0; i < steamclient_count; ++i)
-    {
-        if (addr == steamclient_srcs[i])
-            return steamclient_tgts[i];
-    }
-
-    return NULL;
-}
 
 static void steamclient_write_jump(void *src_addr, void *tgt_addr)
 {
@@ -2153,63 +2135,6 @@ static void steamclient_write_jump(void *src_addr, void *tgt_addr)
     memcpy((char *)src_addr + sizeof(mov) + sizeof(tgt_addr), jmp, sizeof(jmp));
 }
 
-static NTSTATUS steamclient_setup_trampolines( void *args )
-{
-    static int noexec_cached = -1;
-    struct steamclient_setup_trampolines_params *params = args;
-    HMODULE src_mod = params->src_mod, tgt_mod = params->tgt_mod;
-    SYSTEM_BASIC_INFORMATION info;
-    IMAGE_NT_HEADERS *src_nt = (IMAGE_NT_HEADERS *)((UINT_PTR)src_mod + ((IMAGE_DOS_HEADER *)src_mod)->e_lfanew);
-    IMAGE_NT_HEADERS *tgt_nt = (IMAGE_NT_HEADERS *)((UINT_PTR)tgt_mod + ((IMAGE_DOS_HEADER *)tgt_mod)->e_lfanew);
-    IMAGE_SECTION_HEADER *src_sec = (IMAGE_SECTION_HEADER *)(src_nt + 1);
-    const IMAGE_EXPORT_DIRECTORY *src_exp, *tgt_exp;
-    const DWORD *names;
-    SIZE_T size;
-    void *addr, *src_addr, *tgt_addr;
-    char *name, *wsne;
-    UINT_PTR page_mask;
-    int i;
-
-    if (noexec_cached == -1)
-        noexec_cached = (wsne = getenv("WINESTEAMNOEXEC")) && atoi(wsne);
-
-    virtual_get_system_info( &info, !!NtCurrentTeb()->WowTebOffset );
-    page_mask = info.PageSize - 1;
-
-    for (i = 0; i < src_nt->FileHeader.NumberOfSections; ++i)
-    {
-        if (memcmp(src_sec[i].Name, ".text", 5)) continue;
-        addr = (void *)(((UINT_PTR)src_mod + src_sec[i].VirtualAddress) & ~page_mask);
-        size = (src_sec[i].Misc.VirtualSize + page_mask) & ~page_mask;
-        if (noexec_cached) mprotect(addr, size, PROT_READ);
-        else mprotect(addr, size, PROT_READ|PROT_WRITE|PROT_EXEC);
-    }
-
-    src_exp = get_module_data_dir( src_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
-    tgt_exp = get_module_data_dir( tgt_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
-    names = (const DWORD *)((UINT_PTR)src_mod + src_exp->AddressOfNames);
-    for (i = 0; i < src_exp->NumberOfNames; ++i)
-    {
-        if (!names[i] || !(name = (char *)((UINT_PTR)src_mod + names[i]))) continue;
-        if (!(src_addr = (void *)find_named_export(src_mod, src_exp, name))) continue;
-        if (!(tgt_addr = (void *)find_named_export(tgt_mod, tgt_exp, name))) continue;
-        assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
-        steamclient_srcs[steamclient_count] = src_addr;
-        steamclient_tgts[steamclient_count] = tgt_addr;
-        if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-        else steamclient_count++;
-    }
-
-    src_addr = (void *)((UINT_PTR)src_mod + src_nt->OptionalHeader.AddressOfEntryPoint);
-    tgt_addr = (void *)((UINT_PTR)tgt_mod + tgt_nt->OptionalHeader.AddressOfEntryPoint);
-    assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
-    steamclient_srcs[steamclient_count] = src_addr;
-    steamclient_tgts[steamclient_count] = tgt_addr;
-    if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-    else steamclient_count++;
-
-    return STATUS_SUCCESS;
-}
 
 static BOOL debugstr_pc_impl( void *pc, char *buffer, unsigned int size )
 {
@@ -2270,7 +2195,6 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     load_so_dll,
     unwind_builtin_dll,
     system_time_precise,
-    steamclient_setup_trampolines,
     is_pc_in_native_so,
     debugstr_pc,
 };
diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
index 329c63cf068..874f6c24261 100644
--- a/dlls/ntdll/unix/signal_i386.c
+++ b/dlls/ntdll/unix/signal_i386.c
@@ -1881,7 +1881,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
     struct xcontext xcontext;
     ucontext_t *ucontext = sigcontext;
     void *stack = setup_exception_record( sigcontext, &rec, &xcontext );
-    void *steamclient_addr = NULL;
 
     switch (TRAP_sig(ucontext))
     {
@@ -1916,12 +1915,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
         }
         break;
     case TRAP_x86_PAGEFLT:  /* Page fault */
-        if ((steamclient_addr = steamclient_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09 )))
-        {
-            EIP_sig(ucontext) = (intptr_t)steamclient_addr;
-            return;
-        }
-
         rec.NumberParameters = 2;
         rec.ExceptionInformation[0] = (ERROR_sig(ucontext) >> 1) & 0x09;
         rec.ExceptionInformation[1] = (ULONG_PTR)siginfo->si_addr;
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 900eedb20e7..8f8484bcebd 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -2299,7 +2299,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
     EXCEPTION_RECORD rec = { 0 };
     struct xcontext context;
     ucontext_t *ucontext = sigcontext;
-    void *steamclient_addr = NULL;
 
     rec.ExceptionAddress = (void *)RIP_sig(ucontext);
     save_context( &context, sigcontext );
@@ -2331,12 +2330,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
         }
         break;
     case TRAP_x86_PAGEFLT:  /* Page fault */
-        if ((steamclient_addr = steamclient_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09 )))
-        {
-            RIP_sig(ucontext) = (intptr_t)steamclient_addr;
-            return;
-        }
-
         rec.NumberParameters = 2;
         rec.ExceptionInformation[0] = (ERROR_sig(ucontext) >> 1) & 0x09;
         rec.ExceptionInformation[1] = (ULONG_PTR)siginfo->si_addr;
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 95f9bc67b28..29dd8312c83 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -213,8 +213,6 @@ extern NTSTATUS system_time_precise( void *args ) DECLSPEC_HIDDEN;
 extern void *anon_mmap_fixed( void *start, size_t size, int prot, int flags ) DECLSPEC_HIDDEN;
 extern void *anon_mmap_alloc( size_t size, int prot ) DECLSPEC_HIDDEN;
 
-extern void *steamclient_handle_fault( LPCVOID addr, DWORD err ) DECLSPEC_HIDDEN;
-
 extern void virtual_init(void) DECLSPEC_HIDDEN;
 extern ULONG_PTR get_system_affinity_mask(void) DECLSPEC_HIDDEN;
 extern void virtual_get_system_info( SYSTEM_BASIC_INFORMATION *info, BOOL wow64 ) DECLSPEC_HIDDEN;
diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
index f0cf12b904c..a832cc62b93 100644
--- a/dlls/ntdll/unixlib.h
+++ b/dlls/ntdll/unixlib.h
@@ -38,12 +38,6 @@ struct unwind_builtin_dll_params
     CONTEXT                    *context;
 };
 
-struct steamclient_setup_trampolines_params
-{
-    HMODULE src_mod;
-    HMODULE tgt_mod;
-};
-
 struct debugstr_pc_args
 {
     void *pc;
@@ -56,7 +50,6 @@ enum ntdll_unix_funcs
     unix_load_so_dll,
     unix_unwind_builtin_dll,
     unix_system_time_precise,
-    unix_steamclient_setup_trampolines,
     unix_is_pc_in_native_so,
     unix_debugstr_pc,
 };
-- 
2.40.0

From d97933e957e01a961cd12f0aae29fe6049fb897d Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 16:53:31 -0600
Subject: [PATCH 03/12] 3

---
 dlls/ntdll/unix/loader.c | 16 ----------------
 1 file changed, 16 deletions(-)

diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index f1054c2e9f4..08bb870baae 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -2120,22 +2120,6 @@ static ULONG_PTR get_image_address(void)
     return 0;
 }
 
-
-
-static void steamclient_write_jump(void *src_addr, void *tgt_addr)
-{
-#ifdef _WIN64
-    static const char mov[] = {0x48, 0xb8};
-#else
-    static const char mov[] = {0xb8};
-#endif
-    static const char jmp[] = {0xff, 0xe0};
-    memcpy(src_addr, mov, sizeof(mov));
-    memcpy((char *)src_addr + sizeof(mov), &tgt_addr, sizeof(tgt_addr));
-    memcpy((char *)src_addr + sizeof(mov) + sizeof(tgt_addr), jmp, sizeof(jmp));
-}
-
-
 static BOOL debugstr_pc_impl( void *pc, char *buffer, unsigned int size )
 {
     unsigned int len;
-- 
2.40.0

From ac861fab2246a4698c3dbd1b694733d2478049b4 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 16:55:28 -0600
Subject: [PATCH 04/12] 4

---
 dlls/ntdll/unix/env.c       |  3 +--
 programs/winebrowser/main.c | 18 ------------------
 2 files changed, 1 insertion(+), 20 deletions(-)

diff --git a/dlls/ntdll/unix/env.c b/dlls/ntdll/unix/env.c
index 9e5abc3c4fe..56bb0d9d4fc 100644
--- a/dlls/ntdll/unix/env.c
+++ b/dlls/ntdll/unix/env.c
@@ -2437,7 +2437,6 @@ void WINAPI RtlSetLastWin32Error( DWORD err )
  */
 ULONG WINAPI __wine_set_unix_env( const char *var, const char *val )
 {
-    if (!val) unsetenv(var);
-    else setenv(var, val, 1);
+    setenv(var, val, 1);
     return 0;
 }
diff --git a/programs/winebrowser/main.c b/programs/winebrowser/main.c
index d183b07a921..369ecb98002 100644
--- a/programs/winebrowser/main.c
+++ b/programs/winebrowser/main.c
@@ -63,19 +63,6 @@ static char *strdup_unixcp( const WCHAR *str )
     return ret;
 }
 
-ULONG WINAPI __wine_set_unix_env( const char *var, const char *val );
-
-static void restore_system_environment(void)
-{
-    const char* orig_ld_path = getenv("ORIG_LD_LIBRARY_PATH");
-
-    if (orig_ld_path)
-    {
-        __wine_set_unix_env("LD_LIBRARY_PATH", orig_ld_path);
-        __wine_set_unix_env("ORIG_LD_LIBRARY_PATH", NULL);
-    }
-}
-
 /* try to launch a unix app from a comma separated string of app names */
 static int launch_app( const WCHAR *candidates, const WCHAR *argv1 )
 {
@@ -85,11 +72,6 @@ static int launch_app( const WCHAR *candidates, const WCHAR *argv1 )
 
     if (!(cmdline = strdup_unixcp( argv1 ))) return 1;
 
-    /* PROTON HACK: Restore ORIG_LD_LIBRARY_PATH to LD_LIBRARY_PATH.
-     * System programs may not work correctly with our libraries, in
-     * particular gio on Ubuntu 19.04 is broken by our libgio. */
-    restore_system_environment();
-
     while (*candidates)
     {
         WCHAR **args = CommandLineToArgvW( candidates, &count );
-- 
2.40.0

From d024cbee0739e1f072fd50336292bb617f4a2da1 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 16:57:02 -0600
Subject: [PATCH 05/12] 5

---
 dlls/ntdll/unix/loader.c | 31 -------------------------------
 1 file changed, 31 deletions(-)

diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index 08bb870baae..50bff4d744e 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -773,42 +773,11 @@ NTSTATUS exec_wineloader( char **argv, int socketfd, const pe_image_info_t *pe_i
     WORD machine = pe_info->machine;
     ULONGLONG res_start = pe_info->base;
     ULONGLONG res_end = pe_info->base + pe_info->map_size;
-    const char *ld_preload = getenv( "LD_PRELOAD" );
     char preloader_reserve[64], socket_env[64];
 
     if (pe_info->image_flags & IMAGE_FLAGS_WineFakeDll) res_start = res_end = 0;
     if (pe_info->image_flags & IMAGE_FLAGS_ComPlusNativeReady) machine = native_machine;
 
-    /* HACK: Unset LD_PRELOAD before executing explorer.exe to disable buggy gameoverlayrenderer.so */
-    if (ld_preload && argv[2] && !strcmp( argv[2], "C:\\windows\\system32\\explorer.exe" ) &&
-        argv[3] && !strcmp( argv[3], "/desktop" ))
-    {
-        static char const gorso[] = "gameoverlayrenderer.so";
-        static int gorso_len = sizeof(gorso) - 1;
-        int len = strlen( ld_preload );
-        char *next, *tmp, *env = malloc( sizeof("LD_PRELOAD=") + len );
-
-        if (!env) return STATUS_NO_MEMORY;
-        strcpy( env, "LD_PRELOAD=" );
-        strcat( env, ld_preload );
-
-        tmp = env + 11;
-        do
-        {
-            if (!(next = strchr( tmp, ':' ))) next = tmp + strlen( tmp );
-            if (next - tmp >= gorso_len && strncmp( next - gorso_len, gorso, gorso_len ) == 0)
-            {
-                if (*next) memmove( tmp, next + 1, strlen(next) );
-                else *tmp = 0;
-                next = tmp;
-            }
-            else tmp = next + 1;
-        }
-        while (*next);
-
-        putenv( env );
-    }
-
     signal( SIGPIPE, SIG_DFL );
 
     sprintf( socket_env, "WINESERVERSOCKET=%u", socketfd );
-- 
2.40.0


From 5df6ecc5371068fda54353b2f528bf462e2b0694 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 17:01:26 -0600
Subject: [PATCH 07/12] 7

---
 dlls/winex11.drv/window.c | 15 ++-------------
 1 file changed, 2 insertions(+), 13 deletions(-)

diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index af34cc6e462..a9816838276 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1070,19 +1070,8 @@ static void set_initial_wm_hints( Display *display, Window window )
     /* class hints */
     if ((class_hints = XAllocClassHint()))
     {
-        static char steam_proton[] = "steam_proton";
-        const char *app_id = getenv("SteamAppId");
-        char proton_app_class[128];
-
-        if(app_id && *app_id){
-            snprintf(proton_app_class, sizeof(proton_app_class), "steam_app_%s", app_id);
-            class_hints->res_name = proton_app_class;
-            class_hints->res_class = proton_app_class;
-        }else{
-            class_hints->res_name = steam_proton;
-            class_hints->res_class = steam_proton;
-        }
-
+        class_hints->res_name = process_name;
+        class_hints->res_class = process_name;
         XSetClassHint( display, window, class_hints );
         XFree( class_hints );
     }
-- 
2.40.0

From d753924c15d0ebe4b5ce5527739dbb84bc842faf Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 17:05:40 -0600
Subject: [PATCH 08/12] 8

---
 loader/wine.inf.in | 9 ++-------
 1 file changed, 2 insertions(+), 7 deletions(-)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 68c2564e7b2..92a1874a8d5 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -100,8 +100,7 @@ AddReg=\
     VersionInfo,\
     LicenseInformation, \
     NVIDIANGX, \
-    ProtonOverrides, \
-    SteamClient
+    ProtonOverrides
 
 [DefaultInstall.ntamd64]
 RegisterDlls=RegisterDllsSection
@@ -130,8 +129,7 @@ AddReg=\
     VersionInfo.ntamd64,\
     LicenseInformation, \
     NVIDIANGX, \
-    ProtonOverrides, \
-    SteamClient.ntamd64
+    ProtonOverrides
 
 [DefaultInstall.ntarm64]
 RegisterDlls=RegisterDllsSection
@@ -176,7 +174,6 @@ AddReg=\
     VersionInfo.ntamd64,\
     LicenseInformation, \
     NVIDIANGX, \
-    ProtonOverrides, \
     SteamClient.ntamd64
 
 [Wow64Install.ntarm64]
@@ -340,7 +337,6 @@ HKCR,ftp\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,http\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,https\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
 HKCR,mailto\shell\open\command,,2,"""%11%\winebrowser.exe"" ""%1"""
-HKCR,steam\shell\open\command,,,"""%16426%\Steam\Steam.exe"" -- ""%1"""
 
 HKCU,Software\Wine\FileOpenBlacklist\.htm,"winebrowser",,"""%11%\winebrowser.exe"" -nohome"
 HKCU,Software\Wine\FileOpenBlacklist\.html,"winebrowser",,"""%11%\winebrowser.exe"" -nohome"
@@ -443,7 +439,6 @@ HKLM,%CurrentVersionNT%\AeDebug,"Debugger",2,"winedbg --auto %ld %ld"
 HKLM,%CurrentVersionNT%\AeDebug,"Auto",2,"1"
 HKCU,Software\Wine\Debug,"RelayExclude",2,"ntdll.RtlEnterCriticalSection;ntdll.RtlTryEnterCriticalSection;ntdll.RtlLeaveCriticalSection;kernel32.48;kernel32.49;kernel32.94;kernel32.95;kernel32.96;kernel32.97;kernel32.98;kernel32.TlsGetValue;kernel32.TlsSetValue;kernel32.FlsGetValue;kernel32.FlsSetValue;kernel32.SetLastError"
 HKCU,Software\Wine\Debug,"RelayFromExclude",2,"winex11.drv;winemac.drv;user32;gdi32;advapi32;kernel32"
-HKCU,Software\Wine\WineDbg,"ShowCrashDialog",0x00010003,0x00000000
 
 [DirectX]
 HKLM,Software\Microsoft\DirectX,"Version",,"4.09.00.0904"
-- 
2.40.0

From 2e6337dadc9b81e84fe3c37b1c5d3792172e213b Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 17:09:21 -0600
Subject: [PATCH 09/12] 9

---
 loader/wine.inf.in | 19 ++-----------------
 2 files changed, 3 insertions(+), 17 deletions(-)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 92a1874a8d5..2f19d867193 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -174,7 +174,7 @@ AddReg=\
     VersionInfo.ntamd64,\
     LicenseInformation, \
     NVIDIANGX, \
-    SteamClient.ntamd64
+    ProtonOverrides
 
 [Wow64Install.ntarm64]
 WineFakeDlls=FakeDllsWin32
@@ -3043,22 +3044,6 @@ InfFiles  = 17
 NlsFiles  = 11
 SortFiles = 10,globalization\sorting
 
-[SteamClient]
-HKCU,Software\Valve\Steam,"SteamPath",,"%16422%\Steam"
-HKCU,Software\Valve\Steam,"SteamExe",,"%16422%\Steam\Steam.exe"
-HKCU,Software\Valve\Steam\ActiveProcess,"PID",0x10001,0x0000fffe
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll",,"%16422%\Steam\steamclient.dll"
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16422%\Steam"
-
-[SteamClient.ntamd64]
-HKCU,Software\Valve\Steam,"SteamPath",,"%16422%\Steam"
-HKCU,Software\Valve\Steam,"SteamExe",,"%16422%\Steam\Steam.exe"
-HKCU,Software\Valve\Steam\ActiveProcess,"PID",0x10001,0x0000fffe
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll",,"%16426%\Steam\steamclient.dll"
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steamclient64.dll"
-HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
-HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
-
 [NVIDIANGX]
 HKLM,Software\NVIDIA Corporation\Global\NGXCore,"FullPath",,"C:\Windows\System32"
 
-- 
2.40.0

From cb2c3fbfd724c735332c380d9cd8352644957a6d Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 17:10:33 -0600
Subject: [PATCH 10/12] 10

---
 programs/wineboot/wineboot.c | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/programs/wineboot/wineboot.c b/programs/wineboot/wineboot.c
index 537139bb26d..87329bceafc 100644
--- a/programs/wineboot/wineboot.c
+++ b/programs/wineboot/wineboot.c
@@ -1578,6 +1578,37 @@ static BOOL start_services_process(void)
     return TRUE;
 }
 
+static INT_PTR CALLBACK wait_dlgproc( HWND hwnd, UINT msg, WPARAM wp, LPARAM lp )
+{
+    switch (msg)
+    {
+    case WM_INITDIALOG:
+        {
+            DWORD len;
+            WCHAR *buffer, text[1024];
+            const WCHAR *name = (WCHAR *)lp;
+            HICON icon = LoadImageW( 0, (LPCWSTR)IDI_WINLOGO, IMAGE_ICON, 48, 48, LR_SHARED );
+            SendDlgItemMessageW( hwnd, IDC_WAITICON, STM_SETICON, (WPARAM)icon, 0 );
+            SendDlgItemMessageW( hwnd, IDC_WAITTEXT, WM_GETTEXT, 1024, (LPARAM)text );
+            len = lstrlenW(text) + lstrlenW(name) + 1;
+            buffer = HeapAlloc( GetProcessHeap(), 0, len * sizeof(WCHAR) );
+            swprintf( buffer, len, text, name );
+            SendDlgItemMessageW( hwnd, IDC_WAITTEXT, WM_SETTEXT, 0, (LPARAM)buffer );
+            HeapFree( GetProcessHeap(), 0, buffer );
+        }
+        break;
+    }
+    return 0;
+}
+
+static HWND show_wait_window(void)
+{
+    HWND hwnd = CreateDialogParamW( GetModuleHandleW(0), MAKEINTRESOURCEW(IDD_WAITDLG), 0,
+                                    wait_dlgproc, (LPARAM)prettyprint_configdir() );
+    ShowWindow( hwnd, SW_SHOWNORMAL );
+    return hwnd;
+}
+
 static HANDLE start_rundll32( const WCHAR *inf_path, const WCHAR *install, WORD machine )
 {
     WCHAR app[MAX_PATH + ARRAY_SIZE(L"\\rundll32.exe" )];
@@ -1774,6 +1805,7 @@ static void update_wineprefix( BOOL force )
 
         if ((process = start_rundll32( inf_path, L"PreInstall", IMAGE_FILE_MACHINE_TARGET_HOST )))
         {
+            HWND hwnd = show_wait_window();
             for (;;)
             {
                 MSG msg;
@@ -1791,6 +1823,7 @@ static void update_wineprefix( BOOL force )
                 }
                 else while (PeekMessageW( &msg, 0, 0, 0, PM_REMOVE )) DispatchMessageW( &msg );
             }
+            DestroyWindow( hwnd );
         }
         install_root_pnp_devices();
         update_user_profile();
-- 
2.40.0

From 5be4d18f4090a915ab60b8d40026640fa716f252 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Mon, 1 May 2023 17:14:21 -0600
Subject: [PATCH 11/12] 12

---
 programs/winedbg/debugger.h   |  2 --
 programs/winedbg/tgt_active.c | 48 -----------------------------------
 programs/winedbg/winedbg.c    | 10 +-------
 3 files changed, 1 insertion(+), 59 deletions(-)

diff --git a/programs/winedbg/debugger.h b/programs/winedbg/debugger.h
index 570ed52143f..61fb055e53f 100644
--- a/programs/winedbg/debugger.h
+++ b/programs/winedbg/debugger.h
@@ -312,8 +312,6 @@ extern	DWORD	                dbg_curr_tid;
 extern  dbg_ctx_t               dbg_context;
 extern  BOOL                    dbg_interactiveP;
 extern  HANDLE                  dbg_houtput;
-extern  HANDLE                  dbg_crash_report_file;
-extern  BOOL                    dbg_use_wine_dbg_output;
 
 struct dbg_internal_var
 {
diff --git a/programs/winedbg/tgt_active.c b/programs/winedbg/tgt_active.c
index 069d0a39c23..0d5ae754af5 100644
--- a/programs/winedbg/tgt_active.c
+++ b/programs/winedbg/tgt_active.c
@@ -22,8 +22,6 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdarg.h>
-#include <time.h>
-#include <sys/stat.h>
 
 #include "debugger.h"
 #include "psapi.h"
@@ -798,48 +796,6 @@ static HANDLE create_temp_file(void)
                         NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_DELETE_ON_CLOSE, 0 );
 }
 
-static HANDLE create_crash_report_file(void)
-{
-    const char *dir = getenv("WINE_CRASH_REPORT_DIR");
-    const char *sgi;
-    char timestr[32];
-    char name[MAX_PATH], *c;
-    time_t t;
-    struct tm lt;
-
-    if(!dir || dir[0] == 0)
-        return INVALID_HANDLE_VALUE;
-
-    strcpy(name, dir);
-
-    for(c = name + 1; *c; ++c){
-        if(*c == '/'){
-            *c = 0;
-            CreateDirectoryA(name, NULL);
-            *c = '/';
-        }
-    }
-    CreateDirectoryA(name, NULL);
-
-    sgi = getenv("SteamGameId");
-
-    t = time(NULL);
-    lt = *localtime(&t);
-    strftime(timestr, ARRAY_SIZE(timestr), "%Y-%m-%d_%H:%M:%S", &lt);
-
-    /* /path/to/crash/reports/2021-05-18_13:21:15_appid-976310_crash.log */
-    snprintf(name, ARRAY_SIZE(name),
-            "%s%s/%s_appid-%s_crash.log",
-            dir[0] == '/' ? "Z:/" : "",
-            dir,
-            timestr,
-            sgi ? sgi : "0"
-            );
-
-    return CreateFileA( name, GENERIC_WRITE, FILE_SHARE_READ,
-                        NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0 );
-}
-
 static const struct
 {
     int type;
@@ -1021,10 +977,6 @@ enum dbg_start dbg_active_auto(int argc, char* argv[])
         if (event) thread = display_crash_details( event );
         if (thread) dbg_houtput = output = create_temp_file();
         break;
-    case TRUE:
-        dbg_use_wine_dbg_output = TRUE;
-        dbg_crash_report_file = create_crash_report_file();
-        break;
     }
 
     input = parser_generate_command_file("echo Modules:", "info share",
diff --git a/programs/winedbg/winedbg.c b/programs/winedbg/winedbg.c
index 8cccf30fa09..9815ed4a046 100644
--- a/programs/winedbg/winedbg.c
+++ b/programs/winedbg/winedbg.c
@@ -82,8 +82,6 @@ DWORD	                dbg_curr_pid = 0;
 dbg_ctx_t               dbg_context;
 BOOL    	        dbg_interactiveP = FALSE;
 HANDLE                  dbg_houtput = 0;
-HANDLE                  dbg_crash_report_file = INVALID_HANDLE_VALUE;
-BOOL                    dbg_use_wine_dbg_output = FALSE;
 
 static struct list      dbg_process_list = LIST_INIT(dbg_process_list);
 
@@ -96,9 +94,6 @@ static void dbg_outputA(const char* buffer, int len)
 
     DWORD w, i;
 
-    if (dbg_use_wine_dbg_output)
-        __wine_dbg_output(buffer);
-
     while (len > 0)
     {
         unsigned int count = min( len, sizeof(line_buff) - line_pos );
@@ -112,10 +107,7 @@ static void dbg_outputA(const char* buffer, int len)
             if (len > 0) i = line_pos;  /* buffer is full, flush anyway */
             else break;
         }
-        if (!dbg_use_wine_dbg_output)
-            WriteFile(dbg_houtput, line_buff, i, &w, NULL);
-        if (dbg_crash_report_file != INVALID_HANDLE_VALUE)
-            WriteFile(dbg_crash_report_file, line_buff, i, &w, NULL);
+        WriteFile(dbg_houtput, line_buff, i, &w, NULL);
         memmove( line_buff, line_buff + i, line_pos - i );
         line_pos -= i;
     }
-- 
2.40.0

From e0304a2c64e5f354bbe832277853907a9ea05442 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Sat, 6 May 2023 02:08:53 -0600
Subject: [PATCH] revert document folder symlink steam changes

---
 dlls/shell32/shellpath.c | 219 ++++++++++++++++++++++++++++++++-------
 1 file changed, 184 insertions(+), 35 deletions(-)

diff --git a/dlls/shell32/shellpath.c b/dlls/shell32/shellpath.c
index 36083e575d2..5dd9f4b6310 100644
--- a/dlls/shell32/shellpath.c
+++ b/dlls/shell32/shellpath.c
@@ -2639,6 +2639,183 @@ end:
     return hr;
 }

+static char *xdg_config;
+static DWORD xdg_config_len;
+
+static BOOL WINAPI init_xdg_dirs( INIT_ONCE *once, void *param, void **context )
+{
+    const WCHAR *var, *fmt = L"\\??\\unix%s/user-dirs.dirs";
+    char *p;
+    WCHAR *name, *ptr;
+    HANDLE file;
+    DWORD len;
+
+    if (!(var = _wgetenv( L"XDG_CONFIG_HOME" )) || var[0] != '/')
+    {
+        if (!(var = _wgetenv( L"WINEHOMEDIR" ))) return TRUE;
+        fmt = L"%s/.config/user-dirs.dirs";
+    }
+    len = lstrlenW(var) + lstrlenW(fmt);
+    name = heap_alloc( len * sizeof(WCHAR) );
+    swprintf( name, len, fmt, var );
+    name[1] = '\\';  /* change \??\ to \\?\ */
+    for (ptr = name; *ptr; ptr++) if (*ptr == '/') *ptr = '\\';
+
+    file = CreateFileW( name, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, 0 );
+    heap_free( name );
+    if (file != INVALID_HANDLE_VALUE)
+    {
+        len = GetFileSize( file, NULL );
+        if (!(xdg_config = heap_alloc( len + 1 ))) return TRUE;
+        if (!ReadFile( file, xdg_config, len, &xdg_config_len, NULL ))
+        {
+            heap_free( xdg_config );
+            xdg_config = NULL;
+        }
+        else
+        {
+            for (p = xdg_config; p < xdg_config + xdg_config_len; p++) if (*p == '\n') *p = 0;
+            *p = 0;  /* append null to simplify string parsing */
+        }
+        CloseHandle( file );
+    }
+    return TRUE;
+}
+
+static char *get_xdg_path( const char *var )
+{
+    static INIT_ONCE once;
+    char *p, *ret = NULL;
+    int i;
+
+    InitOnceExecuteOnce( &once, init_xdg_dirs, NULL, NULL );
+    if (!xdg_config) return NULL;
+
+    for (p = xdg_config; p < xdg_config + xdg_config_len; p += strlen(p) + 1)
+    {
+        while (*p == ' ' || *p == '\t') p++;
+        if (strncmp( p, var, strlen(var) )) continue;
+        p += strlen(var);
+        while (*p == ' ' || *p == '\t') p++;
+        if (*p != '=') continue;
+        p++;
+        while (*p == ' ' || *p == '\t') p++;
+        if (*p != '"') continue;
+        p++;
+        if (*p != '/' && strncmp( p, "$HOME/", 6 )) continue;
+
+        if (!(ret = heap_alloc( strlen(p) + 1 ))) break;
+        for (i = 0; *p && *p != '"'; i++, p++)
+        {
+            if (*p == '\\' && p[1]) p++;
+            ret[i] = *p;
+        }
+        ret[i] = 0;
+        if (*p != '"')
+        {
+            heap_free( ret );
+            ret = NULL;
+        }
+        break;
+    }
+    return ret;
+}
+
+static BOOL link_folder( HANDLE mgr, const UNICODE_STRING *path, const char *link )
+{
+    struct mountmgr_shell_folder *ioctl;
+    DWORD len = sizeof(*ioctl) + path->Length + strlen(link) + 1;
+    BOOL ret;
+
+    if (!(ioctl = heap_alloc( len ))) return FALSE;
+    ioctl->create_backup = FALSE;
+    ioctl->folder_offset = sizeof(*ioctl);
+    ioctl->folder_size = path->Length;
+    memcpy( (char *)ioctl + ioctl->folder_offset, path->Buffer, ioctl->folder_size );
+    ioctl->symlink_offset = ioctl->folder_offset + ioctl->folder_size;
+    strcpy( (char *)ioctl + ioctl->symlink_offset, link );
+
+    ret = DeviceIoControl( mgr, IOCTL_MOUNTMGR_DEFINE_SHELL_FOLDER, ioctl, len, NULL, 0, NULL, NULL );
+    heap_free( ioctl );
+    return ret;
+}
+
+/******************************************************************************
+ * create_link
+ *
+ * Sets up a symbolic link for one of the 'My Whatever' shell folders to point
+ * into the corresponding XDG directory.
+ */
+static void create_link( const WCHAR *path, const char *xdg_name, const char *default_name )
+{
+    UNICODE_STRING nt_name;
+    char *target = NULL;
+    HANDLE mgr;
+
+    if ((mgr = CreateFileW( MOUNTMGR_DOS_DEVICE_NAME, GENERIC_READ | GENERIC_WRITE,
+                            FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING,
+                            0, 0 )) == INVALID_HANDLE_VALUE)
+    {
+        FIXME( "failed to connect to mount manager\n" );
+        return;
+    }
+
+    nt_name.Buffer = NULL;
+    if (!RtlDosPathNameToNtPathName_U( path, &nt_name, NULL, NULL )) goto done;
+
+    if ((target = get_xdg_path( xdg_name )))
+    {
+        if (link_folder( mgr, &nt_name, target )) goto done;
+    }
+    if (link_folder( mgr, &nt_name, default_name )) goto done;
+
+    /* fall back to HOME */
+    link_folder( mgr, &nt_name, "$HOME" );
+
+done:
+    RtlFreeUnicodeString( &nt_name );
+    heap_free( target );
+    CloseHandle( mgr );
+}
+
+/******************************************************************************
+ * _SHCreateSymbolicLink  [Internal]
+ *
+ * Sets up a symbolic link for one of the special shell folders to point into
+ * the users home directory.
+ *
+ * PARAMS
+ *  nFolder [I] CSIDL identifying the folder.
+ */
+static void _SHCreateSymbolicLink(int nFolder, const WCHAR *path)
+{
+    DWORD folder = nFolder & CSIDL_FOLDER_MASK;
+
+    switch (folder) {
+        case CSIDL_PERSONAL:
+            create_link( path, "XDG_DOCUMENTS_DIR", "$HOME/Documents" );
+            break;
+        case CSIDL_DESKTOPDIRECTORY:
+            create_link( path, "XDG_DESKTOP_DIR", "$HOME/Desktop" );
+            break;
+        case CSIDL_MYPICTURES:
+            create_link( path, "XDG_PICTURES_DIR", "$HOME/Pictures" );
+            break;
+        case CSIDL_MYVIDEO:
+            create_link( path, "XDG_VIDEOS_DIR", "$HOME/Movies" );
+            break;
+        case CSIDL_MYMUSIC:
+            create_link( path, "XDG_MUSIC_DIR", "$HOME/Music" );
+            break;
+        case CSIDL_DOWNLOADS:
+            create_link( path, "XDG_DOWNLOAD_DIR", "$HOME/Downloads" );
+            break;
+        case CSIDL_TEMPLATES:
+            create_link( path, "XDG_TEMPLATES_DIR", "$HOME/Templates" );
+            break;
+    }
+}
+
 /******************************************************************************
  * SHGetFolderPathW			[SHELL32.@]
  *
@@ -2827,6 +3004,10 @@ HRESULT WINAPI SHGetFolderPathAndSubDirW(
         goto end;
     }

+    /* create symbolic links rather than directories for specific
+     * user shell folders */
+    _SHCreateSymbolicLink(folder, szBuildPath);
+
     /* create directory/directories */
     ret = SHCreateDirectoryExW(hwndOwner, szBuildPath, NULL);
     if (ret && ret != ERROR_ALREADY_EXISTS)
@@ -2881,8 +3062,6 @@ static HRESULT _SHRegisterFolders(HKEY hRootKey, HANDLE hToken,
  LPCWSTR szUserShellFolderPath, LPCWSTR szShellFolderPath, const UINT folders[],
  UINT foldersLen)
 {
-    static const WCHAR WineVistaPathsW[] = {'_','_','W','i','n','e','V','i','s','t','a','P','a','t','h','s',0};
-
     const WCHAR *szValueName;
     WCHAR buffer[40];
     UINT i;
@@ -2891,7 +3070,6 @@ static HRESULT _SHRegisterFolders(HKEY hRootKey, HANDLE hToken,
     HKEY hUserKey = NULL, hKey = NULL;
     DWORD dwType, dwPathLen;
     LONG ret;
-    DWORD already_vista_paths = 0;

     TRACE("%p,%p,%s,%p,%u\n", hRootKey, hToken,
      debugstr_w(szUserShellFolderPath), folders, foldersLen);
@@ -2905,12 +3083,6 @@ static HRESULT _SHRegisterFolders(HKEY hRootKey, HANDLE hToken,
         if (ret)
             hr = HRESULT_FROM_WIN32(ret);
     }
-
-    /* check if the registry has already been updated to the vista+ style paths */
-    dwPathLen = sizeof(already_vista_paths);
-    RegQueryValueExW(hUserKey, WineVistaPathsW, NULL, &dwType,
-            (LPBYTE)&already_vista_paths, &dwPathLen);
-
     for (i = 0; SUCCEEDED(hr) && i < foldersLen; i++)
     {
         dwPathLen = MAX_PATH * sizeof(WCHAR);
@@ -2923,10 +3095,9 @@ static HRESULT _SHRegisterFolders(HKEY hRootKey, HANDLE hToken,
             szValueName = &buffer[0];
         }

-        if (!already_vista_paths ||
-                RegQueryValueExW(hUserKey, szValueName, NULL, &dwType,
-                    (LPBYTE)path, &dwPathLen) ||
-                (dwType != REG_SZ && dwType != REG_EXPAND_SZ))
+        if (RegQueryValueExW(hUserKey, szValueName, NULL,
+         &dwType, (LPBYTE)path, &dwPathLen) || (dwType != REG_SZ &&
+         dwType != REG_EXPAND_SZ))
         {
             *path = '\0';
             if (CSIDL_Data[folders[i]].type == CSIDL_Type_User)
@@ -2967,11 +3138,6 @@ static HRESULT _SHRegisterFolders(HKEY hRootKey, HANDLE hToken,
              hToken, SHGFP_TYPE_DEFAULT, path);
         }
     }
-
-    already_vista_paths = 1;
-    RegSetValueExW(hUserKey, WineVistaPathsW, 0, REG_DWORD,
-            (LPBYTE)&already_vista_paths, sizeof(already_vista_paths));
-
     if (hUserKey)
         RegCloseKey(hUserKey);
     if (hKey)
@@ -3112,23 +3278,6 @@ static HRESULT create_extra_folders(void)
         hr = SHGetFolderPathAndSubDirW(0, CSIDL_APPDATA | CSIDL_FLAG_CREATE, NULL,
                                        SHGFP_TYPE_DEFAULT, L"Microsoft\\Windows\\Themes", path);
     }
-
-
-    /* Proton HACK: In older Proton versions, duplicate Stuff directories were
-     * created at both %PROFILE%\Music and %PROFILE\Documents\Music. Due to
-     * some bugs when downgrading to those older Proton versions, create those
-     * missing Documents directories here, too. */
-    SHGetFolderPathAndSubDirW(0, CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL,
-                                   SHGFP_TYPE_DEFAULT, L"Downloads", path);
-    SHGetFolderPathAndSubDirW(0, CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL,
-                                   SHGFP_TYPE_DEFAULT, L"Music", path);
-    SHGetFolderPathAndSubDirW(0, CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL,
-                                   SHGFP_TYPE_DEFAULT, L"Pictures", path);
-    SHGetFolderPathAndSubDirW(0, CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL,
-                                   SHGFP_TYPE_DEFAULT, L"Templates", path);
-    SHGetFolderPathAndSubDirW(0, CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL,
-                                   SHGFP_TYPE_DEFAULT, L"Videos", path);
-
     return hr;
 }

--
2.40.0


From 1b809b41a0577c0cc6bd3555b477e5d87a3c05df Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Tue, 2 May 2023 19:09:52 -0600
Subject: [PATCH] loader fixup

---
 dlls/ntdll/loader.c | 15 +--------------
 1 file changed, 1 insertion(+), 14 deletions(-)

diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index c4008b93357..e8c819e6e73 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -87,7 +87,7 @@ const WCHAR windows_dir[] = L"C:\\windows";
 const WCHAR system_dir[] = L"C:\\windows\\system32\\";

 /* system search path */
-static const WCHAR system_path[] = L"C:\\windows\\system32;C:\\windows\\system;C:\\windows;C:\\Program Files (x86)\\Steam";
+static const WCHAR system_path[] = L"C:\\windows\\system32;C:\\windows\\system;C:\\windows";

 static BOOL is_prefix_bootstrap;  /* are we bootstrapping the prefix? */
 static BOOL imports_fixup_done = FALSE;  /* set once the imports have been fixed up, before attaching them */
@@ -2126,19 +2126,6 @@ static NTSTATUS perform_relocations( void *module, IMAGE_NT_HEADERS *nt, SIZE_T
     return STATUS_SUCCESS;
 }

-static int use_lsteamclient(void)
-{
-    WCHAR env[32];
-    static int use = -1;
-
-    if (use != -1) return use;
-
-    use = !get_env( L"PROTON_DISABLE_LSTEAMCLIENT", env, sizeof(env) ) || *env == '0';
-    if (!use)
-        ERR("lsteamclient disabled.\n");
-    return use;
-}
-
 /*************************************************************************
  *		build_module
  *
--
2.40.0

