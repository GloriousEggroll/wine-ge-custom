From 6a1159fd49718165c61100ea70b0054d5a484ea6 Mon Sep 17 00:00:00 2001
From: Steven Noonan <steven@valvesoftware.com>
Date: Wed, 17 Oct 2018 04:13:37 -0700
Subject: [PATCH] ntdll/loader: add support for overriding
 IMAGE_FILE_LARGE_ADDRESS_AWARE

Signed-off-by: Steven Noonan <steven@valvesoftware.com>
---
 dlls/kernel32/heap.c           |  7 ++++++-
 dlls/ntdll/ntdll.spec          |  3 +++
 dlls/ntdll/unix/loader.c       |  1 +
 dlls/ntdll/unix/server.c       |  4 ++--
 dlls/ntdll/unix/unix_private.h |  2 ++
 dlls/ntdll/unix/virtual.c      | 12 ++++++++++++
 include/winternl.h             |  3 ++-
 7 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/dlls/kernel32/heap.c b/dlls/kernel32/heap.c
index 1ec2f5cce0d..f3e10460e7a 100644
--- a/dlls/kernel32/heap.c
+++ b/dlls/kernel32/heap.c
@@ -425,6 +425,10 @@ VOID WINAPI GlobalMemoryStatus( LPMEMORYSTATUS lpBuffer )
 #ifndef _WIN64
     IMAGE_NT_HEADERS *nt = RtlImageNtHeader( GetModuleHandleW(0) );
 #endif
+    static int force_large_address_aware = -1;
+
+    if (force_large_address_aware == -1)
+        force_large_address_aware = __wine_needs_override_large_address_aware();

     /* Because GlobalMemoryStatus is identical to GlobalMemoryStatusEX save
        for one extra field in the struct, and the lack of a bug, we simply
@@ -463,7 +467,8 @@ VOID WINAPI GlobalMemoryStatus( LPMEMORYSTATUS lpBuffer )

     /* values are limited to 2Gb unless the app has the IMAGE_FILE_LARGE_ADDRESS_AWARE flag */
     /* page file sizes are not limited (Adobe Illustrator 8 depends on this) */
-    if (!(nt->FileHeader.Characteristics & IMAGE_FILE_LARGE_ADDRESS_AWARE))
+    if (!(nt->FileHeader.Characteristics & IMAGE_FILE_LARGE_ADDRESS_AWARE) &&
+        !force_large_address_aware)
     {
         if (lpBuffer->dwTotalPhys > MAXLONG) lpBuffer->dwTotalPhys = MAXLONG;
         if (lpBuffer->dwAvailPhys > MAXLONG) lpBuffer->dwAvailPhys = MAXLONG;
diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index d5f6737e1aa..c9af898afb5 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -1711,6 +1711,9 @@
 @ cdecl -norelay __wine_dbg_output(str)
 @ cdecl -norelay __wine_dbg_strdup(str)

+# Virtual memory
+@ stdcall -syscall __wine_needs_override_large_address_aware()
+
 # Version
 @ cdecl wine_get_version()
 @ cdecl wine_get_build_id()
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index 50446fddbbc..bbbb7baacde 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -359,6 +359,7 @@ static void * const syscalls[] =
     NtWriteFileGather,
     NtWriteVirtualMemory,
     NtYieldExecution,
+    __wine_needs_override_large_address_aware,
     wine_nt_to_unix_file_name,
     wine_unix_to_nt_file_name,
 };
diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 97be02fbc1d..91f442a2078 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -1665,8 +1665,8 @@ void server_init_process_done(void)
 #ifdef __APPLE__
     send_server_task_port();
 #endif
-    if (main_image_info.ImageCharacteristics & IMAGE_FILE_LARGE_ADDRESS_AWARE)
-        virtual_set_large_address_space();
+    if (main_image_info.ImageCharacteristics & IMAGE_FILE_LARGE_ADDRESS_AWARE
+            || __wine_needs_override_large_address_aware()) virtual_set_large_address_space();

     /* Install signal handlers; this cannot be done earlier, since we cannot
      * send exceptions to the debugger before the create process event that
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 326c9c8f9eb..b629a9abda2 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -505,4 +505,6 @@ static inline NTSTATUS map_section( HANDLE mapping, void **ptr, SIZE_T *size, UL
                                0, NULL, size, ViewShare, 0, protect );
 }

+BOOL WINAPI __wine_needs_override_large_address_aware(void);
+
 #endif /* __NTDLL_UNIX_PRIVATE_H */
diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index e393f313a8c..d14ade38406 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -3442,6 +3442,18 @@ static BOOL is_inside_thread_stack( void *ptr, struct thread_stack_info *stack )
     return ((char *)ptr > stack->start && (char *)ptr <= stack->end);
 }

+BOOL WINAPI __wine_needs_override_large_address_aware(void)
+{
+    static int needs_override = -1;
+
+    if (needs_override == -1)
+    {
+        const char *str = getenv( "WINE_LARGE_ADDRESS_AWARE" );
+        needs_override = !str || atoi(str) == 1;
+    }
+    return needs_override;
+}
+

 /***********************************************************************
  *           grow_thread_stack
diff --git a/include/winternl.h b/include/winternl.h
index ed0e51bae24..de31c8b5c4d 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -4756,6 +4756,7 @@ NTSYSAPI NTSTATUS  WINAPI RtlLargeIntegerToChar(const ULONGLONG *,ULONG,ULONG,PC

 /* Wine internal functions */

+NTSYSAPI BOOL WINAPI __wine_needs_override_large_address_aware(void);
 NTSYSAPI NTSTATUS WINAPI wine_nt_to_unix_file_name( const OBJECT_ATTRIBUTES *attr, char *nameA, ULONG *size,
                                                     UINT disposition );
 NTSYSAPI NTSTATUS WINAPI wine_unix_to_nt_file_name( const char *name, WCHAR *buffer, ULONG *size );
