diff --git a/dlls/winex11.drv/fs.c b/dlls/winex11.drv/fs.c
index b9b6b6503a0..b54aeda7602 100644
--- a/dlls/winex11.drv/fs.c
+++ b/dlls/winex11.drv/fs.c
@@ -79,29 +79,43 @@ resolution list to scale up.
 Below is a table of FSR values allowed that are not part of the fullscreen
 resolution list:
 
+    32:9 (5120x1440) -- Samsung Neo G9:
+    {2560, 720},  // 32:9 - 'FSR 32:9 Performance'
+    {3012, 847},  // 32:9 - 'FSR 32:9 Balanced'
+    {3413, 960},  // 32:9 - 'FSR 32:9 Quality'
+    {3938, 1108},  // 32:9 - 'FSR 32:9 Ultra Quality'
+
     4K:
-    //{1920, 1080},  /* 16:9 - 'FSR 2160p Performance' -- already in resolution list
-    {2259, 1270}, /* 16:9 - 'FSR 2160p Balanced'
-    //{2560, 1440},  /* 16:9 - 'FSR 2160p Quality' -- already in resolution list
-    {2954, 1662}, /* 16:9 - 'FSR 2160p Ultra Quality'
+    {1920, 1080},  // 16:9 - 'FSR 2160p Performance'
+    {2259, 1270}, // 16:9 - 'FSR 2160p Balanced'
+    {2560, 1440},  // 16:9 - 'FSR 2160p Quality'
+    {2954, 1662}, // 16:9 - 'FSR 2160p Ultra Quality'
 
     Ultra-wide:
-    {1720, 720}, /* 21:9 - 'FSR ultra-wide Performance'
-    {2024, 847}, /* 21:9 - 'FSR ultra-wide Balanced'
-    {2293, 960}, /* 21:9 - 'FSR ultra-wide Quality'
-    {2646, 1108}, /* 21:9 - 'FSR ultra-wide Ultra Quality'
+    {1720, 720}, // 21:9 - 'FSR ultra-wide Performance'
+    {2024, 847}, // 21:9 - 'FSR ultra-wide Balanced'
+    {2293, 960}, // 21:9 - 'FSR ultra-wide Quality'
+    {2646, 1108}, // 21:9 - 'FSR ultra-wide Ultra Quality'
 
     2K:
-    //{1280, 720},  /* 16:9 - 'FSR 1440p Performance' -- already in resolution list
-    {1506, 847},  /* 16:9 - 'FSR 1440p Balanced'
-    {1706, 960},  /* 16:9 - 'FSR 1440p Quality'
-    {1970, 1108}, /* 16:9 - 'FSR 1440p Ultra Quality'
+    {1280, 720},  // 16:9 - 'FSR 1440p Performance'
+    {1506, 847},  // 16:9 - 'FSR 1440p Balanced'
+    {1706, 960},  // 16:9 - 'FSR 1440p Quality'
+    {1970, 1108}, // 16:9 - 'FSR 1440p Ultra Quality'
 
     1080p:
-    //{960, 540},  /* 16:9 - 'FSR 1080p Performance'
-    {1129, 635},  /* 16:9 - 'FSR 1080p Balanced'
-    //{1280, 720},  /* 16:9 - 'FSR 1080p Quality' -- already in resolution list
-    {1477, 831},  /* 16:9 - 'FSR 1080p Ultra Quality'
+    {960, 640},   // 16:9 - 'FSR 1080p Performance'
+    {1129, 635},  // 16:9 - 'FSR 1080p Balanced'
+    {1280, 720},  // 16:9 - 'FSR 1080p Quality'
+    {1477, 831},  // 16:9 - 'FSR 1080p Ultra Quality'
+
+The formula for FSR resolutions is as follows:
+
+    Ultra Quality — 1.3x scaling
+    Quality — 1.5x scaling
+    Balanced — 1.7x scaling 
+    Performance — 2x scaling
+
 */
 
 /* A table of resolutions some games expect but host system may not report */
@@ -148,6 +162,11 @@ static struct fs_monitor_size fsr4k_ultra[] =
     {2954, 1662}, /* 16:9 - 'FSR 2160p Ultra Quality' */
 };
 
+static struct fs_monitor_size fsr329_ultra[] =
+{
+    {3938, 1108},  // 32:9 - 'FSR 32:9 Ultra Quality'
+};
+
 /* Quality FSR */
 static struct fs_monitor_size fsr1080_quality[] =
 {
@@ -169,6 +188,11 @@ static struct fs_monitor_size fsr4k_quality[] =
     {2560, 1440},  /* 16:9 - 'FSR 2160p Quality' */
 };
 
+static struct fs_monitor_size fsr329_quality[] =
+{
+    {3413, 960},  // 32:9 - 'FSR 32:9 Quality'
+};
+
 /* Balanced FSR */
 static struct fs_monitor_size fsr1080_balanced[] =
 {
@@ -190,6 +214,11 @@ static struct fs_monitor_size fsr4k_balanced[] =
     {2259, 1270}, /* 16:9 - 'FSR 2160p Balanced' */
 };
 
+static struct fs_monitor_size fsr329_balanced[] =
+{
+    {3012, 847},  // 32:9 - 'FSR 32:9 Balanced'
+};
+
 /* Performance FSR */
 static struct fs_monitor_size fsr1080_performance[] =
 {
@@ -211,6 +240,11 @@ static struct fs_monitor_size fsr4k_performance[] =
     {1920, 1080},  /* 16:9 - 'FSR 2160p Performance' */
 };
 
+static struct fs_monitor_size fsr329_performance[] =
+{
+    {2560, 720},  // 32:9 - 'FSR 32:9 Performance'
+};
+
 static struct fs_monitor_size fsr_fake_res[] =
 {
     {1920, 1080},  /* Custom resolution, replaced by WINE_FULLSCREEN_FAKE_CURRENT_RES */
@@ -330,6 +364,9 @@ static BOOL fs_monitor_add_modes(struct fs_monitor *fs_monitor)
                 } else if (current_mode.dmPelsWidth <= 3840) {
                     /* 4k FSR resolutions */
                     memcpy(fs_monitor_sizes+sizeof(fsr4k_ultra),fsr4k_ultra,sizeof(fsr4k_ultra));
+                } else if (current_mode.dmPelsWidth <= 5120) {
+                    /* 4k FSR resolutions */
+                    memcpy(fs_monitor_sizes+sizeof(fsr329_ultra),fsr329_ultra,sizeof(fsr329_ultra));
                 }
             } else if (!strcmp(fsr_mode, "quality")) {
                 if (current_mode.dmPelsWidth >= 1129 && current_mode.dmPelsWidth <= 1920) {
@@ -344,6 +381,9 @@ static BOOL fs_monitor_add_modes(struct fs_monitor *fs_monitor)
                 } else if (current_mode.dmPelsWidth <= 3840) {
                     /* 4k FSR resolutions */
                     memcpy(fs_monitor_sizes+sizeof(fsr4k_quality),fsr4k_quality,sizeof(fsr4k_quality));
+                } else if (current_mode.dmPelsWidth <= 5120) {
+                    /* 4k FSR resolutions */
+                    memcpy(fs_monitor_sizes+sizeof(fsr329_quality),fsr329_quality,sizeof(fsr329_quality));
                 }
             } else if (!strcmp(fsr_mode, "balanced")) {
                 if (current_mode.dmPelsWidth >= 1129 && current_mode.dmPelsWidth <= 1920) {
@@ -358,6 +398,9 @@ static BOOL fs_monitor_add_modes(struct fs_monitor *fs_monitor)
                 } else if (current_mode.dmPelsWidth <= 3840) {
                     /* 4k FSR resolutions */
                     memcpy(fs_monitor_sizes+sizeof(fsr4k_balanced),fsr4k_balanced,sizeof(fsr4k_balanced));
+                } else if (current_mode.dmPelsWidth <= 5120) {
+                    /* 4k FSR resolutions */
+                    memcpy(fs_monitor_sizes+sizeof(fsr329_balanced),fsr329_balanced,sizeof(fsr329_balanced));
                 }
             } else if (!strcmp(fsr_mode, "performance")) {
                 if (current_mode.dmPelsWidth >= 1129 && current_mode.dmPelsWidth <= 1920) {
@@ -419,6 +419,9 @@ static BOOL fs_monitor_add_modes(struct fs_monitor *fs_monitor)
                 } else if (current_mode.dmPelsWidth <= 3840) {
                     /* 4k FSR resolutions */
                     memcpy(fs_monitor_sizes+sizeof(fsr4k_performance),fsr4k_performance,sizeof(fsr4k_performance));
+                } else if (current_mode.dmPelsWidth <= 5120) {
+                    /* 32:9 FSR resolutions */
+                    memcpy(fs_monitor_sizes+sizeof(fsr329_performance),fsr329_performance,sizeof(fsr329_performance));
                 }
             }
         /* If no mode specified, default to balanced */
