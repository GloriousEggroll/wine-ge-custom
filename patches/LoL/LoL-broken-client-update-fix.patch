From bd1491a3c81e3cef11160e51d74a49f575ba4b1e Mon Sep 17 00:00:00 2001
From: Matias Zuniga <matias.nicolas.zc@gmail.com>
Date: Sun, 29 Aug 2021 15:58:03 -0400
Subject: [PATCH 1/3] ntdll: resolve drive symlink for mapped filename

Applications expect a path starting with a drive like
'\Device\Harddisk1\' instead of a drive letter.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=51687
Signed-off-by: Matias Zuniga <matias.nicolas.zc@gmail.com>
---
 dlls/ntdll/unix/virtual.c     | 89 +++++++++++++++++++++++++++++++----
 dlls/psapi/tests/psapi_main.c |  5 +-
 2 files changed, 82 insertions(+), 12 deletions(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index b62968cb26d..ff554e274c6 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4993,9 +4993,9 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
     return STATUS_SUCCESS;
 }
 
-static NTSTATUS read_nt_symlink( UNICODE_STRING *name, WCHAR *target, DWORD size )
+static unsigned int read_nt_symlink( UNICODE_STRING *name, UNICODE_STRING *targetW )
 {
-    NTSTATUS status;
+    unsigned int status;
     OBJECT_ATTRIBUTES attr;
     HANDLE handle;
 
@@ -5008,101 +5008,93 @@ static NTSTATUS read_nt_symlink( UNICODE_STRING *name, WCHAR *target, DWORD size
 
     if (!(status = NtOpenSymbolicLinkObject( &handle, SYMBOLIC_LINK_QUERY, &attr )))
     {
-        UNICODE_STRING targetW;
-        targetW.Buffer = target;
-        targetW.MaximumLength = (size - 1) * sizeof(WCHAR);
-        status = NtQuerySymbolicLinkObject( handle, &targetW, NULL );
-        if (!status) target[targetW.Length / sizeof(WCHAR)] = 0;
+        status = NtQuerySymbolicLinkObject( handle, targetW, NULL );
         NtClose( handle );
     }
     return status;
 }
 
-static NTSTATUS resolve_drive_symlink( UNICODE_STRING *name, SIZE_T max_name_len, SIZE_T *ret_len, NTSTATUS status )
+static unsigned int follow_device_symlink( WCHAR *name_ret, SIZE_T max_ret_len,
+                                       WCHAR *buffer, SIZE_T buffer_len,
+                                       SIZE_T *current_path_len )
 {
-    static int enabled = -1;
+    unsigned int status = STATUS_SUCCESS;
+    SIZE_T devname_len = 6 * sizeof(WCHAR); /* e.g. \??\C: */
+    UNICODE_STRING devname, targetW;
 
-    static const WCHAR dosprefixW[] = {'\\','?','?','\\'};
-    UNICODE_STRING device_name;
-    SIZE_T required_length, symlink_len;
-    WCHAR symlink[256];
-    size_t offset = 0;
+    if (*current_path_len >= devname_len && buffer[devname_len / sizeof(WCHAR) - 1] == ':') {
+        devname.Buffer = buffer;
+        devname.Length = devname_len;
 
-    if (enabled == -1)
-    {
-        const char *sgi = getenv("SteamGameId");
+        targetW.Buffer = buffer + (*current_path_len / sizeof(WCHAR));
+        targetW.MaximumLength = buffer_len - *current_path_len - sizeof(WCHAR);
+        if (!(status = read_nt_symlink( &devname, &targetW )))
+        {
+            *current_path_len -= devname_len; /* skip the device name */
+            *current_path_len += targetW.Length;
 
-        enabled = sgi && !strcmp(sgi, "284160");
-    }
-    if (!enabled) return status;
-    if (status == STATUS_INFO_LENGTH_MISMATCH)
-    {
-        /* FIXME */
-        *ret_len += 64;
-        return status;
+            if (*current_path_len <= max_ret_len)
+            {
+                memcpy( name_ret, targetW.Buffer, targetW.Length ); /* Copy the drive path */
+                memcpy( name_ret + targetW.Length / sizeof(WCHAR), /* Copy the rest of the path */
+                        buffer + devname_len / sizeof(WCHAR),
+                        *current_path_len - targetW.Length );
+            }
+            else status = STATUS_BUFFER_OVERFLOW;
+        }
     }
-    if (status) return status;
-
-    if (name->Length < sizeof(dosprefixW) ||
-            memcmp( name->Buffer, dosprefixW, sizeof(dosprefixW) ))
-        return STATUS_SUCCESS;
-
-    offset = ARRAY_SIZE(dosprefixW);
-    while (offset * sizeof(WCHAR) < name->Length && name->Buffer[ offset ] != '\\') offset++;
-
-    device_name = *name;
-    device_name.Length = offset * sizeof(WCHAR);
-    if ((status = read_nt_symlink( &device_name, symlink, ARRAY_SIZE( symlink ))))
-    {
-        ERR("read_nt_symlink failed, status %#x.\n", (int)status);
-        return status;
+    else if (*current_path_len <= max_ret_len) {
+        memcpy( name_ret, buffer, *current_path_len );
     }
-    symlink_len = wcslen( symlink );
-    required_length = symlink_len * sizeof(WCHAR) +
-           name->Length - offset * sizeof(WCHAR) + sizeof(WCHAR);
-    if (ret_len)
-        *ret_len = sizeof(MEMORY_SECTION_NAME) + required_length;
-    if (required_length > max_name_len)
-        return STATUS_INFO_LENGTH_MISMATCH;
+    else status = STATUS_BUFFER_OVERFLOW;
 
-    memmove( name->Buffer + symlink_len, name->Buffer + offset, name->Length - offset * sizeof(WCHAR) );
-    memcpy( name->Buffer, symlink, symlink_len * sizeof(WCHAR) );
-    name->MaximumLength = required_length;
-    name->Length = required_length - sizeof(WCHAR);
-    name->Buffer[name->Length / sizeof(WCHAR)] = 0;
-    return STATUS_SUCCESS;
+    return status;
 }
 
 static unsigned int get_memory_section_name( HANDLE process, LPCVOID addr,
                                              MEMORY_SECTION_NAME *info, SIZE_T len, SIZE_T *ret_len )
 {
+    SIZE_T current_path_len, max_path_len = 0;
+    /* buffer to hold the path + 6 chars devname (e.g. \??\C:) */
+    SIZE_T buffer_len = (MAX_PATH + 6) * sizeof(WCHAR);
+    WCHAR *buffer = NULL;
     unsigned int status;
 
     if (!info) return STATUS_ACCESS_VIOLATION;
+    if (!(buffer = malloc( buffer_len ))) return STATUS_NO_MEMORY;
+    if (len > sizeof(*info) + sizeof(WCHAR))
+    {
+        max_path_len = len - sizeof(*info) - sizeof(WCHAR); /* dont count null char */
+    }
 
     SERVER_START_REQ( get_mapping_filename )
     {
         req->process = wine_server_obj_handle( process );
         req->addr = wine_server_client_ptr( addr );
-        if (len > sizeof(*info) + sizeof(WCHAR))
-            wine_server_set_reply( req, info + 1, len - sizeof(*info) - sizeof(WCHAR) );
+	wine_server_set_reply( req, buffer, MAX_PATH );
         status = wine_server_call( req );
-        if (!status || status == STATUS_BUFFER_OVERFLOW)
+        if (!status)
         {
-            if (ret_len) *ret_len = sizeof(*info) + reply->len + sizeof(WCHAR);
-            if (len < sizeof(*info)) status = STATUS_INFO_LENGTH_MISMATCH;
+            current_path_len = reply->len;
+            status = follow_device_symlink( (WCHAR *)(info + 1), max_path_len, buffer, buffer_len, &current_path_len);
+            if (len < sizeof(*info))
+            {
+                status = STATUS_INFO_LENGTH_MISMATCH;
+            }
+
+            if (ret_len) *ret_len = sizeof(*info) + current_path_len + sizeof(WCHAR);
             if (!status)
             {
                 info->SectionFileName.Buffer = (WCHAR *)(info + 1);
-                info->SectionFileName.Length = reply->len;
-                info->SectionFileName.MaximumLength = reply->len + sizeof(WCHAR);
-                info->SectionFileName.Buffer[reply->len / sizeof(WCHAR)] = 0;
+                info->SectionFileName.Length = current_path_len;
+                info->SectionFileName.MaximumLength = current_path_len + sizeof(WCHAR);
+                info->SectionFileName.Buffer[current_path_len / sizeof(WCHAR)] = 0;
             }
         }
     }
     SERVER_END_REQ;
-
-    return resolve_drive_symlink( &info->SectionFileName, len - sizeof(*info), ret_len, status );
+    free(buffer);
+    return status;
 }
 
 
diff --git a/dlls/psapi/tests/psapi_main.c b/dlls/psapi/tests/psapi_main.c
index 860598c39c5..e11eac60d01 100644
--- a/dlls/psapi/tests/psapi_main.c
+++ b/dlls/psapi/tests/psapi_main.c
@@ -824,7 +824,6 @@ static void test_GetMappedFileName(void)
     ret = GetMappedFileNameA(GetCurrentProcess(), base, map_name, sizeof(map_name));
     ok(ret, "GetMappedFileName error %ld\n", GetLastError());
     ok(ret > strlen(device_name), "map_name should be longer than device_name\n");
-    todo_wine
     ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
 
     SetLastError(0xdeadbeef);
@@ -835,7 +834,6 @@ static void test_GetMappedFileName(void)
     {
         ok(memcmp(map_nameW, nt_map_name, lstrlenW(map_nameW)) == 0, "map name does not start with a device name: %s\n", map_name);
         WideCharToMultiByte(CP_ACP, 0, map_nameW, -1, map_name, MAX_PATH, NULL, NULL);
-        todo_wine
         ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
     }
 
@@ -843,7 +841,6 @@ static void test_GetMappedFileName(void)
     ret = GetMappedFileNameA(GetCurrentProcess(), base + 0x2000, map_name, sizeof(map_name));
     ok(ret, "GetMappedFileName error %ld\n", GetLastError());
     ok(ret > strlen(device_name), "map_name should be longer than device_name\n");
-    todo_wine
     ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
 
     SetLastError(0xdeadbeef);
@@ -919,7 +916,7 @@ static void test_GetProcessImageFileName(void)
     {
         /* Windows returns 2*strlen-1 */
         ok(ret >= strlen(szImgPath), "szImgPath=\"%s\" ret=%ld\n", szImgPath, ret);
-        todo_wine ok(!strcmp(szImgPath, szMapPath), "szImgPath=\"%s\" szMapPath=\"%s\"\n", szImgPath, szMapPath);
+        ok(!strcmp(szImgPath, szMapPath), "szImgPath=\"%s\" szMapPath=\"%s\"\n", szImgPath, szMapPath);
     }
 
     SetLastError(0xdeadbeef);
-- 
2.39.2

